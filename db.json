{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/xoxo-plus/source/css/common.less","path":"css/common.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/core.less","path":"css/core.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/highlight.less","path":"css/highlight.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/light_tritanopia_xoxo.css","path":"css/light_tritanopia_xoxo.css","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/mixin.less","path":"css/mixin.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/normalize.css","path":"css/normalize.css","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/variables.less","path":"css/variables.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xoxo.css","path":"css/xoxo.css","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xoxo.css.map","path":"css/xoxo.css.map","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xoxo.less","path":"css/xoxo.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xxoo.css","path":"css/xxoo.css","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xxoo.css.map","path":"css/xxoo.css.map","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/js/xoxo.js","path":"js/xoxo.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/image.zip","path":"image.zip","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"de78b5a37e59e14756ab1300b6d3397a69a766e7","modified":1704517456455},{"_id":"source/categories/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1681796511455},{"_id":"source/CNAME","hash":"0fcfb1bb081bb7719294c4537ff13e522fc57437","modified":1704448301828},{"_id":"source/categories/index.md","hash":"1f0d4221f27a1bb92c194e4a31c53ff5293c4f54","modified":1681796825921},{"_id":"source/_posts/23.12.26与车神前端讨论记.md","hash":"f28ae0568c30038576d9601e2672b722925b291a","modified":1704208170441},{"_id":"source/_posts/4.14今天学习量有点大.md","hash":"92421522cd498e7156fa731630bcebccda11cbd0","modified":1681987569271},{"_id":"source/_posts/23年第一季度顽固词汇.md","hash":"30bfa5cac126230dcc4634b9faa9313fdc889051","modified":1681987510848},{"_id":"source/_posts/NPC代码分析.md","hash":"6c3dda3098b3010dd97bbbdf16eaad326bd7b7b7","modified":1681905759035},{"_id":"source/_posts/Typescript + React 开发中遇到的问题及解决方案.md","hash":"8966fbc89dd03eaa56ffb614df8e389b275a614d","modified":1681901471503},{"_id":"source/_posts/SSM学习.md","hash":"f8ca595642e5be8d537fbf9dce1371f0f8ae0b78","modified":1704517897994},{"_id":"source/_posts/first-article.md","hash":"e3a2aec153083abfd570fd32b9e8aad5e568fdd5","modified":1681960554716},{"_id":"source/_posts/hello-world.md","hash":"0aa30d67e222a51f42cf0ccbab0a5521b98cb1e9","modified":1681903375587},{"_id":"source/_posts/中文学习平台代码.md","hash":"85a6ad0bec64cb91664d25bc87c1c39a2bb9a589","modified":1704517277539},{"_id":"source/_posts/java菜鸟记.md","hash":"337208f8553efc5a481201b4bde3b783f4dbdaed","modified":1704517277517},{"_id":"source/_posts/python工具-提取单词.md","hash":"5e5bdff66504c0318e897f202571f08c6a5b7f8c","modified":1681901396276},{"_id":"source/_posts/前端学习计划_1.md","hash":"007567e56bb50ab0af2c129dfe529bc430a9df7c","modified":1704517945445},{"_id":"source/_posts/前端学习计划_2.md","hash":"719ac3c88e7bb87938ae12a334b0fc815b8f971e","modified":1704518143260},{"_id":"source/_posts/几天的Three.js学习.md","hash":"f6a5ac700e54b55bab326daf4519128375b3c4a3","modified":1701746628280},{"_id":"source/_posts/全域健康react.md","hash":"9d6f38de57cfb14f35aca5ff0293960db0806847","modified":1701754013412},{"_id":"source/_posts/前端学习计划_3.md","hash":"8b4a6f24e217dfc460cfd5a906c59f8c4508bdf0","modified":1705332728058},{"_id":"source/_posts/大三寒假学C++&lc.md","hash":"687fce5208ab3713b7371adfeb791692e31b8e89","modified":1681959743339},{"_id":"source/_posts/安卓拓展.md","hash":"f7f1c66ff3e488ebb521e2143919b2c9d472cc29","modified":1682596227923},{"_id":"source/_posts/实习笔记（11月）.md","hash":"735ffb7bb1e1565385a3bd4f173e8404aa390a56","modified":1701746434737},{"_id":"source/_posts/海康前端实习一面.md","hash":"927169fff910d67ba205dba20b78837a4fd51824","modified":1705332890486},{"_id":"source/_posts/.DS_Store","hash":"e9fd9137dae2b2c37605bf2fe2723ca3b6c8525e","modified":1681963389049},{"_id":"source/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1704517471867},{"_id":"source/activity/index.md","hash":"22b9f83c17b209473f8b0ec3ae2ece61b2d28a7d","modified":1681795964413},{"_id":"source/_posts/前端学习链接.md","hash":"9c6b1848cbd9254b1ebcff30c4e1aa3cef385cbe","modified":1701937839572},{"_id":"source/project/index.md","hash":"facddf7a8bb340ff9784e8a9f89988206fb25376","modified":1681796254649},{"_id":"source/_posts/轨道代码分析.md","hash":"1dda34d4c847cca8cdf361973cbd68d3874a0fda","modified":1704516855851},{"_id":"source/paper/paper1.md","hash":"386d117c4e83cf6bf3ebfe415e987a2608629f73","modified":1681801180376},{"_id":"source/paper/.DS_Store","hash":"feda82582317ab34f0305f43a3f5a51aab782a27","modified":1681801779603},{"_id":"source/paper/index.md","hash":"556c7181fc837fe71e0b18104b60e5d3d3449d44","modified":1681801397161},{"_id":"source/project/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1681796239749},{"_id":"source/search/index.md","hash":"0a988c48d12c0266efe0b3ea41503d5b481ac187","modified":1681801412898},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1681796511455},{"_id":"source/search/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1681796511455},{"_id":"source/tags/index.md","hash":"e60a0387215bcd043294ecab8b551f4f97ce6a7d","modified":1681796661349},{"_id":"themes/xoxo-plus/source/js/xoxo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681793933463},{"_id":"themes/xoxo-plus/package.json","hash":"203f579a057fb68bf79182b1da74bc7f52d09a0b","modified":1681793933459},{"_id":"themes/xoxo-plus/README.md","hash":"9b2b73a2b1b135152b62cfdd080f15eb7c8dd3f0","modified":1681793933453},{"_id":"themes/xoxo-plus/gulpfile.js","hash":"d5f9cc74e2ea4a5d6de8b7931bf90e6a04a02dc9","modified":1681793933453},{"_id":"themes/xoxo-plus/languages/default.yml","hash":"e44dfd1305ccc06b94f04de434ada89697e03e55","modified":1681793933453},{"_id":"themes/xoxo-plus/languages/en.yml","hash":"75b950e8e515b782a189c29210a9322e9af414f6","modified":1681793933454},{"_id":"themes/xoxo-plus/languages/zh-TW.yml","hash":"12e322c9f08dd2370785581b990baa43e9b9153f","modified":1681793933454},{"_id":"themes/xoxo-plus/languages/zh-CN.yml","hash":"5772afddf6caf059fafad0c15b7b36ffdef0105a","modified":1681793933454},{"_id":"themes/xoxo-plus/layout/archive.ejs","hash":"bd98c4a500422340d829b918b86963f810607205","modified":1681793933454},{"_id":"themes/xoxo-plus/layout/layout.ejs","hash":"c50f54fc42cc61cd13cc72b32bb429457ab6e847","modified":1681793933454},{"_id":"themes/xoxo-plus/layout/index.ejs","hash":"bc4c04e523b9152cb7e5f2b2c689e7a718f6bdd2","modified":1681793933454},{"_id":"themes/xoxo-plus/layout/page.ejs","hash":"1c5ff3315838aadde35454cf0430a564878b6670","modified":1681793933455},{"_id":"themes/xoxo-plus/layout/post.ejs","hash":"47750e1f70baaf4630f820a3a5aae91f06f23f92","modified":1681793933459},{"_id":"themes/xoxo-plus/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1681793933459},{"_id":"themes/xoxo-plus/scripts/tags/lazy-image.js","hash":"451f6faf1ce5600774b81d8a7ca5826165333b12","modified":1681793933460},{"_id":"themes/xoxo-plus/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1681793933460},{"_id":"themes/xoxo-plus/.DS_Store","hash":"baa1ab61d3d2929d22f344be5d94fd3a665af335","modified":1681803081291},{"_id":"themes/xoxo-plus/layout/tag.ejs","hash":"f35efdf7de89401ab24cc7b1712ca7702a8591ff","modified":1681793933459},{"_id":"themes/xoxo-plus/_config.yml","hash":"4cbd5473cae858ac90224f8e03a3e512302f2568","modified":1681988555936},{"_id":"themes/xoxo-plus/source/css/common.less","hash":"e436b6b577a1ae4d786ca016c534d3cec14c9247","modified":1681793933460},{"_id":"themes/xoxo-plus/source/css/highlight.less","hash":"a7ae4e53c04249f69a2b878fe5e56bf1d23a8b9d","modified":1681793933460},{"_id":"themes/xoxo-plus/source/css/core.less","hash":"cc7bd8065e0d45bdec12a98d33c3c8d770c81fa0","modified":1681793933460},{"_id":"themes/xoxo-plus/source/css/light_tritanopia_xoxo.css","hash":"27dc1169d00dd2ea91a9e4c9152bb9753813e693","modified":1681793933461},{"_id":"themes/xoxo-plus/source/css/mixin.less","hash":"e7336eca0285aa1189ad47bf6dc7f59fde60e67c","modified":1681793933461},{"_id":"themes/xoxo-plus/source/css/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1681793933461},{"_id":"themes/xoxo-plus/source/css/xxoo.css","hash":"c3d0d559499adea9e89892b5d714f4ab00e0ffa9","modified":1681793933462},{"_id":"themes/xoxo-plus/source/css/xoxo.css.map","hash":"9e43c4ab3dede729c344ad4e6c1bbf9ad0bee6a9","modified":1681793933462},{"_id":"themes/xoxo-plus/source/css/xoxo.less","hash":"43d9ab1c0fa6d73faeb64910b3e1e07cae63d489","modified":1681793933462},{"_id":"themes/xoxo-plus/source/css/variables.less","hash":"52aafe1e3a907a85b69b2cf02f14e5e9973b8388","modified":1681793933461},{"_id":"themes/xoxo-plus/source/css/xoxo.css","hash":"5705f0ca54325a6c9c944249ec30a84df81bd1ee","modified":1681793933461},{"_id":"themes/xoxo-plus/layout/partials/analytics.ejs","hash":"df9871e7d66f1b703c5b757df94fd0f3fd5ea1b6","modified":1681793933455},{"_id":"themes/xoxo-plus/layout/partials/archive.ejs","hash":"b5c154d8e0f1930e4261ec63d3a0952ff03fd075","modified":1681793933455},{"_id":"themes/xoxo-plus/layout/partials/activity.ejs","hash":"b4d63ae07c0cf39b3a96cfd81a3a5b9e6813bfac","modified":1681793933455},{"_id":"themes/xoxo-plus/layout/partials/archive-post.ejs","hash":"464086c3fd545aa2e059acade02e8382985e22e8","modified":1681793933455},{"_id":"themes/xoxo-plus/layout/partials/copyright.ejs","hash":"80791921ca6d72f32368275aa88fb56ea99b0ef6","modified":1681793933456},{"_id":"themes/xoxo-plus/layout/partials/baidu_url_js_push.ejs","hash":"a9fe47c76a031e562be3d419f75a49b4a2fd07d7","modified":1681793933455},{"_id":"themes/xoxo-plus/layout/partials/links.ejs","hash":"a1fd03101bfa06f9895599eeb539fbacd1efa667","modified":1681793933456},{"_id":"themes/xoxo-plus/layout/partials/footer.ejs","hash":"b8bc46d384cf4a45397e6a729b0103136b7359c4","modified":1681793933456},{"_id":"themes/xoxo-plus/layout/partials/head.ejs","hash":"a4155da1a44ba0c0c1b7ab2f41433bf70f4a3711","modified":1681793933456},{"_id":"themes/xoxo-plus/layout/partials/nav.ejs","hash":"ae7368b5825980bb9cddca829413dece9d72dc80","modified":1681793933456},{"_id":"themes/xoxo-plus/layout/partials/comment.ejs","hash":"dc4bf2ea5ddc7321db4975c68d65aa28e5a2cb22","modified":1681982007306},{"_id":"themes/xoxo-plus/layout/partials/prenext.ejs","hash":"8ca2261a9fc465b1f1921569ac59b9aa4c83a8c1","modified":1681793933457},{"_id":"themes/xoxo-plus/layout/partials/js.ejs","hash":"281e2504e687db6dc65c0fa6a2e6ff747efbc324","modified":1681793933456},{"_id":"themes/xoxo-plus/source/css/xxoo.css.map","hash":"d07fe1cc9edd53ca13b3e43ada5ac9788da609a9","modified":1681793933463},{"_id":"themes/xoxo-plus/layout/partials/project.ejs","hash":"fe4143d06f2b81c0f24d8178fac35772b965aaff","modified":1681793933457},{"_id":"themes/xoxo-plus/layout/partials/recent-posts.ejs","hash":"1e743751f0480b3b65f8365199bdd228ac5494bc","modified":1681793933457},{"_id":"themes/xoxo-plus/layout/partials/search.ejs","hash":"1a03040e44ab0b91064c3d22a5a8d7cb70a379ca","modified":1681793933458},{"_id":"themes/xoxo-plus/layout/partials/paper.ejs","hash":"ce3a5758758ef4a2663591839f218c7129d8cbef","modified":1681813026515},{"_id":"themes/xoxo-plus/layout/partials/toc.ejs","hash":"be02b5e03ecf4cac8d0fe22854a4c7632d36a6a5","modified":1681793933458},{"_id":"themes/xoxo-plus/layout/partials/scripts.ejs","hash":"edc7c81143cd624719a43d2b3edb325fd3cd8019","modified":1681793933458},{"_id":"themes/xoxo-plus/layout/partials/share.ejs","hash":"9f2999f988c94f7b481599f68752db20a7316104","modified":1681793933458},{"_id":"source/image.zip","hash":"9b5221f8ff1ce2fd563c529fd284c67c3b15f439","modified":1704517400437},{"_id":"public/search/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705332922817},{"_id":"public/categories/index.html","hash":"fdc23fa22b14f332f9af02967efcf2db3fb0019e","modified":1705332922817},{"_id":"public/activity/index.html","hash":"3313c9d1ab1e7394e2a2771a5364b6fe1414f820","modified":1705332922817},{"_id":"public/paper/index.html","hash":"f08ba1d12e6a80f2c85d90113e859d11d0b48d47","modified":1705332922817},{"_id":"public/paper/paper1.html","hash":"0ebefe5dc72b2eef4abbc7ff1cfbe2d891c4f2f2","modified":1705332922817},{"_id":"public/project/index.html","hash":"53a0e632bf97ce1cc9e9c802a50d6c4d991d177e","modified":1705332922817},{"_id":"public/2024/01/15/海康前端实习一面/index.html","hash":"b6352d47c05b57c23af16161804b5f8512dcb44c","modified":1705332922817},{"_id":"public/2023/10/09/前端学习链接/index.html","hash":"7f8684ea3d35d2f88e294dd12d4d0c79d16c611a","modified":1705332922817},{"_id":"public/2023/04/10/安卓拓展/index.html","hash":"f742b0307a47cbb17c4cdd5aff6ace944d49b65e","modified":1705332922817},{"_id":"public/2023/03/29/python工具-提取单词/index.html","hash":"405be0caab36ed42fc2e81f334ea0bf412d6afb3","modified":1705332922817},{"_id":"public/2023/02/21/中文学习平台代码/index.html","hash":"6be6fd8e03d4c0e5db4d581c476c91b83f393f42","modified":1705332922817},{"_id":"public/2022/03/29/hello-world/index.html","hash":"8efc25286cc698d198acf6af5c9f15862ec7a95e","modified":1705332922817},{"_id":"public/2020/10/18/first-article/index.html","hash":"5acf7f95948797dc25feeee9b53f9cc5ce930c4f","modified":1705332922817},{"_id":"public/categories/笔记/index.html","hash":"750bcd48922d1d0802da8d32f204e6393556ed65","modified":1705332922817},{"_id":"public/categories/笔记/page/2/index.html","hash":"1fedb3e3f6a1c01391613e4b5089548775a72486","modified":1705332922817},{"_id":"public/categories/技术分享/index.html","hash":"5c7af0dbe17fc7e6706322b672d04d8d6a23c07c","modified":1705332922817},{"_id":"public/categories/随便写/index.html","hash":"dd1160a6f9eff724ed009efc08d563f0b0608a5f","modified":1705332922817},{"_id":"public/categories/操作手册/index.html","hash":"f8ff8b64fb0e7c24dbcd3675b285932018bd1ec9","modified":1705332922817},{"_id":"public/categories/学习笔记/index.html","hash":"e5076890d7f60cbb92253ce1442cd000fa2c05c2","modified":1705332922817},{"_id":"public/archives/index.html","hash":"9d03a49e7c7c12dcd4b309772f1ae9bc7a5deb2c","modified":1705332922817},{"_id":"public/archives/page/2/index.html","hash":"f962faa38cb0619fff97a0ac546d6d9ed061b6dc","modified":1705332922817},{"_id":"public/archives/page/3/index.html","hash":"7cf3450b22c1a49f88fb3990e4171fe965c11568","modified":1705332922817},{"_id":"public/archives/2020/index.html","hash":"892eb3934263a6b0007ce834153e47751b637bea","modified":1705332922817},{"_id":"public/archives/2020/10/index.html","hash":"bf39fc37f9c15bc6067ecde49aebf8f4dba8a853","modified":1705332922817},{"_id":"public/archives/2021/index.html","hash":"34a75901dbd4ebe02ee384fd11cf7f31476bbe4b","modified":1705332922817},{"_id":"public/archives/2021/01/index.html","hash":"e4363bb35d1abcafaab5e998581b61d7513aa3e4","modified":1705332922817},{"_id":"public/archives/2021/07/index.html","hash":"9e16f5a2cecb6699100b733d6438138841bb2290","modified":1705332922817},{"_id":"public/archives/2022/index.html","hash":"01b1043df79e96b93efc31087f606bb16ad2362b","modified":1705332922817},{"_id":"public/archives/2022/02/index.html","hash":"50e1bd5fcc2d2a43918592673796f83e6dec24f9","modified":1705332922817},{"_id":"public/archives/2022/03/index.html","hash":"78cc462a0610a6c21206d78cb90fab4ad87c2faf","modified":1705332922817},{"_id":"public/archives/2022/04/index.html","hash":"b397d1eb851cf39be56a58b7f0c72cc6ea81391a","modified":1705332922817},{"_id":"public/archives/2022/05/index.html","hash":"fd7a8fb89703d4db4216ecc40def2962501ee59f","modified":1705332922817},{"_id":"public/archives/2023/index.html","hash":"cee6ce96b5a37b0210283a4aeb35ea3bcf46d76f","modified":1705332922817},{"_id":"public/archives/2023/page/2/index.html","hash":"016e7ed88a907b3cc652267e13027e162bdae523","modified":1705332922817},{"_id":"public/archives/2023/02/index.html","hash":"0e8b2622d27bfaf3879ef8cc34ee5d1068dd832c","modified":1705332922817},{"_id":"public/archives/2023/03/index.html","hash":"86971f79e1c89c52ae7d99420f111a67c7d935e3","modified":1705332922817},{"_id":"public/archives/2023/04/index.html","hash":"2de8fad77568c13d8f7974091cf34ff5e9cb9d58","modified":1705332922817},{"_id":"public/archives/2023/10/index.html","hash":"235e3dfa7a8adcebb786fd862342c0bc42b25de7","modified":1705332922817},{"_id":"public/archives/2023/11/index.html","hash":"7d066ee83f3f18e0b2e1c3fa9d559da5510195c5","modified":1705332922817},{"_id":"public/archives/2023/12/index.html","hash":"3a66b037f1d68ad409dbaa5f0185023295ae334b","modified":1705332922817},{"_id":"public/archives/2024/index.html","hash":"f2f75375b3db3867552e93302f7fecfe3215e9fe","modified":1705332922817},{"_id":"public/archives/2024/01/index.html","hash":"9aedce5df8cb303743cb0299ec5c169d6abc5a37","modified":1705332922817},{"_id":"public/page/3/index.html","hash":"ed587ea7a49327e6ca7ee517942bdca93c56c5c4","modified":1705332922817},{"_id":"public/tags/八股/index.html","hash":"ca075323d9e25f5bc7bef44ad1536828e1edc805","modified":1705332922817},{"_id":"public/tags/前端/index.html","hash":"d355de53134a310e7cb991d8636aa0cde339baa2","modified":1705332922817},{"_id":"public/tags/js手撕/index.html","hash":"00dc8373241e716ee273afa1ed940064b9d6cfd4","modified":1705332922817},{"_id":"public/tags/web安全/index.html","hash":"b5d8ddbca4dd6067d82d402722ab8c67001ca149","modified":1705332922817},{"_id":"public/tags/英语词汇/index.html","hash":"bfad2970d91d81bb9fca9240cdcf069ef5a26014","modified":1705332922817},{"_id":"public/tags/循环/index.html","hash":"144f194d8ed36f8c0f62aaf1c50b401c336ad1ac","modified":1705332922817},{"_id":"public/tags/prompt/index.html","hash":"862ebc8ca83ac6e388d6afe6a4f01f3bc62d61eb","modified":1705332922817},{"_id":"public/tags/高等数学/index.html","hash":"5ff5f18aed49757876e8959266562ceb97c8b899","modified":1705332922817},{"_id":"public/tags/英语/index.html","hash":"a3fc911523a78128c47765eb38ef9ae36e055ada","modified":1705332922817},{"_id":"public/tags/吐槽/index.html","hash":"f11cc8e40c99218cef22c9cd756717219375a023","modified":1705332922817},{"_id":"public/tags/TypeScript/index.html","hash":"6244bbe15c6fb80187e01118e63b11d88058e8c3","modified":1705332922817},{"_id":"public/tags/游戏开发/index.html","hash":"3cacb153a83d6dc70e8d3392a1fbe549faeff525","modified":1705332922817},{"_id":"public/tags/前端开发/index.html","hash":"9ede03cf683a2819b046320d14e3751fc94265d7","modified":1705332922817},{"_id":"public/tags/编程语言/index.html","hash":"4fd5645e8f991028d1b604dbbf44213b8805bbaf","modified":1705332922817},{"_id":"public/tags/Web开发/index.html","hash":"f7b3448c232c64e02a4db5e992aef8e6db598af4","modified":1705332922817},{"_id":"public/tags/游戏设计/index.html","hash":"eaf55d9d8c0011b21bdfc48fc2d9953a9c9dddbc","modified":1705332922817},{"_id":"public/tags/前端框架/index.html","hash":"8f228a284e07cc85bdf9de6be6c1087286c74e71","modified":1705332922817},{"_id":"public/tags/工具/index.html","hash":"61f01b6c6c98c97ee5ce3577d66770a0beac54b4","modified":1705332922817},{"_id":"public/tags/学习笔记/index.html","hash":"c3d1f6ea415ee9275f3db6409bf894558664fc16","modified":1705332922817},{"_id":"public/tags/教程/index.html","hash":"ecae11966f381fb09350b8cbd6db187f35aa0203","modified":1705332922817},{"_id":"public/tags/杆踪球影冰球游戏/index.html","hash":"92212dc06e93ba01b27f275549ae866655f54679","modified":1705332922817},{"_id":"public/tags/Typescript/index.html","hash":"7c646135eff2230b477335b4a46a0cd604af8fca","modified":1705332922817},{"_id":"public/tags/React/index.html","hash":"30d934b2bc231b0a692b1d82ae15c0075b5b5efe","modified":1705332922817},{"_id":"public/tags/第一篇/index.html","hash":"126448542a017bee816a1d7afa777c5e63dcd9c5","modified":1705332922817},{"_id":"public/tags/Spring/index.html","hash":"f12108564c4349ad4a7a39756edf0fc4a6f12e07","modified":1705332922817},{"_id":"public/tags/Sprintboot/index.html","hash":"db264169007b91ec0cca935bfea6cd1cbb14d5c4","modified":1705332922817},{"_id":"public/tags/Mybatis/index.html","hash":"81cc1ede7608b947dcd5a5a43b4ceebd35c12128","modified":1705332922817},{"_id":"public/tags/hexo指南/index.html","hash":"8ee69bc0c98d6166a0d8d2e29e4b9a71d966c693","modified":1705332922817},{"_id":"public/tags/shell/index.html","hash":"2af4f922c8c0767a6ff5e8a25dc57830f33d0293","modified":1705332922817},{"_id":"public/tags/java/index.html","hash":"ab7b517bb6dc779bfdbc3e3cc6158854db7ffc94","modified":1705332922817},{"_id":"public/tags/菜鸟/index.html","hash":"8b94feeb3bf11d282e7773ef073c6bfb9e730c9e","modified":1705332922817},{"_id":"public/tags/大一/index.html","hash":"e1f92c22850abb0091a740b9685141ee69cd1347","modified":1705332922817},{"_id":"public/tags/Javascipt/index.html","hash":"516c8769f8d93248569ebb48857056f036008d23","modified":1705332922817},{"_id":"public/tags/组件化编程/index.html","hash":"5cc24bcecc81769483cd9fb39baaf47eba9be551","modified":1705332922817},{"_id":"public/tags/combineReducers/index.html","hash":"755e5b1c4841f70965b9a3c4764e14d2d4f9c794","modified":1705332922817},{"_id":"public/tags/redux/index.html","hash":"85737ca16524213869b6957337918f921ee88fd9","modified":1705332922817},{"_id":"public/tags/异步数据获取/index.html","hash":"749bdabb62a163a8bcbf747630b6fee717ed766e","modified":1705332922817},{"_id":"public/tags/redux-persist/index.html","hash":"bd2a62cae1c8561e72ccc7e316f1bdcdcd5bec22","modified":1705332922817},{"_id":"public/tags/样式化组件/index.html","hash":"f53b68228242b3ce42ffa73421a14108c5917571","modified":1705332922817},{"_id":"public/tags/生命周期/index.html","hash":"1536b0cea053f5f7981b64165d962db8319c58a9","modified":1705332922817},{"_id":"public/tags/单向数据流/index.html","hash":"33abca5e22f3f7758583f0e51777851e57a955aa","modified":1705332922817},{"_id":"public/tags/react/index.html","hash":"e454f5939880cf9d21731b503e65d0f189aa8cd8","modified":1705332922817},{"_id":"public/tags/字典/index.html","hash":"146a97fd89e27763ee71c4fb413e7e1367f34d0e","modified":1705332922817},{"_id":"public/tags/表单格式/index.html","hash":"7f9605fca4af81d770997b41e2b09f887a26cf95","modified":1705332922817},{"_id":"public/tags/正则/index.html","hash":"8b74e95325876822bea34a38934639f6608182af","modified":1705332922817},{"_id":"public/tags/跨域/index.html","hash":"e6554268b8e005b52209b9f7f3abc81b9c9c5472","modified":1705332922817},{"_id":"public/tags/考研英语/index.html","hash":"e515e1bbda9515f8337468a442fa59957d8bddbc","modified":1705332922817},{"_id":"public/tags/python/index.html","hash":"b847e723a2ffd628e2ac4150ac6826cd3b94143b","modified":1705332922817},{"_id":"public/tags/正则表达式/index.html","hash":"fc2f015fe0a0fbe647f4a87c38f979265815e6bc","modified":1705332922817},{"_id":"public/tags/Three-js/index.html","hash":"155c29411b3932d01a5f09527f6b18fb3f90e2ca","modified":1705332922817},{"_id":"public/tags/JavaScript/index.html","hash":"87ba205637a3ab0a04ccb2b523ddb47ac5a783f7","modified":1705332922817},{"_id":"public/tags/前端学习计划/index.html","hash":"ae6d8bbe1c00164d967bff867f310dfda65ea3dd","modified":1705332922817},{"_id":"public/tags/js/index.html","hash":"bfd8777812e3374920a74cb1b214ea36644ed1ce","modified":1705332922817},{"_id":"public/tags/web3D/index.html","hash":"843b7c8789e60186e02d8d08b1739ff244540049","modified":1705332922817},{"_id":"public/tags/Js/index.html","hash":"ae5abe3eb812fc0814bb057d2156a057fe90d2c3","modified":1705332922817},{"_id":"public/tags/Vue/index.html","hash":"23ed46b0e6ae71c7724aa3e54ffe3bbc12057be6","modified":1705332922817},{"_id":"public/tags/webpack/index.html","hash":"1b852f775e34e6e796cf05b64703cd915fe68709","modified":1705332922817},{"_id":"public/tags/vue/index.html","hash":"0634ebfdf6991930d0fc9664502a4796752dec01","modified":1705332922817},{"_id":"public/tags/C/index.html","hash":"98dd5611b4c148c8bd6d1c46ffe24baf0c9befb9","modified":1705332922817},{"_id":"public/tags/leetcode/index.html","hash":"bfe2538ebb4e8474ff2a1bea094a55fa1ad363e8","modified":1705332922817},{"_id":"public/tags/算法/index.html","hash":"0b4bca37bf35973573e7a49fdcb1532788fa3fbd","modified":1705332922817},{"_id":"public/tags/一个月/index.html","hash":"460d61257b021b869c82a4bcb21e7d1176f1d5bc","modified":1705332922817},{"_id":"public/tags/kotlin/index.html","hash":"0a39478dbee73d61de4ddcc0b295bf84f57f4294","modified":1705332922817},{"_id":"public/tags/安卓开发/index.html","hash":"24d62ec3b8532745a41e26a564daeb19ca051529","modified":1705332922817},{"_id":"public/tags/dowdload/index.html","hash":"ce07f14823553957bdf85427da36eb6e9d234af9","modified":1705332922817},{"_id":"public/tags/实习/index.html","hash":"49280f2a9a61d8c97aa4074b21f3d437a3a3c14c","modified":1705332922817},{"_id":"public/tags/面经/index.html","hash":"abe9a69126dfb5de33da0f59f1ab969847e49ec4","modified":1705332922817},{"_id":"public/tags/轨道客流/index.html","hash":"d4e057f6d8bf90ceb82a64feecf97a55feb46559","modified":1705332922817},{"_id":"public/tags/异步编程/index.html","hash":"81f0a3bf467ef0d8a07653e7863af7af18cd3d82","modified":1705332922817},{"_id":"public/tags/Promise/index.html","hash":"09df747655feef3d78b901ba64165f1ac6b6b3a4","modified":1705332922817},{"_id":"public/tags/Object-entries/index.html","hash":"1373a2ba00618e9336e1fe087c2ae5e82e5375f2","modified":1705332922817},{"_id":"public/tags/Array-sort/index.html","hash":"4a096ff29b664cb681cb54646f3bc0dd74ae0ddd","modified":1705332922817},{"_id":"public/tags/Array-map/index.html","hash":"c6b603a72495b16ddf8e9566c339e2eace1d3724","modified":1705332922817},{"_id":"public/tags/Array-reduce/index.html","hash":"a9db8e9d4918a76a1f8d67e6a9255a6a9fe26160","modified":1705332922817},{"_id":"public/tags/Number/index.html","hash":"6dfb4b3a05a451da9709a98e750851ca5886a006","modified":1705332922817},{"_id":"public/tags/Date/index.html","hash":"ccbc7d7f7a41f58fe4ca2ecbc684479b805b359b","modified":1705332922817},{"_id":"public/tags/getTime/index.html","hash":"c81acae27c81643fdaf69df148cb95c56cd877f5","modified":1705332922817},{"_id":"public/tags/Object-values/index.html","hash":"1b6eb20178cf4f73b2779c2fec3d3b155f37aae7","modified":1705332922817},{"_id":"public/tags/Array-concat/index.html","hash":"3603fbef1bd82231650c8bf879b9ec2b1fe0a4e5","modified":1705332922817},{"_id":"public/tags/标准时间/index.html","hash":"ba739436640dfdf9eac3f3a72873116193ccf59a","modified":1705332922817},{"_id":"public/tags/类型推断/index.html","hash":"9745c83c25d841a9c7058c5a5114d9668c8e87c9","modified":1705332922817},{"_id":"public/tags/类型注释/index.html","hash":"aebba853f3d075423f33fe790fe61d110d9a0bb6","modified":1705332922817},{"_id":"public/tags/代码优化/index.html","hash":"f8c72e16396cacbf60d1c7853b2dc01f94250747","modified":1705332922817},{"_id":"public/tags/代码可读性/index.html","hash":"c23e5baca0b2754f412139a5bd59f7203e12b71a","modified":1705332922817},{"_id":"public/tags/index.html","hash":"6248ee6a303f2802275f464e6d42b2dd406af434","modified":1705332922817},{"_id":"public/2024/01/15/前端学习计划_3/index.html","hash":"5463a26e5ec4d1f0268714a73e4dcf031544c10d","modified":1705332922817},{"_id":"public/2024/01/04/前端学习计划_2/index.html","hash":"c8cc0d1e6942e433f10e4adf72abcb829dca837a","modified":1705332922817},{"_id":"public/2024/01/02/前端学习计划_1/index.html","hash":"b3713be7e5a048e8a09c57f9352ab540abc94de1","modified":1705332922817},{"_id":"public/2023/12/26/23.12.26与车神前端讨论记/index.html","hash":"52ddda48662017da588044a307452d87795992f2","modified":1705332922817},{"_id":"public/2023/12/05/几天的Three.js学习/index.html","hash":"2e672460cf66f9247dff36335b3cb384b70c32be","modified":1705332922817},{"_id":"public/2023/11/30/实习笔记（11月）/index.html","hash":"fe800d52564adfc95ad73188b173f37d675bd0b7","modified":1705332922817},{"_id":"public/2023/04/27/全域健康react/index.html","hash":"205588e84b02de5543cc572dbad7779b001c42f1","modified":1705332922817},{"_id":"public/2023/04/17/4.14今天学习量有点大/index.html","hash":"c94252126855e2f16cc88029b69f2c730db03efa","modified":1705332922817},{"_id":"public/2023/04/10/23年第一季度顽固词汇/index.html","hash":"9a5216cae0e40b574618f6a3743175d075966834","modified":1705332922817},{"_id":"public/2023/03/03/SSM学习/index.html","hash":"8fc9eaaf0289ea41c5505258afa384fe6c75a24f","modified":1705332922817},{"_id":"public/2022/05/21/NPC代码分析/index.html","hash":"192575b21ee9e3c2fe4a685149b8793142f92dce","modified":1705332922817},{"_id":"public/2022/04/17/Typescript + React 开发中遇到的问题及解决方案/index.html","hash":"a62a61f2d1bdb1e6a160a0ca331e653a7bb8cb03","modified":1705332922817},{"_id":"public/2022/02/22/大三寒假学C++&lc/index.html","hash":"7abfdddbbf057a15e54ecbc589e7d2816d8d4e37","modified":1705332922817},{"_id":"public/2021/07/21/轨道代码分析/index.html","hash":"3db4126fdc11a1060b83476f79c9e5563bc7c60e","modified":1705332922817},{"_id":"public/2021/01/03/java菜鸟记/index.html","hash":"2c6be387de4f8bda892ea2dc29024ca9b312eae7","modified":1705332922817},{"_id":"public/index.html","hash":"61d87cc8ef2d23f03113d5f2e548ee77da22ceea","modified":1705332922817},{"_id":"public/page/2/index.html","hash":"2584eeb37271a960b18f576cac86dec5a3b075f8","modified":1705332922817},{"_id":"public/css/core.less","hash":"cc7bd8065e0d45bdec12a98d33c3c8d770c81fa0","modified":1705332922817},{"_id":"public/css/highlight.less","hash":"a7ae4e53c04249f69a2b878fe5e56bf1d23a8b9d","modified":1705332922817},{"_id":"public/css/variables.less","hash":"52aafe1e3a907a85b69b2cf02f14e5e9973b8388","modified":1705332922817},{"_id":"public/css/mixin.less","hash":"e7336eca0285aa1189ad47bf6dc7f59fde60e67c","modified":1705332922817},{"_id":"public/css/xoxo.css.map","hash":"9e43c4ab3dede729c344ad4e6c1bbf9ad0bee6a9","modified":1705332922817},{"_id":"public/css/xoxo.less","hash":"43d9ab1c0fa6d73faeb64910b3e1e07cae63d489","modified":1705332922817},{"_id":"public/CNAME","hash":"0fcfb1bb081bb7719294c4537ff13e522fc57437","modified":1705332922817},{"_id":"public/css/xxoo.css.map","hash":"d07fe1cc9edd53ca13b3e43ada5ac9788da609a9","modified":1705332922817},{"_id":"public/css/common.less","hash":"e436b6b577a1ae4d786ca016c534d3cec14c9247","modified":1705332922817},{"_id":"public/css/light_tritanopia_xoxo.css","hash":"27dc1169d00dd2ea91a9e4c9152bb9753813e693","modified":1705332922817},{"_id":"public/css/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1705332922817},{"_id":"public/js/xoxo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705332922817},{"_id":"public/css/xoxo.css","hash":"5705f0ca54325a6c9c944249ec30a84df81bd1ee","modified":1705332922817},{"_id":"public/css/xxoo.css","hash":"c3d0d559499adea9e89892b5d714f4ab00e0ffa9","modified":1705332922817},{"_id":"public/image.zip","hash":"9b5221f8ff1ce2fd563c529fd284c67c3b15f439","modified":1705332922817}],"Category":[{"name":"笔记","_id":"clrf36x390004q05zbsbrgmme"},{"name":"技术分享","_id":"clrf36x3w000oq05zdr1mdxiz"},{"name":"随便写","_id":"clrf36x3z000uq05zao4qhahj"},{"name":"操作手册","_id":"clrf36x450019q05z8nsib5jn"},{"name":"学习笔记","_id":"clrf36x47001gq05zengaerg4"}],"Data":[],"Page":[{"title":"Categories","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ntype: categories\n---","date":"2023-06-16T03:07:20.414Z","updated":"2023-04-18T05:47:05.921Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clrf36x2y0000q05zhng37ksj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Activity","date":"2019-03-01T05:45:13.000Z","type":"activity","_content":"","source":"activity/index.md","raw":"---\ntitle: Activity\ndate: 2019-03-01 13:45:13\ntype: \"activity\"\n---","updated":"2023-04-18T05:32:44.413Z","path":"activity/index.html","comments":1,"layout":"page","_id":"clrf36x360002q05z9sfn2gfl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Paper","date":"2023-04-17T02:00:00.000Z","type":"paper","comments":0,"_content":"","source":"paper/index.md","raw":"---\ntitle: Paper\ndate: 2023-04-17 10:00:00\ntype: \"paper\"\ncomments: false\n---\n","updated":"2023-04-18T07:03:17.161Z","path":"paper/index.html","layout":"page","_id":"clrf36x3c0006q05zh0th759z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Paper1","date":"2023-04-17T02:00:00.000Z","_content":"\n[Paper1](https://example.com/paper1.pdf)\n","source":"paper/paper1.md","raw":"---\ntitle: Paper1\ndate: 2023-04-17 10:00:00\n---\n\n[Paper1](https://example.com/paper1.pdf)\n","updated":"2023-04-18T06:59:40.376Z","path":"paper/paper1.html","comments":1,"layout":"page","_id":"clrf36x3f0008q05z6hrg4yjp","content":"<p><a href=\"https://example.com/paper1.pdf\">Paper1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://example.com/paper1.pdf\">Paper1</a></p>\n"},{"title":"project","date":"2019-03-01T05:45:13.000Z","type":"project","_content":"","source":"project/index.md","raw":"---\ntitle: project\ndate: 2019-03-01 13:45:13\ntype: \"project\"\n---","updated":"2023-04-18T05:37:34.649Z","path":"project/index.html","comments":1,"layout":"page","_id":"clrf36x3h000aq05zeajhcoj6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ntype: \"search\"\n---","date":"2023-04-27T12:07:37.859Z","updated":"2023-04-18T07:03:32.898Z","path":"search/index.html","comments":1,"layout":"page","_id":"clrf36x3n000eq05z72poghr3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-01T05:45:13.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-01 13:45:13\ntype: \"tags\"\n---","updated":"2023-04-18T05:44:21.349Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clrf36x3q000gq05zbmv38j5n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"23.12.26与车神前端讨论记","date":"2023-12-26T13:23:34.000Z","_content":"\n手撕new apply 、bin d 隐式转换 前端安全等\n\n<!-- more -->\n\n### new的探讨\n\n1.创建一个对象\n\n2.设置原型\n\n3.设置this，调用构造函数\n\n4.返回，引用类型则返回构造函数的返回值，原始值则返回新建的对象\n\n```JavaScript\nconst animal = new Animal(1, 2, 3);\nconst animal = myNew(Animal, 1, 2, 3);\n\nfunction Animal(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n}\nnew Animal(1, 2, 3); // { a:1, b:2, c:3}\n\nfunction myNew(Class, ...args) {\n    // const obj = {};\n    // 浏览器标准\n    // obj.__proto__ = Class.prototype;\n    // es6标准\n    // Object.setPrototypeOf(obj, Class.prototype);\n    const obj = Object.create(Class.prototype);\n    const ret = Class.apply(obj, args);\n    return (typeof ret === 'object' && ret !== null || typeof ret === 'function') ? ret : obj;\n}\n```\n\nglobalThis = window || global;\n\nArguments 在箭头函数中没有 用 const [first, ...restArgs] = arguments\n\n### Call bind Apply\n\napply call会执行 bind不执行\n\n- apply第二位要传数组\n- Call 不是\n\nArray.prototype.slice.apply(obj, [1])\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ODVhMjA0Y2E4MTQwMTEzNjU2MjVjN2M0NDk4NDdjYmFfMGp4SUJCRlNJQmQ0U2pQb1paR2tjbEFQd2VRM09BVUxfVG9rZW46RlJ1a2JDbjVXb3BmV1B4cU8zV2NycGhRbmpkXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n理解完成\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YzdlZjk3NTk5YjFhMjIzOGUwZDVlODFlNDkxYTU4N2RfUU1tR3RrUHZsMDZUd09VbHROeGZ3aUpkN0JsVFRTNklfVG9rZW46THJqdmJYZndMb0hSZ3N4blpmSWNIUEFubmlnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\nCall\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YjhlNWVmMzgzOTA0YWRiNzk2MTk5MGE5NWRlMDAxOTdfSWFhd0tzNWVXWWdqTmpHQlRaRTJ3MDdiSDBtSHpidE9fVG9rZW46V0ZQMGJOa0xHb1FzZ2l4QkRINmNHb3A4bm1jXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YmY1MTdjMGNiM2M1YjI1Y2YyNDZmYzNmMDA5ZjQwYzRfN0FSUERIT1pYTlpMQUcxa01aYjJNM0ZQalVMQkRRRXNfVG9rZW46WkFydmI5dlRjb0J0U3h4VkE0VWNVWllObm1oXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\nBind\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUwOGNiMGY1NDMzOTVhNzg5N2YzM2U2NjNhNTM4NDZfV3B5Y0lsWVZ6S1RPcmpkMG1kZVYzREFUeXREQ1NpUUlfVG9rZW46VEZGdGJENFJxbzhXTG94Zmt3cmNmWFUxbm1XXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n数据类型转换\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=N2MzMTZiN2VlOTlhMWI4NjkzNTU3MmIxMmIyNmFhZWZfc0dQVlpjekFrNzAzNzVVUWV6UGpLNTgyOEl2MFpOTlhfVG9rZW46Q25Vb2J4bVVCbzBJVXV4Zm1wSWNKS2RkbnNnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n1. ({} - '9') // NaN  \n\n- '[object Object]' - 9 \n- NaN - 9 = NaN\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MGEyYzA0ZmVhMWUzMmY4ZTUyYzViYTY1YTU5YTRhZGNfMWdRTFUya1U4UUd5MTJnRkZUclFhUkV6dUp2cXhxeUZfVG9rZW46SzBBS2JrQWpBb3Jibzh4WUQ5T2N3VHM4bmpnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n### parseInt 和 Number\n\nNumber('[object Object]')\n\nparseInt('[object Object]', 10)\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGZjYjhlZTFhYTY5MGFhZDMxNTQyMTAzMDMzOGQyODFfM0lXV3NuNWxlcDV4MnBrU1M3MVJxb2pnNHNQdm0yM3BfVG9rZW46SXpNRmIyMzB4bzJoRVZ4WHV3Z2NSeXVDbmhjXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n### NaN === 问题\n\n```JavaScript\nObject.is(NaN, NaN) === true\n(NaN === NaN) === false\n```\n\n[2] - '9' // -7\n\n- '2' - 9 = -7\n\n[2, 3] - '9'   // NaN\n\n({} + '9') // '[object Object]' + '9' = '[object Object]9'\n\n[2] + '9' // '2' + '9' = '29'\n\n[2, 3] + '9' // '2,3' + '9' = '2,39'\n\n9 + {}  // '9[object Object]'\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE3MDFlMTkyODRjOTIyNjQ2M2RmOTEwNzU4NzMwMTNfbmkwV0RYRjFtWjJIbFZjczJ0Z0FoblJmQ01MamxkWjBfVG9rZW46SlZuYWIyMXE5b3RsT2Z4UTQ2WWMxV0tVbnFlXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n### **前端 混淆工具**\n\n后面聊了 \n\n``` js\nWasm\n\nSSL TLS  aes CBC\n\nxss 三种类型\n\ncsrf\n\nsamesite 严格 宽松\n\n松弛\n```\n\n\n\n","source":"_posts/23.12.26与车神前端讨论记.md","raw":"---\ntitle: 23.12.26与车神前端讨论记\ndate: 2023-12-26 21:23:34\ntags:\n- 八股\n- 前端\n- js手撕\n- web安全\ncategories: \n- 笔记\n---\n\n手撕new apply 、bin d 隐式转换 前端安全等\n\n<!-- more -->\n\n### new的探讨\n\n1.创建一个对象\n\n2.设置原型\n\n3.设置this，调用构造函数\n\n4.返回，引用类型则返回构造函数的返回值，原始值则返回新建的对象\n\n```JavaScript\nconst animal = new Animal(1, 2, 3);\nconst animal = myNew(Animal, 1, 2, 3);\n\nfunction Animal(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n}\nnew Animal(1, 2, 3); // { a:1, b:2, c:3}\n\nfunction myNew(Class, ...args) {\n    // const obj = {};\n    // 浏览器标准\n    // obj.__proto__ = Class.prototype;\n    // es6标准\n    // Object.setPrototypeOf(obj, Class.prototype);\n    const obj = Object.create(Class.prototype);\n    const ret = Class.apply(obj, args);\n    return (typeof ret === 'object' && ret !== null || typeof ret === 'function') ? ret : obj;\n}\n```\n\nglobalThis = window || global;\n\nArguments 在箭头函数中没有 用 const [first, ...restArgs] = arguments\n\n### Call bind Apply\n\napply call会执行 bind不执行\n\n- apply第二位要传数组\n- Call 不是\n\nArray.prototype.slice.apply(obj, [1])\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ODVhMjA0Y2E4MTQwMTEzNjU2MjVjN2M0NDk4NDdjYmFfMGp4SUJCRlNJQmQ0U2pQb1paR2tjbEFQd2VRM09BVUxfVG9rZW46RlJ1a2JDbjVXb3BmV1B4cU8zV2NycGhRbmpkXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n理解完成\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YzdlZjk3NTk5YjFhMjIzOGUwZDVlODFlNDkxYTU4N2RfUU1tR3RrUHZsMDZUd09VbHROeGZ3aUpkN0JsVFRTNklfVG9rZW46THJqdmJYZndMb0hSZ3N4blpmSWNIUEFubmlnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\nCall\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YjhlNWVmMzgzOTA0YWRiNzk2MTk5MGE5NWRlMDAxOTdfSWFhd0tzNWVXWWdqTmpHQlRaRTJ3MDdiSDBtSHpidE9fVG9rZW46V0ZQMGJOa0xHb1FzZ2l4QkRINmNHb3A4bm1jXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YmY1MTdjMGNiM2M1YjI1Y2YyNDZmYzNmMDA5ZjQwYzRfN0FSUERIT1pYTlpMQUcxa01aYjJNM0ZQalVMQkRRRXNfVG9rZW46WkFydmI5dlRjb0J0U3h4VkE0VWNVWllObm1oXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\nBind\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUwOGNiMGY1NDMzOTVhNzg5N2YzM2U2NjNhNTM4NDZfV3B5Y0lsWVZ6S1RPcmpkMG1kZVYzREFUeXREQ1NpUUlfVG9rZW46VEZGdGJENFJxbzhXTG94Zmt3cmNmWFUxbm1XXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n数据类型转换\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=N2MzMTZiN2VlOTlhMWI4NjkzNTU3MmIxMmIyNmFhZWZfc0dQVlpjekFrNzAzNzVVUWV6UGpLNTgyOEl2MFpOTlhfVG9rZW46Q25Vb2J4bVVCbzBJVXV4Zm1wSWNKS2RkbnNnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n1. ({} - '9') // NaN  \n\n- '[object Object]' - 9 \n- NaN - 9 = NaN\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MGEyYzA0ZmVhMWUzMmY4ZTUyYzViYTY1YTU5YTRhZGNfMWdRTFUya1U4UUd5MTJnRkZUclFhUkV6dUp2cXhxeUZfVG9rZW46SzBBS2JrQWpBb3Jibzh4WUQ5T2N3VHM4bmpnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n### parseInt 和 Number\n\nNumber('[object Object]')\n\nparseInt('[object Object]', 10)\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGZjYjhlZTFhYTY5MGFhZDMxNTQyMTAzMDMzOGQyODFfM0lXV3NuNWxlcDV4MnBrU1M3MVJxb2pnNHNQdm0yM3BfVG9rZW46SXpNRmIyMzB4bzJoRVZ4WHV3Z2NSeXVDbmhjXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n### NaN === 问题\n\n```JavaScript\nObject.is(NaN, NaN) === true\n(NaN === NaN) === false\n```\n\n[2] - '9' // -7\n\n- '2' - 9 = -7\n\n[2, 3] - '9'   // NaN\n\n({} + '9') // '[object Object]' + '9' = '[object Object]9'\n\n[2] + '9' // '2' + '9' = '29'\n\n[2, 3] + '9' // '2,3' + '9' = '2,39'\n\n9 + {}  // '9[object Object]'\n\n![img](https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE3MDFlMTkyODRjOTIyNjQ2M2RmOTEwNzU4NzMwMTNfbmkwV0RYRjFtWjJIbFZjczJ0Z0FoblJmQ01MamxkWjBfVG9rZW46SlZuYWIyMXE5b3RsT2Z4UTQ2WWMxV0tVbnFlXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA)\n\n### **前端 混淆工具**\n\n后面聊了 \n\n``` js\nWasm\n\nSSL TLS  aes CBC\n\nxss 三种类型\n\ncsrf\n\nsamesite 严格 宽松\n\n松弛\n```\n\n\n\n","slug":"23.12.26与车神前端讨论记","published":1,"updated":"2024-01-02T15:09:30.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x320001q05z4i9zam4o","content":"<p>手撕new apply 、bin d 隐式转换 前端安全等</p>\n<span id=\"more\"></span>\n\n<h3 id=\"new的探讨\"><a href=\"#new的探讨\" class=\"headerlink\" title=\"new的探讨\"></a>new的探讨</h3><p>1.创建一个对象</p>\n<p>2.设置原型</p>\n<p>3.设置this，调用构造函数</p>\n<p>4.返回，引用类型则返回构造函数的返回值，原始值则返回新建的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"title function_\">myNew</span>(<span class=\"title class_\">Animal</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = a;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> = b;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">c</span> = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// &#123; a:1, b:2, c:3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">Class, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// const obj = &#123;&#125;;</span></span><br><span class=\"line\">    <span class=\"comment\">// 浏览器标准</span></span><br><span class=\"line\">    <span class=\"comment\">// obj.__proto__ = Class.prototype;</span></span><br><span class=\"line\">    <span class=\"comment\">// es6标准</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.setPrototypeOf(obj, Class.prototype);</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Class</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"title class_\">Class</span>.<span class=\"title function_\">apply</span>(obj, args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; ret !== <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;function&#x27;</span>) ? ret : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>globalThis = window || global;</p>\n<p>Arguments 在箭头函数中没有 用 const [first, …restArgs] = arguments</p>\n<h3 id=\"Call-bind-Apply\"><a href=\"#Call-bind-Apply\" class=\"headerlink\" title=\"Call bind Apply\"></a>Call bind Apply</h3><p>apply call会执行 bind不执行</p>\n<ul>\n<li>apply第二位要传数组</li>\n<li>Call 不是</li>\n</ul>\n<p>Array.prototype.slice.apply(obj, [1])</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ODVhMjA0Y2E4MTQwMTEzNjU2MjVjN2M0NDk4NDdjYmFfMGp4SUJCRlNJQmQ0U2pQb1paR2tjbEFQd2VRM09BVUxfVG9rZW46RlJ1a2JDbjVXb3BmV1B4cU8zV2NycGhRbmpkXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>理解完成</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YzdlZjk3NTk5YjFhMjIzOGUwZDVlODFlNDkxYTU4N2RfUU1tR3RrUHZsMDZUd09VbHROeGZ3aUpkN0JsVFRTNklfVG9rZW46THJqdmJYZndMb0hSZ3N4blpmSWNIUEFubmlnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>Call</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YjhlNWVmMzgzOTA0YWRiNzk2MTk5MGE5NWRlMDAxOTdfSWFhd0tzNWVXWWdqTmpHQlRaRTJ3MDdiSDBtSHpidE9fVG9rZW46V0ZQMGJOa0xHb1FzZ2l4QkRINmNHb3A4bm1jXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YmY1MTdjMGNiM2M1YjI1Y2YyNDZmYzNmMDA5ZjQwYzRfN0FSUERIT1pYTlpMQUcxa01aYjJNM0ZQalVMQkRRRXNfVG9rZW46WkFydmI5dlRjb0J0U3h4VkE0VWNVWllObm1oXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>Bind</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUwOGNiMGY1NDMzOTVhNzg5N2YzM2U2NjNhNTM4NDZfV3B5Y0lsWVZ6S1RPcmpkMG1kZVYzREFUeXREQ1NpUUlfVG9rZW46VEZGdGJENFJxbzhXTG94Zmt3cmNmWFUxbm1XXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>数据类型转换</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=N2MzMTZiN2VlOTlhMWI4NjkzNTU3MmIxMmIyNmFhZWZfc0dQVlpjekFrNzAzNzVVUWV6UGpLNTgyOEl2MFpOTlhfVG9rZW46Q25Vb2J4bVVCbzBJVXV4Zm1wSWNKS2RkbnNnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<ol>\n<li>({} - ‘9’) // NaN  </li>\n</ol>\n<ul>\n<li>‘[object Object]’ - 9 </li>\n<li>NaN - 9 = NaN</li>\n</ul>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MGEyYzA0ZmVhMWUzMmY4ZTUyYzViYTY1YTU5YTRhZGNfMWdRTFUya1U4UUd5MTJnRkZUclFhUkV6dUp2cXhxeUZfVG9rZW46SzBBS2JrQWpBb3Jibzh4WUQ5T2N3VHM4bmpnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<h3 id=\"parseInt-和-Number\"><a href=\"#parseInt-和-Number\" class=\"headerlink\" title=\"parseInt 和 Number\"></a>parseInt 和 Number</h3><p>Number(‘[object Object]’)</p>\n<p>parseInt(‘[object Object]’, 10)</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGZjYjhlZTFhYTY5MGFhZDMxNTQyMTAzMDMzOGQyODFfM0lXV3NuNWxlcDV4MnBrU1M3MVJxb2pnNHNQdm0yM3BfVG9rZW46SXpNRmIyMzB4bzJoRVZ4WHV3Z2NSeXVDbmhjXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<h3 id=\"NaN-问题\"><a href=\"#NaN-问题\" class=\"headerlink\" title=\"NaN === 问题\"></a>NaN === 问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"title class_\">NaN</span>) === <span class=\"literal\">true</span></span><br><span class=\"line\">(<span class=\"title class_\">NaN</span> === <span class=\"title class_\">NaN</span>) === <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>[2] - ‘9’ // -7</p>\n<ul>\n<li>‘2’ - 9 = -7</li>\n</ul>\n<p>[2, 3] - ‘9’   // NaN</p>\n<p>({} + ‘9’) // ‘[object Object]’ + ‘9’ = ‘[object Object]9’</p>\n<p>[2] + ‘9’ // ‘2’ + ‘9’ = ‘29’</p>\n<p>[2, 3] + ‘9’ // ‘2,3’ + ‘9’ = ‘2,39’</p>\n<p>9 + {}  // ‘9[object Object]’</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE3MDFlMTkyODRjOTIyNjQ2M2RmOTEwNzU4NzMwMTNfbmkwV0RYRjFtWjJIbFZjczJ0Z0FoblJmQ01MamxkWjBfVG9rZW46SlZuYWIyMXE5b3RsT2Z4UTQ2WWMxV0tVbnFlXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<h3 id=\"前端-混淆工具\"><a href=\"#前端-混淆工具\" class=\"headerlink\" title=\"前端 混淆工具\"></a><strong>前端 混淆工具</strong></h3><p>后面聊了 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Wasm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">SSL</span> <span class=\"variable constant_\">TLS</span>  aes <span class=\"variable constant_\">CBC</span></span><br><span class=\"line\"></span><br><span class=\"line\">xss 三种类型</span><br><span class=\"line\"></span><br><span class=\"line\">csrf</span><br><span class=\"line\"></span><br><span class=\"line\">samesite 严格 宽松</span><br><span class=\"line\"></span><br><span class=\"line\">松弛</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>手撕new apply 、bin d 隐式转换 前端安全等</p>","more":"<h3 id=\"new的探讨\"><a href=\"#new的探讨\" class=\"headerlink\" title=\"new的探讨\"></a>new的探讨</h3><p>1.创建一个对象</p>\n<p>2.设置原型</p>\n<p>3.设置this，调用构造函数</p>\n<p>4.返回，引用类型则返回构造函数的返回值，原始值则返回新建的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"title function_\">myNew</span>(<span class=\"title class_\">Animal</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = a;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> = b;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">c</span> = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// &#123; a:1, b:2, c:3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">Class, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// const obj = &#123;&#125;;</span></span><br><span class=\"line\">    <span class=\"comment\">// 浏览器标准</span></span><br><span class=\"line\">    <span class=\"comment\">// obj.__proto__ = Class.prototype;</span></span><br><span class=\"line\">    <span class=\"comment\">// es6标准</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.setPrototypeOf(obj, Class.prototype);</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Class</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"title class_\">Class</span>.<span class=\"title function_\">apply</span>(obj, args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; ret !== <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;function&#x27;</span>) ? ret : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>globalThis = window || global;</p>\n<p>Arguments 在箭头函数中没有 用 const [first, …restArgs] = arguments</p>\n<h3 id=\"Call-bind-Apply\"><a href=\"#Call-bind-Apply\" class=\"headerlink\" title=\"Call bind Apply\"></a>Call bind Apply</h3><p>apply call会执行 bind不执行</p>\n<ul>\n<li>apply第二位要传数组</li>\n<li>Call 不是</li>\n</ul>\n<p>Array.prototype.slice.apply(obj, [1])</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ODVhMjA0Y2E4MTQwMTEzNjU2MjVjN2M0NDk4NDdjYmFfMGp4SUJCRlNJQmQ0U2pQb1paR2tjbEFQd2VRM09BVUxfVG9rZW46RlJ1a2JDbjVXb3BmV1B4cU8zV2NycGhRbmpkXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>理解完成</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YzdlZjk3NTk5YjFhMjIzOGUwZDVlODFlNDkxYTU4N2RfUU1tR3RrUHZsMDZUd09VbHROeGZ3aUpkN0JsVFRTNklfVG9rZW46THJqdmJYZndMb0hSZ3N4blpmSWNIUEFubmlnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>Call</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YjhlNWVmMzgzOTA0YWRiNzk2MTk5MGE5NWRlMDAxOTdfSWFhd0tzNWVXWWdqTmpHQlRaRTJ3MDdiSDBtSHpidE9fVG9rZW46V0ZQMGJOa0xHb1FzZ2l4QkRINmNHb3A4bm1jXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=YmY1MTdjMGNiM2M1YjI1Y2YyNDZmYzNmMDA5ZjQwYzRfN0FSUERIT1pYTlpMQUcxa01aYjJNM0ZQalVMQkRRRXNfVG9rZW46WkFydmI5dlRjb0J0U3h4VkE0VWNVWllObm1oXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>Bind</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUwOGNiMGY1NDMzOTVhNzg5N2YzM2U2NjNhNTM4NDZfV3B5Y0lsWVZ6S1RPcmpkMG1kZVYzREFUeXREQ1NpUUlfVG9rZW46VEZGdGJENFJxbzhXTG94Zmt3cmNmWFUxbm1XXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<p>数据类型转换</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=N2MzMTZiN2VlOTlhMWI4NjkzNTU3MmIxMmIyNmFhZWZfc0dQVlpjekFrNzAzNzVVUWV6UGpLNTgyOEl2MFpOTlhfVG9rZW46Q25Vb2J4bVVCbzBJVXV4Zm1wSWNKS2RkbnNnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<ol>\n<li>({} - ‘9’) // NaN  </li>\n</ol>\n<ul>\n<li>‘[object Object]’ - 9 </li>\n<li>NaN - 9 = NaN</li>\n</ul>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=MGEyYzA0ZmVhMWUzMmY4ZTUyYzViYTY1YTU5YTRhZGNfMWdRTFUya1U4UUd5MTJnRkZUclFhUkV6dUp2cXhxeUZfVG9rZW46SzBBS2JrQWpBb3Jibzh4WUQ5T2N3VHM4bmpnXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<h3 id=\"parseInt-和-Number\"><a href=\"#parseInt-和-Number\" class=\"headerlink\" title=\"parseInt 和 Number\"></a>parseInt 和 Number</h3><p>Number(‘[object Object]’)</p>\n<p>parseInt(‘[object Object]’, 10)</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGZjYjhlZTFhYTY5MGFhZDMxNTQyMTAzMDMzOGQyODFfM0lXV3NuNWxlcDV4MnBrU1M3MVJxb2pnNHNQdm0yM3BfVG9rZW46SXpNRmIyMzB4bzJoRVZ4WHV3Z2NSeXVDbmhjXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<h3 id=\"NaN-问题\"><a href=\"#NaN-问题\" class=\"headerlink\" title=\"NaN === 问题\"></a>NaN === 问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"title class_\">NaN</span>) === <span class=\"literal\">true</span></span><br><span class=\"line\">(<span class=\"title class_\">NaN</span> === <span class=\"title class_\">NaN</span>) === <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>[2] - ‘9’ // -7</p>\n<ul>\n<li>‘2’ - 9 = -7</li>\n</ul>\n<p>[2, 3] - ‘9’   // NaN</p>\n<p>({} + ‘9’) // ‘[object Object]’ + ‘9’ = ‘[object Object]9’</p>\n<p>[2] + ‘9’ // ‘2’ + ‘9’ = ‘29’</p>\n<p>[2, 3] + ‘9’ // ‘2,3’ + ‘9’ = ‘2,39’</p>\n<p>9 + {}  // ‘9[object Object]’</p>\n<p><img src=\"https://szshgv1kbo.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE3MDFlMTkyODRjOTIyNjQ2M2RmOTEwNzU4NzMwMTNfbmkwV0RYRjFtWjJIbFZjczJ0Z0FoblJmQ01MamxkWjBfVG9rZW46SlZuYWIyMXE5b3RsT2Z4UTQ2WWMxV0tVbnFlXzE3MDQyMDgwMzc6MTcwNDIxMTYzN19WNA\" alt=\"img\"></p>\n<h3 id=\"前端-混淆工具\"><a href=\"#前端-混淆工具\" class=\"headerlink\" title=\"前端 混淆工具\"></a><strong>前端 混淆工具</strong></h3><p>后面聊了 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Wasm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">SSL</span> <span class=\"variable constant_\">TLS</span>  aes <span class=\"variable constant_\">CBC</span></span><br><span class=\"line\"></span><br><span class=\"line\">xss 三种类型</span><br><span class=\"line\"></span><br><span class=\"line\">csrf</span><br><span class=\"line\"></span><br><span class=\"line\">samesite 严格 宽松</span><br><span class=\"line\"></span><br><span class=\"line\">松弛</span><br></pre></td></tr></table></figure>"},{"title":"23年第一季度顽固单词","date":"2023-04-10T03:18:34.000Z","_content":"\n# 顽固词汇\n\n<!-- more -->\n\n### 3.17\n\n需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：\n\nConvict,eradicate,massacre,harbor,burglar,blunt,stance,defect,reclaim,butcher, haul,tow,velvet,perish,\n\n### 3.18\n\n需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：\n\nBond,booth,breach,breed,chamber,cluster,convict,counsel,crew,cruise,clutch,\n\n### 3.19\n\n需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：\n\nFlatter, pine, reproach,tentative,elapse,gulf,draft,plausible\n\nTuck, creep,interact,blunt,penalize,annoy,sneeze,straw,embrace,chunk\n\nInduce,grope,equity,sack,booth,setback，\n\n### 3.20\n\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nPlague,corporation,sober,contaminate,lash,merry,portrait,detect,portray\n\nDeparture,confer,hatred,comply,compartment,disposal,prey, disperse,stoop\n\nVariable,bond,counsel,burglar,dissolve,panorama,enrol，\n\n### 3.21\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nDread,prey,quota,defect,malignant,whirl,sack,rake,scenario\n\nyield,consumption,despise,pigeon, probe,tame,dissolve,glow\n\n### 3.22\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nReputation, tame,propagate,denounce,adhere,manifest,lapse,permeate, oblige,\n\nabsorb,prescribe,funeral,herald,embody,bait,proposal,inherit,deliberate\n\nDiscrete, hypothesis,convene,headquarters,scout,counsel,gracious\n\n### 3.23\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\npowder,manifest,sceptical,suffice,constitute,rage,crude,simultaneous.levy，\n\nProposition,detect, implication,broadcast,whilst,furnish,irritate,associate，\n\nDiscipline,emigrate,constituent,redundant,grand,broadcast,exclaim,levy\n\n### 3.24\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nConstitution,accordingly,resume,discipline,lane,lapse,temptation,thread,inherent\n\nPersecute,constrain,speculate,term,jaw,coarse,conscious,subscribe\n\nBundle,arise,circumstance,compact,slump,latent,foremost, herald,guild\n\n### 3.25\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nRevolve,utter,rash,choir,craft,constitution,criterion,cradle,instal,petty,\n\nWrench,revolt,sanction,ascertain,instalment,constituent\n\n### 3.26\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nSplash,relate,stagger,heal,collar,speculate,sanction,cradle,grand,plant,\n\nBait,affection.proposal,fragile,moist,convene,avert,illuminate,deplore,\n\n### 3.27\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nConvene,transaction,presume,utter,stem,discharge,flourish,beam,cluster,startle,revive,conspicuous,subscribe,deplore,parasite,workout,vacant,insight,crow,funding,spectacle,Induce,manufacture,archive,seam,manufacture,dense,infrared,illuminate,district,facility,scenario,proposition,backward,compact,founder,commend,denounce,buzz,Pickup,offensive,vain,flap,\n\n### 3.28\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： \n\nExempt,cereal,permeate,mobilise,stagger,deduct,tedious，constitution，dread,imperial\n\nconsist,variable,stipulate,instalment,pioneer,settler,strike,slump,revive,interval,celsius,crush,lord,\n\nDistrict,coarse,coward,conspicuous,marvelous,splendid,dense,brass,rash,tray,substance,strand\n\n### 3.29\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： \n\nclutch,cluster,workout,dissolve,inventory,criterion,installment,descendant,bond,intensive,intimidate,strand,dense,speculate,scrutiny,remainder,pedestrian,extend,brutal,relate,reel,trench,irritate,contradict,inherent,firm,hoist,labor,integral,drift,graze,\n\n### 3.30\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： \n\nBully,velvet,tribute,spine,barrel,presume,mortal,anonymous,grant,slippery,subtract, powder,rein,jaw,intermittent,\n\n### 3.31\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nLatent,adhere,division,symphony,puppet,authentic,spectacle，pond,sulphur,\n\nCheat, medium,vain,blush,rural,narrative,irritate,conspicuous,compact,trademark,\n\nForemost,permeate,sake,ring,fatigue,stimulate,pedestrian,strand,lateral,incur,equator,\n\n### 4.1\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nMobilise,furnish,beware,critical,panorama,implicit,tub,pathetic,candidate, division,generalise,\n\nbrace,portrait,tram,drown,cardinal,hail,immigrant,trolley,\n\n### 4.2\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nendure,maiden,paternal,strain,disposal,sketch,deficiency,peasant,cradle,cricket,Grand,spacious,divide,stagger,aggregate,pottery,census,grant,herald,instal,representative,cunning,Plausible, seam,amiable,intensive,constitute,brisk,avert,persecute,\n\n### 4.3\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\nOutfit,provided,booth,conclusion,beard,counsel,burden,marvelous,pickup,gracious,bully,distress,vain,rash,triple,spiritual,ego,strap,bulletin,perish, accommodate,flap,dairy,ministry,frown,suburb,immense,interval,resemble,inquire,notwithstanding,rein,predecessor,remnant,nevertheless,grace,bud,sake,envy,pathetic,instinct,fountain,puppet,foul,sneeze,rim,enclose,format,contingent,hoist,reed,\n\n### 4.4\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：Plagiarism,fairy，insensitive, sneak,mayor,shrug,\n\n### 4.5\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nSwarm,flexible,rational,artefact,stagger,stagger,wary,brisk,dairy,defect,pharmacy,frost,stain,cabinet,smash,raid,saddle,plague,sneak,snap,fairy,entrance,variance,\n\n### 4.6\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nexpression,provided,wrap,exempt,coordination,cardinal,strain,heal,suspicious,enhance,submerge,organism,congress\n\n### 4.7\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nDictation,remedy,rotate,respective,omit,nucleus,arbitrary,respective,inhabitant, fraction,\n\nmerchandise,\n\n### 4.8\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nPronoun, sack,marvelous,reclaim,proposition,mortal,physician,circumstance,pant,deduct,jaw,weep,yield\n\n### 4.9\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nParliament,intense,botany,interception,arrow,transaction,subtract,lapse,mobilise,dean,pathetic,beside,chill,palm,distress，drift,spine,petty,anonymous,\n\n### 4.15\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词,最后给出单词覆盖率（%）：\n\nHumidity,ethnic,trival,conscious,fairy,ward,plague,daunting,sanction,beam,kin,geophysical,herald,contingent,snap,stretch,carpet,hoist,weary,rational,remedy.\n\nArbitrary,wicked,bachelor,peep,\n\n","source":"_posts/23年第一季度顽固词汇.md","raw":"---\ntitle: 23年第一季度顽固单词\ndate: 2023-04-10 11:18:34\ntags:\n- 英语词汇\n- 循环\n- prompt\ncategories: \n- 笔记\n---\n\n# 顽固词汇\n\n<!-- more -->\n\n### 3.17\n\n需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：\n\nConvict,eradicate,massacre,harbor,burglar,blunt,stance,defect,reclaim,butcher, haul,tow,velvet,perish,\n\n### 3.18\n\n需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：\n\nBond,booth,breach,breed,chamber,cluster,convict,counsel,crew,cruise,clutch,\n\n### 3.19\n\n需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：\n\nFlatter, pine, reproach,tentative,elapse,gulf,draft,plausible\n\nTuck, creep,interact,blunt,penalize,annoy,sneeze,straw,embrace,chunk\n\nInduce,grope,equity,sack,booth,setback，\n\n### 3.20\n\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nPlague,corporation,sober,contaminate,lash,merry,portrait,detect,portray\n\nDeparture,confer,hatred,comply,compartment,disposal,prey, disperse,stoop\n\nVariable,bond,counsel,burglar,dissolve,panorama,enrol，\n\n### 3.21\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nDread,prey,quota,defect,malignant,whirl,sack,rake,scenario\n\nyield,consumption,despise,pigeon, probe,tame,dissolve,glow\n\n### 3.22\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nReputation, tame,propagate,denounce,adhere,manifest,lapse,permeate, oblige,\n\nabsorb,prescribe,funeral,herald,embody,bait,proposal,inherit,deliberate\n\nDiscrete, hypothesis,convene,headquarters,scout,counsel,gracious\n\n### 3.23\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\npowder,manifest,sceptical,suffice,constitute,rage,crude,simultaneous.levy，\n\nProposition,detect, implication,broadcast,whilst,furnish,irritate,associate，\n\nDiscipline,emigrate,constituent,redundant,grand,broadcast,exclaim,levy\n\n### 3.24\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nConstitution,accordingly,resume,discipline,lane,lapse,temptation,thread,inherent\n\nPersecute,constrain,speculate,term,jaw,coarse,conscious,subscribe\n\nBundle,arise,circumstance,compact,slump,latent,foremost, herald,guild\n\n### 3.25\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nRevolve,utter,rash,choir,craft,constitution,criterion,cradle,instal,petty,\n\nWrench,revolt,sanction,ascertain,instalment,constituent\n\n### 3.26\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nSplash,relate,stagger,heal,collar,speculate,sanction,cradle,grand,plant,\n\nBait,affection.proposal,fragile,moist,convene,avert,illuminate,deplore,\n\n### 3.27\n\n将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nConvene,transaction,presume,utter,stem,discharge,flourish,beam,cluster,startle,revive,conspicuous,subscribe,deplore,parasite,workout,vacant,insight,crow,funding,spectacle,Induce,manufacture,archive,seam,manufacture,dense,infrared,illuminate,district,facility,scenario,proposition,backward,compact,founder,commend,denounce,buzz,Pickup,offensive,vain,flap,\n\n### 3.28\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： \n\nExempt,cereal,permeate,mobilise,stagger,deduct,tedious，constitution，dread,imperial\n\nconsist,variable,stipulate,instalment,pioneer,settler,strike,slump,revive,interval,celsius,crush,lord,\n\nDistrict,coarse,coward,conspicuous,marvelous,splendid,dense,brass,rash,tray,substance,strand\n\n### 3.29\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： \n\nclutch,cluster,workout,dissolve,inventory,criterion,installment,descendant,bond,intensive,intimidate,strand,dense,speculate,scrutiny,remainder,pedestrian,extend,brutal,relate,reel,trench,irritate,contradict,inherent,firm,hoist,labor,integral,drift,graze,\n\n### 3.30\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： \n\nBully,velvet,tribute,spine,barrel,presume,mortal,anonymous,grant,slippery,subtract, powder,rein,jaw,intermittent,\n\n### 3.31\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nLatent,adhere,division,symphony,puppet,authentic,spectacle，pond,sulphur,\n\nCheat, medium,vain,blush,rural,narrative,irritate,conspicuous,compact,trademark,\n\nForemost,permeate,sake,ring,fatigue,stimulate,pedestrian,strand,lateral,incur,equator,\n\n### 4.1\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nMobilise,furnish,beware,critical,panorama,implicit,tub,pathetic,candidate, division,generalise,\n\nbrace,portrait,tram,drown,cardinal,hail,immigrant,trolley,\n\n### 4.2\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nendure,maiden,paternal,strain,disposal,sketch,deficiency,peasant,cradle,cricket,Grand,spacious,divide,stagger,aggregate,pottery,census,grant,herald,instal,representative,cunning,Plausible, seam,amiable,intensive,constitute,brisk,avert,persecute,\n\n### 4.3\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\nOutfit,provided,booth,conclusion,beard,counsel,burden,marvelous,pickup,gracious,bully,distress,vain,rash,triple,spiritual,ego,strap,bulletin,perish, accommodate,flap,dairy,ministry,frown,suburb,immense,interval,resemble,inquire,notwithstanding,rein,predecessor,remnant,nevertheless,grace,bud,sake,envy,pathetic,instinct,fountain,puppet,foul,sneeze,rim,enclose,format,contingent,hoist,reed,\n\n### 4.4\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：Plagiarism,fairy，insensitive, sneak,mayor,shrug,\n\n### 4.5\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nSwarm,flexible,rational,artefact,stagger,stagger,wary,brisk,dairy,defect,pharmacy,frost,stain,cabinet,smash,raid,saddle,plague,sneak,snap,fairy,entrance,variance,\n\n### 4.6\n\n将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nexpression,provided,wrap,exempt,coordination,cardinal,strain,heal,suspicious,enhance,submerge,organism,congress\n\n### 4.7\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nDictation,remedy,rotate,respective,omit,nucleus,arbitrary,respective,inhabitant, fraction,\n\nmerchandise,\n\n### 4.8\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nPronoun, sack,marvelous,reclaim,proposition,mortal,physician,circumstance,pant,deduct,jaw,weep,yield\n\n### 4.9\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：\n\nParliament,intense,botany,interception,arrow,transaction,subtract,lapse,mobilise,dean,pathetic,beside,chill,palm,distress，drift,spine,petty,anonymous,\n\n### 4.15\n\n将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词,最后给出单词覆盖率（%）：\n\nHumidity,ethnic,trival,conscious,fairy,ward,plague,daunting,sanction,beam,kin,geophysical,herald,contingent,snap,stretch,carpet,hoist,weary,rational,remedy.\n\nArbitrary,wicked,bachelor,peep,\n\n","slug":"23年第一季度顽固词汇","published":1,"updated":"2023-04-20T10:45:10.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x370003q05z6qk10h2a","content":"<h1 id=\"顽固词汇\"><a href=\"#顽固词汇\" class=\"headerlink\" title=\"顽固词汇\"></a>顽固词汇</h1><span id=\"more\"></span>\n\n<h3 id=\"3-17\"><a href=\"#3-17\" class=\"headerlink\" title=\"3.17\"></a>3.17</h3><p>需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：</p>\n<p>Convict,eradicate,massacre,harbor,burglar,blunt,stance,defect,reclaim,butcher, haul,tow,velvet,perish,</p>\n<h3 id=\"3-18\"><a href=\"#3-18\" class=\"headerlink\" title=\"3.18\"></a>3.18</h3><p>需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：</p>\n<p>Bond,booth,breach,breed,chamber,cluster,convict,counsel,crew,cruise,clutch,</p>\n<h3 id=\"3-19\"><a href=\"#3-19\" class=\"headerlink\" title=\"3.19\"></a>3.19</h3><p>需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：</p>\n<p>Flatter, pine, reproach,tentative,elapse,gulf,draft,plausible</p>\n<p>Tuck, creep,interact,blunt,penalize,annoy,sneeze,straw,embrace,chunk</p>\n<p>Induce,grope,equity,sack,booth,setback，</p>\n<h3 id=\"3-20\"><a href=\"#3-20\" class=\"headerlink\" title=\"3.20\"></a>3.20</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Plague,corporation,sober,contaminate,lash,merry,portrait,detect,portray</p>\n<p>Departure,confer,hatred,comply,compartment,disposal,prey, disperse,stoop</p>\n<p>Variable,bond,counsel,burglar,dissolve,panorama,enrol，</p>\n<h3 id=\"3-21\"><a href=\"#3-21\" class=\"headerlink\" title=\"3.21\"></a>3.21</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Dread,prey,quota,defect,malignant,whirl,sack,rake,scenario</p>\n<p>yield,consumption,despise,pigeon, probe,tame,dissolve,glow</p>\n<h3 id=\"3-22\"><a href=\"#3-22\" class=\"headerlink\" title=\"3.22\"></a>3.22</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Reputation, tame,propagate,denounce,adhere,manifest,lapse,permeate, oblige,</p>\n<p>absorb,prescribe,funeral,herald,embody,bait,proposal,inherit,deliberate</p>\n<p>Discrete, hypothesis,convene,headquarters,scout,counsel,gracious</p>\n<h3 id=\"3-23\"><a href=\"#3-23\" class=\"headerlink\" title=\"3.23\"></a>3.23</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>powder,manifest,sceptical,suffice,constitute,rage,crude,simultaneous.levy，</p>\n<p>Proposition,detect, implication,broadcast,whilst,furnish,irritate,associate，</p>\n<p>Discipline,emigrate,constituent,redundant,grand,broadcast,exclaim,levy</p>\n<h3 id=\"3-24\"><a href=\"#3-24\" class=\"headerlink\" title=\"3.24\"></a>3.24</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Constitution,accordingly,resume,discipline,lane,lapse,temptation,thread,inherent</p>\n<p>Persecute,constrain,speculate,term,jaw,coarse,conscious,subscribe</p>\n<p>Bundle,arise,circumstance,compact,slump,latent,foremost, herald,guild</p>\n<h3 id=\"3-25\"><a href=\"#3-25\" class=\"headerlink\" title=\"3.25\"></a>3.25</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Revolve,utter,rash,choir,craft,constitution,criterion,cradle,instal,petty,</p>\n<p>Wrench,revolt,sanction,ascertain,instalment,constituent</p>\n<h3 id=\"3-26\"><a href=\"#3-26\" class=\"headerlink\" title=\"3.26\"></a>3.26</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Splash,relate,stagger,heal,collar,speculate,sanction,cradle,grand,plant,</p>\n<p>Bait,affection.proposal,fragile,moist,convene,avert,illuminate,deplore,</p>\n<h3 id=\"3-27\"><a href=\"#3-27\" class=\"headerlink\" title=\"3.27\"></a>3.27</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Convene,transaction,presume,utter,stem,discharge,flourish,beam,cluster,startle,revive,conspicuous,subscribe,deplore,parasite,workout,vacant,insight,crow,funding,spectacle,Induce,manufacture,archive,seam,manufacture,dense,infrared,illuminate,district,facility,scenario,proposition,backward,compact,founder,commend,denounce,buzz,Pickup,offensive,vain,flap,</p>\n<h3 id=\"3-28\"><a href=\"#3-28\" class=\"headerlink\" title=\"3.28\"></a>3.28</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： </p>\n<p>Exempt,cereal,permeate,mobilise,stagger,deduct,tedious，constitution，dread,imperial</p>\n<p>consist,variable,stipulate,instalment,pioneer,settler,strike,slump,revive,interval,celsius,crush,lord,</p>\n<p>District,coarse,coward,conspicuous,marvelous,splendid,dense,brass,rash,tray,substance,strand</p>\n<h3 id=\"3-29\"><a href=\"#3-29\" class=\"headerlink\" title=\"3.29\"></a>3.29</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： </p>\n<p>clutch,cluster,workout,dissolve,inventory,criterion,installment,descendant,bond,intensive,intimidate,strand,dense,speculate,scrutiny,remainder,pedestrian,extend,brutal,relate,reel,trench,irritate,contradict,inherent,firm,hoist,labor,integral,drift,graze,</p>\n<h3 id=\"3-30\"><a href=\"#3-30\" class=\"headerlink\" title=\"3.30\"></a>3.30</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： </p>\n<p>Bully,velvet,tribute,spine,barrel,presume,mortal,anonymous,grant,slippery,subtract, powder,rein,jaw,intermittent,</p>\n<h3 id=\"3-31\"><a href=\"#3-31\" class=\"headerlink\" title=\"3.31\"></a>3.31</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Latent,adhere,division,symphony,puppet,authentic,spectacle，pond,sulphur,</p>\n<p>Cheat, medium,vain,blush,rural,narrative,irritate,conspicuous,compact,trademark,</p>\n<p>Foremost,permeate,sake,ring,fatigue,stimulate,pedestrian,strand,lateral,incur,equator,</p>\n<h3 id=\"4-1\"><a href=\"#4-1\" class=\"headerlink\" title=\"4.1\"></a>4.1</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Mobilise,furnish,beware,critical,panorama,implicit,tub,pathetic,candidate, division,generalise,</p>\n<p>brace,portrait,tram,drown,cardinal,hail,immigrant,trolley,</p>\n<h3 id=\"4-2\"><a href=\"#4-2\" class=\"headerlink\" title=\"4.2\"></a>4.2</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>endure,maiden,paternal,strain,disposal,sketch,deficiency,peasant,cradle,cricket,Grand,spacious,divide,stagger,aggregate,pottery,census,grant,herald,instal,representative,cunning,Plausible, seam,amiable,intensive,constitute,brisk,avert,persecute,</p>\n<h3 id=\"4-3\"><a href=\"#4-3\" class=\"headerlink\" title=\"4.3\"></a>4.3</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：<br>Outfit,provided,booth,conclusion,beard,counsel,burden,marvelous,pickup,gracious,bully,distress,vain,rash,triple,spiritual,ego,strap,bulletin,perish, accommodate,flap,dairy,ministry,frown,suburb,immense,interval,resemble,inquire,notwithstanding,rein,predecessor,remnant,nevertheless,grace,bud,sake,envy,pathetic,instinct,fountain,puppet,foul,sneeze,rim,enclose,format,contingent,hoist,reed,</p>\n<h3 id=\"4-4\"><a href=\"#4-4\" class=\"headerlink\" title=\"4.4\"></a>4.4</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：Plagiarism,fairy，insensitive, sneak,mayor,shrug,</p>\n<h3 id=\"4-5\"><a href=\"#4-5\" class=\"headerlink\" title=\"4.5\"></a>4.5</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Swarm,flexible,rational,artefact,stagger,stagger,wary,brisk,dairy,defect,pharmacy,frost,stain,cabinet,smash,raid,saddle,plague,sneak,snap,fairy,entrance,variance,</p>\n<h3 id=\"4-6\"><a href=\"#4-6\" class=\"headerlink\" title=\"4.6\"></a>4.6</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>expression,provided,wrap,exempt,coordination,cardinal,strain,heal,suspicious,enhance,submerge,organism,congress</p>\n<h3 id=\"4-7\"><a href=\"#4-7\" class=\"headerlink\" title=\"4.7\"></a>4.7</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Dictation,remedy,rotate,respective,omit,nucleus,arbitrary,respective,inhabitant, fraction,</p>\n<p>merchandise,</p>\n<h3 id=\"4-8\"><a href=\"#4-8\" class=\"headerlink\" title=\"4.8\"></a>4.8</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Pronoun, sack,marvelous,reclaim,proposition,mortal,physician,circumstance,pant,deduct,jaw,weep,yield</p>\n<h3 id=\"4-9\"><a href=\"#4-9\" class=\"headerlink\" title=\"4.9\"></a>4.9</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Parliament,intense,botany,interception,arrow,transaction,subtract,lapse,mobilise,dean,pathetic,beside,chill,palm,distress，drift,spine,petty,anonymous,</p>\n<h3 id=\"4-15\"><a href=\"#4-15\" class=\"headerlink\" title=\"4.15\"></a>4.15</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词,最后给出单词覆盖率（%）：</p>\n<p>Humidity,ethnic,trival,conscious,fairy,ward,plague,daunting,sanction,beam,kin,geophysical,herald,contingent,snap,stretch,carpet,hoist,weary,rational,remedy.</p>\n<p>Arbitrary,wicked,bachelor,peep,</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"顽固词汇\"><a href=\"#顽固词汇\" class=\"headerlink\" title=\"顽固词汇\"></a>顽固词汇</h1>","more":"<h3 id=\"3-17\"><a href=\"#3-17\" class=\"headerlink\" title=\"3.17\"></a>3.17</h3><p>需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：</p>\n<p>Convict,eradicate,massacre,harbor,burglar,blunt,stance,defect,reclaim,butcher, haul,tow,velvet,perish,</p>\n<h3 id=\"3-18\"><a href=\"#3-18\" class=\"headerlink\" title=\"3.18\"></a>3.18</h3><p>需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：</p>\n<p>Bond,booth,breach,breed,chamber,cluster,convict,counsel,crew,cruise,clutch,</p>\n<h3 id=\"3-19\"><a href=\"#3-19\" class=\"headerlink\" title=\"3.19\"></a>3.19</h3><p>需要你将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种释义的markdown表格，下方放上英文高分段落，最后放中文翻译，以下是单词：</p>\n<p>Flatter, pine, reproach,tentative,elapse,gulf,draft,plausible</p>\n<p>Tuck, creep,interact,blunt,penalize,annoy,sneeze,straw,embrace,chunk</p>\n<p>Induce,grope,equity,sack,booth,setback，</p>\n<h3 id=\"3-20\"><a href=\"#3-20\" class=\"headerlink\" title=\"3.20\"></a>3.20</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Plague,corporation,sober,contaminate,lash,merry,portrait,detect,portray</p>\n<p>Departure,confer,hatred,comply,compartment,disposal,prey, disperse,stoop</p>\n<p>Variable,bond,counsel,burglar,dissolve,panorama,enrol，</p>\n<h3 id=\"3-21\"><a href=\"#3-21\" class=\"headerlink\" title=\"3.21\"></a>3.21</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Dread,prey,quota,defect,malignant,whirl,sack,rake,scenario</p>\n<p>yield,consumption,despise,pigeon, probe,tame,dissolve,glow</p>\n<h3 id=\"3-22\"><a href=\"#3-22\" class=\"headerlink\" title=\"3.22\"></a>3.22</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Reputation, tame,propagate,denounce,adhere,manifest,lapse,permeate, oblige,</p>\n<p>absorb,prescribe,funeral,herald,embody,bait,proposal,inherit,deliberate</p>\n<p>Discrete, hypothesis,convene,headquarters,scout,counsel,gracious</p>\n<h3 id=\"3-23\"><a href=\"#3-23\" class=\"headerlink\" title=\"3.23\"></a>3.23</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>powder,manifest,sceptical,suffice,constitute,rage,crude,simultaneous.levy，</p>\n<p>Proposition,detect, implication,broadcast,whilst,furnish,irritate,associate，</p>\n<p>Discipline,emigrate,constituent,redundant,grand,broadcast,exclaim,levy</p>\n<h3 id=\"3-24\"><a href=\"#3-24\" class=\"headerlink\" title=\"3.24\"></a>3.24</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Constitution,accordingly,resume,discipline,lane,lapse,temptation,thread,inherent</p>\n<p>Persecute,constrain,speculate,term,jaw,coarse,conscious,subscribe</p>\n<p>Bundle,arise,circumstance,compact,slump,latent,foremost, herald,guild</p>\n<h3 id=\"3-25\"><a href=\"#3-25\" class=\"headerlink\" title=\"3.25\"></a>3.25</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Revolve,utter,rash,choir,craft,constitution,criterion,cradle,instal,petty,</p>\n<p>Wrench,revolt,sanction,ascertain,instalment,constituent</p>\n<h3 id=\"3-26\"><a href=\"#3-26\" class=\"headerlink\" title=\"3.26\"></a>3.26</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Splash,relate,stagger,heal,collar,speculate,sanction,cradle,grand,plant,</p>\n<p>Bait,affection.proposal,fragile,moist,convene,avert,illuminate,deplore,</p>\n<h3 id=\"3-27\"><a href=\"#3-27\" class=\"headerlink\" title=\"3.27\"></a>3.27</h3><p>将我给的单词串成写作英语高分写作段落，上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Convene,transaction,presume,utter,stem,discharge,flourish,beam,cluster,startle,revive,conspicuous,subscribe,deplore,parasite,workout,vacant,insight,crow,funding,spectacle,Induce,manufacture,archive,seam,manufacture,dense,infrared,illuminate,district,facility,scenario,proposition,backward,compact,founder,commend,denounce,buzz,Pickup,offensive,vain,flap,</p>\n<h3 id=\"3-28\"><a href=\"#3-28\" class=\"headerlink\" title=\"3.28\"></a>3.28</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： </p>\n<p>Exempt,cereal,permeate,mobilise,stagger,deduct,tedious，constitution，dread,imperial</p>\n<p>consist,variable,stipulate,instalment,pioneer,settler,strike,slump,revive,interval,celsius,crush,lord,</p>\n<p>District,coarse,coward,conspicuous,marvelous,splendid,dense,brass,rash,tray,substance,strand</p>\n<h3 id=\"3-29\"><a href=\"#3-29\" class=\"headerlink\" title=\"3.29\"></a>3.29</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： </p>\n<p>clutch,cluster,workout,dissolve,inventory,criterion,installment,descendant,bond,intensive,intimidate,strand,dense,speculate,scrutiny,remainder,pedestrian,extend,brutal,relate,reel,trench,irritate,contradict,inherent,firm,hoist,labor,integral,drift,graze,</p>\n<h3 id=\"3-30\"><a href=\"#3-30\" class=\"headerlink\" title=\"3.30\"></a>3.30</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词： </p>\n<p>Bully,velvet,tribute,spine,barrel,presume,mortal,anonymous,grant,slippery,subtract, powder,rein,jaw,intermittent,</p>\n<h3 id=\"3-31\"><a href=\"#3-31\" class=\"headerlink\" title=\"3.31\"></a>3.31</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Latent,adhere,division,symphony,puppet,authentic,spectacle，pond,sulphur,</p>\n<p>Cheat, medium,vain,blush,rural,narrative,irritate,conspicuous,compact,trademark,</p>\n<p>Foremost,permeate,sake,ring,fatigue,stimulate,pedestrian,strand,lateral,incur,equator,</p>\n<h3 id=\"4-1\"><a href=\"#4-1\" class=\"headerlink\" title=\"4.1\"></a>4.1</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Mobilise,furnish,beware,critical,panorama,implicit,tub,pathetic,candidate, division,generalise,</p>\n<p>brace,portrait,tram,drown,cardinal,hail,immigrant,trolley,</p>\n<h3 id=\"4-2\"><a href=\"#4-2\" class=\"headerlink\" title=\"4.2\"></a>4.2</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>endure,maiden,paternal,strain,disposal,sketch,deficiency,peasant,cradle,cricket,Grand,spacious,divide,stagger,aggregate,pottery,census,grant,herald,instal,representative,cunning,Plausible, seam,amiable,intensive,constitute,brisk,avert,persecute,</p>\n<h3 id=\"4-3\"><a href=\"#4-3\" class=\"headerlink\" title=\"4.3\"></a>4.3</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：<br>Outfit,provided,booth,conclusion,beard,counsel,burden,marvelous,pickup,gracious,bully,distress,vain,rash,triple,spiritual,ego,strap,bulletin,perish, accommodate,flap,dairy,ministry,frown,suburb,immense,interval,resemble,inquire,notwithstanding,rein,predecessor,remnant,nevertheless,grace,bud,sake,envy,pathetic,instinct,fountain,puppet,foul,sneeze,rim,enclose,format,contingent,hoist,reed,</p>\n<h3 id=\"4-4\"><a href=\"#4-4\" class=\"headerlink\" title=\"4.4\"></a>4.4</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：Plagiarism,fairy，insensitive, sneak,mayor,shrug,</p>\n<h3 id=\"4-5\"><a href=\"#4-5\" class=\"headerlink\" title=\"4.5\"></a>4.5</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Swarm,flexible,rational,artefact,stagger,stagger,wary,brisk,dairy,defect,pharmacy,frost,stain,cabinet,smash,raid,saddle,plague,sneak,snap,fairy,entrance,variance,</p>\n<h3 id=\"4-6\"><a href=\"#4-6\" class=\"headerlink\" title=\"4.6\"></a>4.6</h3><p>将我给的单词串成写作英语高分写作段落（模仿马克吐温的文采，单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>expression,provided,wrap,exempt,coordination,cardinal,strain,heal,suspicious,enhance,submerge,organism,congress</p>\n<h3 id=\"4-7\"><a href=\"#4-7\" class=\"headerlink\" title=\"4.7\"></a>4.7</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Dictation,remedy,rotate,respective,omit,nucleus,arbitrary,respective,inhabitant, fraction,</p>\n<p>merchandise,</p>\n<h3 id=\"4-8\"><a href=\"#4-8\" class=\"headerlink\" title=\"4.8\"></a>4.8</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Pronoun, sack,marvelous,reclaim,proposition,mortal,physician,circumstance,pant,deduct,jaw,weep,yield</p>\n<h3 id=\"4-9\"><a href=\"#4-9\" class=\"headerlink\" title=\"4.9\"></a>4.9</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词：</p>\n<p>Parliament,intense,botany,interception,arrow,transaction,subtract,lapse,mobilise,dean,pathetic,beside,chill,palm,distress，drift,spine,petty,anonymous,</p>\n<h3 id=\"4-15\"><a href=\"#4-15\" class=\"headerlink\" title=\"4.15\"></a>4.15</h3><p>将我给的单词串成写作英语高分写作段落（单词排序不分先后，文章要有条理），上方先给出该篇单词多种中文释义的markdown表格，其中表格两列，列名：“单词” 、“释义”，下方放上英文高分段落，最后放中文翻译，不用给任何标题，以下是单词,最后给出单词覆盖率（%）：</p>\n<p>Humidity,ethnic,trival,conscious,fairy,ward,plague,daunting,sanction,beam,kin,geophysical,herald,contingent,snap,stretch,carpet,hoist,weary,rational,remedy.</p>\n<p>Arbitrary,wicked,bachelor,peep,</p>"},{"title":"今天学吐了","date":"2023-04-17T15:23:00.000Z","_content":"\n\n\n# 数学\n\n熟练下面公式，复听 积分基础 - 最简单的积分 多种初等变形推以下公式\n\n<!-- more -->\n\n$\\int a^x dx = \\frac{1}{\\ln a} a^x + C$\n$\\int \\tan x dx = -\\ln|\\cos x| + C$\n$\\int \\frac{1}{a^2+x^2} dx = \\frac{1}{a} \\arctan\\frac{x}{a} + C$\n$\\int \\frac{1}{a^2-x^2} dx = \\frac{1}{2a} \\ln\\left|\\frac{a+x}{a-x}\\right| + C$\n$\\int \\frac{1}{\\sqrt{a^2-x^2}} dx = \\arcsin\\frac{x}{a} + C$\n$\\int e^x dx = e^x + C$\n$\\int a^x \\ln a dx = a^x + C$\n$\\int \\log_a x dx = x\\log_a x - x + C$\n$\\int \\sin^n(x) dx = -\\frac{1}{n} \\sin^{n-1}(x) \\cos(x) + \\frac{n-1}{n} \\int \\sin^{n-2}(x) dx$\n$\\int \\cos^n(x) dx = \\frac{1}{n} \\cos^{n-1}(x) \\sin(x) + \\frac{n-1}{n} \\int \\cos^{n-2}(x) dx$\n$\\int \\sin(mx) \\sin(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} - \\frac{\\cos[(m+n)x]}{m+n}\\right]$\n$\\int \\cos(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} + \\frac{\\cos[(m+n)x]}{m+n}\\right]$\n$\\int \\sin(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\sin[(m+n)x]}{m+n} - \\frac{\\sin[(m-n)x]}{m-n}\\right]$\n$\\int \\tan(x) dx = \\ln|\\sec(x)| + C$\n$\\int \\cot(x) dx = \\ln|\\sin(x)| + C$\n$\\int \\sec(x) dx = \\ln|\\sec(x) + \\tan(x)| + C$\n$\\int \\csc(x) dx = \\ln|\\csc(x) - \\cot(x)| + C$\n分部积分法：$\\int u(x) v'(x) dx = u(x) v(x) - \\int u'(x) v(x) dx$\n其中 u(x) 和 v(x) 都是可导的函数。\n\n代换积分法：设 u = g(x) 是 x 的可导函数，y = f(u)，则 $\\int f(g(x))g'(x) dx = \\int f(u) du$\n\n三角函数的和差化积公式：\n$\\sin(A \\pm B) = \\sin A \\cos B \\pm \\cos A \\sin B$\n$\\cos(A \\pm B) = \\cos A \\cos B \\mp \\sin A \\sin B$\n可以用来化简某些三角函数的积分式子。\n# 英语\n## part1:\nIn a small rural village, an amiable peasant, with a coarse beard and a backward cap, had an inherent affection for botany, tending to the fragile buds and plants in his humble garden. The peasant's authentic love for nature was evident in the way he would gently graze the leaves, his face glowing with a warm blush. A narrow lane adorned with a row of cricket sounds, led to the picturesque pond where the inhabitant's children would occasionally play, splashing water and laughing with merry expressions.\n\nNevertheless, the village had its own hardships. The brutal burden of a persistent drought had yielded a deficit in their water supply, causing distress among the community. The inhabitants convened in the village center, under the intense scrutiny of the sun, to discuss the pressing circumstance. The mayor, a man of immense stature, declared that the community must come together and seek a solution to eradicate this problem.\n\nIn a desperate effort to avert further crisis, a group of settlers, comprising of young and old, decided to explore the surroundings, hoping to stumble upon a potential water source. Their journey led them through a dense forest, encountering various species of wildlife. The air was filled with the intermittent sounds of the birds and the rustle of leaves, while the group trudged forward, consumed by fatigue.\n\nSuddenly, a young woman, in the crew, with an innate instinct for detection, stumbled upon a hidden path. As they ventured further, they discovered a concealed fountain, a remnant of their ancestors. The crystal-clear water gushing from the fountain revitalized their spirits, inducing a sense of hope and excitement. The villagers swiftly mobilized to construct a makeshift aqueduct, ensuring a steady flow of water back to their village.\n\nAs the water made its way through the heart of the village, it seemed to breathe new life into the parched land. The once-dreary gardens began to flourish with vibrant colors, and the villagers' faces beamed with gratitude and joy. The village had endured the ordeal through unity and determination, exemplifying the true power of community resilience. Their collective efforts transformed their environment, and as they gazed upon the thriving landscape, they knew that they had overcome adversity together, leaving a lasting legacy for the generations to come.\n\n在一个小乡村，一个和蔼可亲的农民，留着粗糙的胡子，戴着一顶反向的帽子，对植物学有着与生俱来的喜爱，他在自己简陋的花园里照顾着脆弱的花苞和植物。这个农民对自然的真挚热爱，从他轻轻抚摸叶子的方式中就可以看出来，他的脸上泛着温暖的红晕。一条狭窄的小巷，两旁鸣着蟋蟀的声音，通向一片如画的池塘，村民们的孩子偶尔会在那里嬉戏，溅起水花，笑得开心。\n\n然而，这个村子也有自己的困境。持续的干旱给他们的水供应带来了严重的短缺，给社区带来了很大的困扰。村民们聚集在村子的中心，在烈日的严密审视下，讨论当前的紧急情况。身材高大的市长宣布，整个社区必须团结起来，寻求消除这个问题的办法。\n\n为了避免进一步的危机，一群由年轻人和老年人组成的移民决定探险周围的环境，希望能找到一个潜在的水源。他们的旅程带领他们穿越了一片茂密的森林，邂逅了各种各样的野生动物。空气中充满了鸟儿的断断续续的鸣叫声和树叶沙沙作响的声音，而这群人在疲惫中继续前进。\n\n突然，队伍中的一位年轻女子凭借她与生俱来的侦查本能，发现了一条隐藏的小路。当他们继续前进时，他们发现了一个隐藏的喷泉，这是他们祖先留下的遗迹。从喷泉涌出的清澈的水激发了他们的精神，给他们带来了希望和兴奋。村民们迅速行动起来，搭建了一个临时的渠道，确保水稳定地流回他们的村子。\n\n当河水流经村庄中心时，它似乎给这片干枯的土地注入了新的生命。 曾经沉闷的花园开始绽放出生机勃勃的色彩，村民们的脸上洋溢着感激和喜悦。 村民们团结一致、坚韧不拔地经受住了磨难，体现了社区复原力的真正力量。 他们的共同努力改变了他们的环境，当他们注视着欣欣向荣的风景时，他们知道他们一起克服了逆境，为后代留下了持久的遗产 。\n\n## part2:\nIn an era where technology was advancing at a rapid pace, a renowned corporation embarked on a mission to develop an innovative device to enhance communication. The company's headquarters buzzed with excitement as the research team, consisting of top-notch engineers and scientists, convened to brainstorm potential ideas. The chief scientist, an amicable yet assertive individual, would frequently emphasize the importance of discipline, focus, and collaboration.\n\nTheir first prototype, a compact gadget with extraordinary capabilities, allowed users to interact with one another in real-time. The device harnessed the power of cutting-edge infrared technology to transmit voice and video data seamlessly. However, the prototype had its fair share of defects, including short battery life and intermittent connectivity issues. The engineers worked tirelessly to iron out these problems, fueled by their unwavering determination and a shared belief in the project's potential.\n\nMeanwhile, the marketing department was tasked with developing an advertising campaign to create hype around the product launch. They devised a series of advertisements that showcased the device's unique selling points, including its flexibility, wireless connectivity, and user-friendly interface. The marketing team's efforts soon paid off as consumers began to express interest in the product, eagerly anticipating its release.\n\nUnfortunately, the corporation faced a major setback when their rival company accused them of plagiarism, claiming that the device's design infringed on their patents. The allegations prompted a thorough investigation, and the matter was eventually brought before a court of law. The judge, a wise and fair individual, presided over the case, listening intently to both sides' arguments.\n\nIn the end, the court ruled in favor of the defendant, concluding that there was insufficient evidence to support the plaintiff's claims. The verdict was met with a collective sigh of relief from the corporation's employees, who had feared that their hard work would be in vain. The company's reputation remained intact, and they resumed their preparations for the product launch with renewed vigor.\n\nThe device's official release was met with widespread acclaim, as customers praised its intuitive design and advanced features. The corporation's sales skyrocketed, solidifying their position as a dominant player in the tech industry. In the face of adversity, the company had demonstrated resilience and adaptability, qualities that would continue to define their success in the years to come.\n\nThroughout the entire ordeal, the employees had remained united in their pursuit of innovation. Their unwavering commitment to excellence served as a testament to the power of teamwork and perseverance, traits that would shape the company's culture for generations to come.\n\n在一个科技飞速发展的时代，一家著名的公司开始了一项使命，开发一种创新的设备，以加强沟通。 由顶尖工程师和科学家组成的研究团队聚集在一起，对潜在的想法进行头脑风暴，公司总部一片兴奋。 首席科学家是一个友好而自信的人，他经常强调纪律、专注和合作的重要性。  \n\n他们的第一个原型是一个具有非凡功能的小型设备，允许用户与他人实时互动。 该设备利用尖端红外技术的力量无缝传输语音和视频数据。 然而，原型机也存在一些缺陷，包括电池寿命短和间歇性连接问题。 工程师们不知疲倦地工作，以解决这些问题，他们坚定的决心和对项目潜力的共同信念激励着他们。  \n\n与此同时，营销部门的任务是开展一场广告宣传活动，为产品发布造势。 他们设计了一系列广告来展示这款设备的独特卖点，包括它的灵活性、无线连接和用户友好的界面。 营销团队的努力很快得到了回报，因为消费者开始对产品表示兴趣，急切地期待着它的发布。  \n\n不幸的是，该公司遭遇了重大挫折，他们的竞争对手指控他们抄袭，声称该设备的设计侵犯了他们的专利。 这些指控引发了彻底的调查，并最终将此事提交法庭。 法官是一个明智而公正的人，他主持了这个案件，认真地听取了双方的论点。  \n\n最后，法院裁定被告胜诉，认为没有足够的证据支持原告的主张。 这一判决让公司员工集体松了一口气，他们曾担心自己的辛勤工作将付诸东流。 公司的声誉完好无损，他们以新的活力重新开始了产品发布的准备工作。  \n\n这款设备的正式发布受到了广泛的好评，消费者称赞其直观的设计和先进的功能。 该公司的销售额飙升，巩固了他们在科技行业的主导地位。 面对逆境，该公司表现出了韧性和适应能力，这些品质将继续决定他们在未来几年的成功。  \n\n在整个磨难中，员工们始终团结一致，追求创新。 他们对卓越的坚定不移的承诺证明了团队合作和毅力的力量，这些品质将塑造未来几代人的公司文化。\n\n> 考研真的还是蛮苦的\n>\n> GPT太酷了\n","source":"_posts/4.14今天学习量有点大.md","raw":"---\ntitle: 今天学吐了\ndate:  2023-04-17 23:23:00 \ntags:\n- 高等数学\n- 英语\n- 吐槽\ncategories: \n- 笔记\n---\n\n\n\n# 数学\n\n熟练下面公式，复听 积分基础 - 最简单的积分 多种初等变形推以下公式\n\n<!-- more -->\n\n$\\int a^x dx = \\frac{1}{\\ln a} a^x + C$\n$\\int \\tan x dx = -\\ln|\\cos x| + C$\n$\\int \\frac{1}{a^2+x^2} dx = \\frac{1}{a} \\arctan\\frac{x}{a} + C$\n$\\int \\frac{1}{a^2-x^2} dx = \\frac{1}{2a} \\ln\\left|\\frac{a+x}{a-x}\\right| + C$\n$\\int \\frac{1}{\\sqrt{a^2-x^2}} dx = \\arcsin\\frac{x}{a} + C$\n$\\int e^x dx = e^x + C$\n$\\int a^x \\ln a dx = a^x + C$\n$\\int \\log_a x dx = x\\log_a x - x + C$\n$\\int \\sin^n(x) dx = -\\frac{1}{n} \\sin^{n-1}(x) \\cos(x) + \\frac{n-1}{n} \\int \\sin^{n-2}(x) dx$\n$\\int \\cos^n(x) dx = \\frac{1}{n} \\cos^{n-1}(x) \\sin(x) + \\frac{n-1}{n} \\int \\cos^{n-2}(x) dx$\n$\\int \\sin(mx) \\sin(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} - \\frac{\\cos[(m+n)x]}{m+n}\\right]$\n$\\int \\cos(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} + \\frac{\\cos[(m+n)x]}{m+n}\\right]$\n$\\int \\sin(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\sin[(m+n)x]}{m+n} - \\frac{\\sin[(m-n)x]}{m-n}\\right]$\n$\\int \\tan(x) dx = \\ln|\\sec(x)| + C$\n$\\int \\cot(x) dx = \\ln|\\sin(x)| + C$\n$\\int \\sec(x) dx = \\ln|\\sec(x) + \\tan(x)| + C$\n$\\int \\csc(x) dx = \\ln|\\csc(x) - \\cot(x)| + C$\n分部积分法：$\\int u(x) v'(x) dx = u(x) v(x) - \\int u'(x) v(x) dx$\n其中 u(x) 和 v(x) 都是可导的函数。\n\n代换积分法：设 u = g(x) 是 x 的可导函数，y = f(u)，则 $\\int f(g(x))g'(x) dx = \\int f(u) du$\n\n三角函数的和差化积公式：\n$\\sin(A \\pm B) = \\sin A \\cos B \\pm \\cos A \\sin B$\n$\\cos(A \\pm B) = \\cos A \\cos B \\mp \\sin A \\sin B$\n可以用来化简某些三角函数的积分式子。\n# 英语\n## part1:\nIn a small rural village, an amiable peasant, with a coarse beard and a backward cap, had an inherent affection for botany, tending to the fragile buds and plants in his humble garden. The peasant's authentic love for nature was evident in the way he would gently graze the leaves, his face glowing with a warm blush. A narrow lane adorned with a row of cricket sounds, led to the picturesque pond where the inhabitant's children would occasionally play, splashing water and laughing with merry expressions.\n\nNevertheless, the village had its own hardships. The brutal burden of a persistent drought had yielded a deficit in their water supply, causing distress among the community. The inhabitants convened in the village center, under the intense scrutiny of the sun, to discuss the pressing circumstance. The mayor, a man of immense stature, declared that the community must come together and seek a solution to eradicate this problem.\n\nIn a desperate effort to avert further crisis, a group of settlers, comprising of young and old, decided to explore the surroundings, hoping to stumble upon a potential water source. Their journey led them through a dense forest, encountering various species of wildlife. The air was filled with the intermittent sounds of the birds and the rustle of leaves, while the group trudged forward, consumed by fatigue.\n\nSuddenly, a young woman, in the crew, with an innate instinct for detection, stumbled upon a hidden path. As they ventured further, they discovered a concealed fountain, a remnant of their ancestors. The crystal-clear water gushing from the fountain revitalized their spirits, inducing a sense of hope and excitement. The villagers swiftly mobilized to construct a makeshift aqueduct, ensuring a steady flow of water back to their village.\n\nAs the water made its way through the heart of the village, it seemed to breathe new life into the parched land. The once-dreary gardens began to flourish with vibrant colors, and the villagers' faces beamed with gratitude and joy. The village had endured the ordeal through unity and determination, exemplifying the true power of community resilience. Their collective efforts transformed their environment, and as they gazed upon the thriving landscape, they knew that they had overcome adversity together, leaving a lasting legacy for the generations to come.\n\n在一个小乡村，一个和蔼可亲的农民，留着粗糙的胡子，戴着一顶反向的帽子，对植物学有着与生俱来的喜爱，他在自己简陋的花园里照顾着脆弱的花苞和植物。这个农民对自然的真挚热爱，从他轻轻抚摸叶子的方式中就可以看出来，他的脸上泛着温暖的红晕。一条狭窄的小巷，两旁鸣着蟋蟀的声音，通向一片如画的池塘，村民们的孩子偶尔会在那里嬉戏，溅起水花，笑得开心。\n\n然而，这个村子也有自己的困境。持续的干旱给他们的水供应带来了严重的短缺，给社区带来了很大的困扰。村民们聚集在村子的中心，在烈日的严密审视下，讨论当前的紧急情况。身材高大的市长宣布，整个社区必须团结起来，寻求消除这个问题的办法。\n\n为了避免进一步的危机，一群由年轻人和老年人组成的移民决定探险周围的环境，希望能找到一个潜在的水源。他们的旅程带领他们穿越了一片茂密的森林，邂逅了各种各样的野生动物。空气中充满了鸟儿的断断续续的鸣叫声和树叶沙沙作响的声音，而这群人在疲惫中继续前进。\n\n突然，队伍中的一位年轻女子凭借她与生俱来的侦查本能，发现了一条隐藏的小路。当他们继续前进时，他们发现了一个隐藏的喷泉，这是他们祖先留下的遗迹。从喷泉涌出的清澈的水激发了他们的精神，给他们带来了希望和兴奋。村民们迅速行动起来，搭建了一个临时的渠道，确保水稳定地流回他们的村子。\n\n当河水流经村庄中心时，它似乎给这片干枯的土地注入了新的生命。 曾经沉闷的花园开始绽放出生机勃勃的色彩，村民们的脸上洋溢着感激和喜悦。 村民们团结一致、坚韧不拔地经受住了磨难，体现了社区复原力的真正力量。 他们的共同努力改变了他们的环境，当他们注视着欣欣向荣的风景时，他们知道他们一起克服了逆境，为后代留下了持久的遗产 。\n\n## part2:\nIn an era where technology was advancing at a rapid pace, a renowned corporation embarked on a mission to develop an innovative device to enhance communication. The company's headquarters buzzed with excitement as the research team, consisting of top-notch engineers and scientists, convened to brainstorm potential ideas. The chief scientist, an amicable yet assertive individual, would frequently emphasize the importance of discipline, focus, and collaboration.\n\nTheir first prototype, a compact gadget with extraordinary capabilities, allowed users to interact with one another in real-time. The device harnessed the power of cutting-edge infrared technology to transmit voice and video data seamlessly. However, the prototype had its fair share of defects, including short battery life and intermittent connectivity issues. The engineers worked tirelessly to iron out these problems, fueled by their unwavering determination and a shared belief in the project's potential.\n\nMeanwhile, the marketing department was tasked with developing an advertising campaign to create hype around the product launch. They devised a series of advertisements that showcased the device's unique selling points, including its flexibility, wireless connectivity, and user-friendly interface. The marketing team's efforts soon paid off as consumers began to express interest in the product, eagerly anticipating its release.\n\nUnfortunately, the corporation faced a major setback when their rival company accused them of plagiarism, claiming that the device's design infringed on their patents. The allegations prompted a thorough investigation, and the matter was eventually brought before a court of law. The judge, a wise and fair individual, presided over the case, listening intently to both sides' arguments.\n\nIn the end, the court ruled in favor of the defendant, concluding that there was insufficient evidence to support the plaintiff's claims. The verdict was met with a collective sigh of relief from the corporation's employees, who had feared that their hard work would be in vain. The company's reputation remained intact, and they resumed their preparations for the product launch with renewed vigor.\n\nThe device's official release was met with widespread acclaim, as customers praised its intuitive design and advanced features. The corporation's sales skyrocketed, solidifying their position as a dominant player in the tech industry. In the face of adversity, the company had demonstrated resilience and adaptability, qualities that would continue to define their success in the years to come.\n\nThroughout the entire ordeal, the employees had remained united in their pursuit of innovation. Their unwavering commitment to excellence served as a testament to the power of teamwork and perseverance, traits that would shape the company's culture for generations to come.\n\n在一个科技飞速发展的时代，一家著名的公司开始了一项使命，开发一种创新的设备，以加强沟通。 由顶尖工程师和科学家组成的研究团队聚集在一起，对潜在的想法进行头脑风暴，公司总部一片兴奋。 首席科学家是一个友好而自信的人，他经常强调纪律、专注和合作的重要性。  \n\n他们的第一个原型是一个具有非凡功能的小型设备，允许用户与他人实时互动。 该设备利用尖端红外技术的力量无缝传输语音和视频数据。 然而，原型机也存在一些缺陷，包括电池寿命短和间歇性连接问题。 工程师们不知疲倦地工作，以解决这些问题，他们坚定的决心和对项目潜力的共同信念激励着他们。  \n\n与此同时，营销部门的任务是开展一场广告宣传活动，为产品发布造势。 他们设计了一系列广告来展示这款设备的独特卖点，包括它的灵活性、无线连接和用户友好的界面。 营销团队的努力很快得到了回报，因为消费者开始对产品表示兴趣，急切地期待着它的发布。  \n\n不幸的是，该公司遭遇了重大挫折，他们的竞争对手指控他们抄袭，声称该设备的设计侵犯了他们的专利。 这些指控引发了彻底的调查，并最终将此事提交法庭。 法官是一个明智而公正的人，他主持了这个案件，认真地听取了双方的论点。  \n\n最后，法院裁定被告胜诉，认为没有足够的证据支持原告的主张。 这一判决让公司员工集体松了一口气，他们曾担心自己的辛勤工作将付诸东流。 公司的声誉完好无损，他们以新的活力重新开始了产品发布的准备工作。  \n\n这款设备的正式发布受到了广泛的好评，消费者称赞其直观的设计和先进的功能。 该公司的销售额飙升，巩固了他们在科技行业的主导地位。 面对逆境，该公司表现出了韧性和适应能力，这些品质将继续决定他们在未来几年的成功。  \n\n在整个磨难中，员工们始终团结一致，追求创新。 他们对卓越的坚定不移的承诺证明了团队合作和毅力的力量，这些品质将塑造未来几代人的公司文化。\n\n> 考研真的还是蛮苦的\n>\n> GPT太酷了\n","slug":"4.14今天学习量有点大","published":1,"updated":"2023-04-20T10:46:09.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3d0007q05zbkyh3xzs","content":"<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><p>熟练下面公式，复听 积分基础 - 最简单的积分 多种初等变形推以下公式</p>\n<span id=\"more\"></span>\n\n<p>$\\int a^x dx = \\frac{1}{\\ln a} a^x + C$<br>$\\int \\tan x dx = -\\ln|\\cos x| + C$<br>$\\int \\frac{1}{a^2+x^2} dx = \\frac{1}{a} \\arctan\\frac{x}{a} + C$<br>$\\int \\frac{1}{a^2-x^2} dx = \\frac{1}{2a} \\ln\\left|\\frac{a+x}{a-x}\\right| + C$<br>$\\int \\frac{1}{\\sqrt{a^2-x^2}} dx = \\arcsin\\frac{x}{a} + C$<br>$\\int e^x dx = e^x + C$<br>$\\int a^x \\ln a dx = a^x + C$<br>$\\int \\log_a x dx = x\\log_a x - x + C$<br>$\\int \\sin^n(x) dx = -\\frac{1}{n} \\sin^{n-1}(x) \\cos(x) + \\frac{n-1}{n} \\int \\sin^{n-2}(x) dx$<br>$\\int \\cos^n(x) dx = \\frac{1}{n} \\cos^{n-1}(x) \\sin(x) + \\frac{n-1}{n} \\int \\cos^{n-2}(x) dx$<br>$\\int \\sin(mx) \\sin(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} - \\frac{\\cos[(m+n)x]}{m+n}\\right]$<br>$\\int \\cos(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} + \\frac{\\cos[(m+n)x]}{m+n}\\right]$<br>$\\int \\sin(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\sin[(m+n)x]}{m+n} - \\frac{\\sin[(m-n)x]}{m-n}\\right]$<br>$\\int \\tan(x) dx = \\ln|\\sec(x)| + C$<br>$\\int \\cot(x) dx = \\ln|\\sin(x)| + C$<br>$\\int \\sec(x) dx = \\ln|\\sec(x) + \\tan(x)| + C$<br>$\\int \\csc(x) dx = \\ln|\\csc(x) - \\cot(x)| + C$<br>分部积分法：$\\int u(x) v’(x) dx = u(x) v(x) - \\int u’(x) v(x) dx$<br>其中 u(x) 和 v(x) 都是可导的函数。</p>\n<p>代换积分法：设 u = g(x) 是 x 的可导函数，y = f(u)，则 $\\int f(g(x))g’(x) dx = \\int f(u) du$</p>\n<p>三角函数的和差化积公式：<br>$\\sin(A \\pm B) = \\sin A \\cos B \\pm \\cos A \\sin B$<br>$\\cos(A \\pm B) = \\cos A \\cos B \\mp \\sin A \\sin B$<br>可以用来化简某些三角函数的积分式子。</p>\n<h1 id=\"英语\"><a href=\"#英语\" class=\"headerlink\" title=\"英语\"></a>英语</h1><h2 id=\"part1\"><a href=\"#part1\" class=\"headerlink\" title=\"part1:\"></a>part1:</h2><p>In a small rural village, an amiable peasant, with a coarse beard and a backward cap, had an inherent affection for botany, tending to the fragile buds and plants in his humble garden. The peasant’s authentic love for nature was evident in the way he would gently graze the leaves, his face glowing with a warm blush. A narrow lane adorned with a row of cricket sounds, led to the picturesque pond where the inhabitant’s children would occasionally play, splashing water and laughing with merry expressions.</p>\n<p>Nevertheless, the village had its own hardships. The brutal burden of a persistent drought had yielded a deficit in their water supply, causing distress among the community. The inhabitants convened in the village center, under the intense scrutiny of the sun, to discuss the pressing circumstance. The mayor, a man of immense stature, declared that the community must come together and seek a solution to eradicate this problem.</p>\n<p>In a desperate effort to avert further crisis, a group of settlers, comprising of young and old, decided to explore the surroundings, hoping to stumble upon a potential water source. Their journey led them through a dense forest, encountering various species of wildlife. The air was filled with the intermittent sounds of the birds and the rustle of leaves, while the group trudged forward, consumed by fatigue.</p>\n<p>Suddenly, a young woman, in the crew, with an innate instinct for detection, stumbled upon a hidden path. As they ventured further, they discovered a concealed fountain, a remnant of their ancestors. The crystal-clear water gushing from the fountain revitalized their spirits, inducing a sense of hope and excitement. The villagers swiftly mobilized to construct a makeshift aqueduct, ensuring a steady flow of water back to their village.</p>\n<p>As the water made its way through the heart of the village, it seemed to breathe new life into the parched land. The once-dreary gardens began to flourish with vibrant colors, and the villagers’ faces beamed with gratitude and joy. The village had endured the ordeal through unity and determination, exemplifying the true power of community resilience. Their collective efforts transformed their environment, and as they gazed upon the thriving landscape, they knew that they had overcome adversity together, leaving a lasting legacy for the generations to come.</p>\n<p>在一个小乡村，一个和蔼可亲的农民，留着粗糙的胡子，戴着一顶反向的帽子，对植物学有着与生俱来的喜爱，他在自己简陋的花园里照顾着脆弱的花苞和植物。这个农民对自然的真挚热爱，从他轻轻抚摸叶子的方式中就可以看出来，他的脸上泛着温暖的红晕。一条狭窄的小巷，两旁鸣着蟋蟀的声音，通向一片如画的池塘，村民们的孩子偶尔会在那里嬉戏，溅起水花，笑得开心。</p>\n<p>然而，这个村子也有自己的困境。持续的干旱给他们的水供应带来了严重的短缺，给社区带来了很大的困扰。村民们聚集在村子的中心，在烈日的严密审视下，讨论当前的紧急情况。身材高大的市长宣布，整个社区必须团结起来，寻求消除这个问题的办法。</p>\n<p>为了避免进一步的危机，一群由年轻人和老年人组成的移民决定探险周围的环境，希望能找到一个潜在的水源。他们的旅程带领他们穿越了一片茂密的森林，邂逅了各种各样的野生动物。空气中充满了鸟儿的断断续续的鸣叫声和树叶沙沙作响的声音，而这群人在疲惫中继续前进。</p>\n<p>突然，队伍中的一位年轻女子凭借她与生俱来的侦查本能，发现了一条隐藏的小路。当他们继续前进时，他们发现了一个隐藏的喷泉，这是他们祖先留下的遗迹。从喷泉涌出的清澈的水激发了他们的精神，给他们带来了希望和兴奋。村民们迅速行动起来，搭建了一个临时的渠道，确保水稳定地流回他们的村子。</p>\n<p>当河水流经村庄中心时，它似乎给这片干枯的土地注入了新的生命。 曾经沉闷的花园开始绽放出生机勃勃的色彩，村民们的脸上洋溢着感激和喜悦。 村民们团结一致、坚韧不拔地经受住了磨难，体现了社区复原力的真正力量。 他们的共同努力改变了他们的环境，当他们注视着欣欣向荣的风景时，他们知道他们一起克服了逆境，为后代留下了持久的遗产 。</p>\n<h2 id=\"part2\"><a href=\"#part2\" class=\"headerlink\" title=\"part2:\"></a>part2:</h2><p>In an era where technology was advancing at a rapid pace, a renowned corporation embarked on a mission to develop an innovative device to enhance communication. The company’s headquarters buzzed with excitement as the research team, consisting of top-notch engineers and scientists, convened to brainstorm potential ideas. The chief scientist, an amicable yet assertive individual, would frequently emphasize the importance of discipline, focus, and collaboration.</p>\n<p>Their first prototype, a compact gadget with extraordinary capabilities, allowed users to interact with one another in real-time. The device harnessed the power of cutting-edge infrared technology to transmit voice and video data seamlessly. However, the prototype had its fair share of defects, including short battery life and intermittent connectivity issues. The engineers worked tirelessly to iron out these problems, fueled by their unwavering determination and a shared belief in the project’s potential.</p>\n<p>Meanwhile, the marketing department was tasked with developing an advertising campaign to create hype around the product launch. They devised a series of advertisements that showcased the device’s unique selling points, including its flexibility, wireless connectivity, and user-friendly interface. The marketing team’s efforts soon paid off as consumers began to express interest in the product, eagerly anticipating its release.</p>\n<p>Unfortunately, the corporation faced a major setback when their rival company accused them of plagiarism, claiming that the device’s design infringed on their patents. The allegations prompted a thorough investigation, and the matter was eventually brought before a court of law. The judge, a wise and fair individual, presided over the case, listening intently to both sides’ arguments.</p>\n<p>In the end, the court ruled in favor of the defendant, concluding that there was insufficient evidence to support the plaintiff’s claims. The verdict was met with a collective sigh of relief from the corporation’s employees, who had feared that their hard work would be in vain. The company’s reputation remained intact, and they resumed their preparations for the product launch with renewed vigor.</p>\n<p>The device’s official release was met with widespread acclaim, as customers praised its intuitive design and advanced features. The corporation’s sales skyrocketed, solidifying their position as a dominant player in the tech industry. In the face of adversity, the company had demonstrated resilience and adaptability, qualities that would continue to define their success in the years to come.</p>\n<p>Throughout the entire ordeal, the employees had remained united in their pursuit of innovation. Their unwavering commitment to excellence served as a testament to the power of teamwork and perseverance, traits that would shape the company’s culture for generations to come.</p>\n<p>在一个科技飞速发展的时代，一家著名的公司开始了一项使命，开发一种创新的设备，以加强沟通。 由顶尖工程师和科学家组成的研究团队聚集在一起，对潜在的想法进行头脑风暴，公司总部一片兴奋。 首席科学家是一个友好而自信的人，他经常强调纪律、专注和合作的重要性。  </p>\n<p>他们的第一个原型是一个具有非凡功能的小型设备，允许用户与他人实时互动。 该设备利用尖端红外技术的力量无缝传输语音和视频数据。 然而，原型机也存在一些缺陷，包括电池寿命短和间歇性连接问题。 工程师们不知疲倦地工作，以解决这些问题，他们坚定的决心和对项目潜力的共同信念激励着他们。  </p>\n<p>与此同时，营销部门的任务是开展一场广告宣传活动，为产品发布造势。 他们设计了一系列广告来展示这款设备的独特卖点，包括它的灵活性、无线连接和用户友好的界面。 营销团队的努力很快得到了回报，因为消费者开始对产品表示兴趣，急切地期待着它的发布。  </p>\n<p>不幸的是，该公司遭遇了重大挫折，他们的竞争对手指控他们抄袭，声称该设备的设计侵犯了他们的专利。 这些指控引发了彻底的调查，并最终将此事提交法庭。 法官是一个明智而公正的人，他主持了这个案件，认真地听取了双方的论点。  </p>\n<p>最后，法院裁定被告胜诉，认为没有足够的证据支持原告的主张。 这一判决让公司员工集体松了一口气，他们曾担心自己的辛勤工作将付诸东流。 公司的声誉完好无损，他们以新的活力重新开始了产品发布的准备工作。  </p>\n<p>这款设备的正式发布受到了广泛的好评，消费者称赞其直观的设计和先进的功能。 该公司的销售额飙升，巩固了他们在科技行业的主导地位。 面对逆境，该公司表现出了韧性和适应能力，这些品质将继续决定他们在未来几年的成功。  </p>\n<p>在整个磨难中，员工们始终团结一致，追求创新。 他们对卓越的坚定不移的承诺证明了团队合作和毅力的力量，这些品质将塑造未来几代人的公司文化。</p>\n<blockquote>\n<p>考研真的还是蛮苦的</p>\n<p>GPT太酷了</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><p>熟练下面公式，复听 积分基础 - 最简单的积分 多种初等变形推以下公式</p>","more":"<p>$\\int a^x dx = \\frac{1}{\\ln a} a^x + C$<br>$\\int \\tan x dx = -\\ln|\\cos x| + C$<br>$\\int \\frac{1}{a^2+x^2} dx = \\frac{1}{a} \\arctan\\frac{x}{a} + C$<br>$\\int \\frac{1}{a^2-x^2} dx = \\frac{1}{2a} \\ln\\left|\\frac{a+x}{a-x}\\right| + C$<br>$\\int \\frac{1}{\\sqrt{a^2-x^2}} dx = \\arcsin\\frac{x}{a} + C$<br>$\\int e^x dx = e^x + C$<br>$\\int a^x \\ln a dx = a^x + C$<br>$\\int \\log_a x dx = x\\log_a x - x + C$<br>$\\int \\sin^n(x) dx = -\\frac{1}{n} \\sin^{n-1}(x) \\cos(x) + \\frac{n-1}{n} \\int \\sin^{n-2}(x) dx$<br>$\\int \\cos^n(x) dx = \\frac{1}{n} \\cos^{n-1}(x) \\sin(x) + \\frac{n-1}{n} \\int \\cos^{n-2}(x) dx$<br>$\\int \\sin(mx) \\sin(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} - \\frac{\\cos[(m+n)x]}{m+n}\\right]$<br>$\\int \\cos(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\cos[(m-n)x]}{m-n} + \\frac{\\cos[(m+n)x]}{m+n}\\right]$<br>$\\int \\sin(mx) \\cos(nx) dx = \\frac{1}{2} \\left[\\frac{\\sin[(m+n)x]}{m+n} - \\frac{\\sin[(m-n)x]}{m-n}\\right]$<br>$\\int \\tan(x) dx = \\ln|\\sec(x)| + C$<br>$\\int \\cot(x) dx = \\ln|\\sin(x)| + C$<br>$\\int \\sec(x) dx = \\ln|\\sec(x) + \\tan(x)| + C$<br>$\\int \\csc(x) dx = \\ln|\\csc(x) - \\cot(x)| + C$<br>分部积分法：$\\int u(x) v’(x) dx = u(x) v(x) - \\int u’(x) v(x) dx$<br>其中 u(x) 和 v(x) 都是可导的函数。</p>\n<p>代换积分法：设 u = g(x) 是 x 的可导函数，y = f(u)，则 $\\int f(g(x))g’(x) dx = \\int f(u) du$</p>\n<p>三角函数的和差化积公式：<br>$\\sin(A \\pm B) = \\sin A \\cos B \\pm \\cos A \\sin B$<br>$\\cos(A \\pm B) = \\cos A \\cos B \\mp \\sin A \\sin B$<br>可以用来化简某些三角函数的积分式子。</p>\n<h1 id=\"英语\"><a href=\"#英语\" class=\"headerlink\" title=\"英语\"></a>英语</h1><h2 id=\"part1\"><a href=\"#part1\" class=\"headerlink\" title=\"part1:\"></a>part1:</h2><p>In a small rural village, an amiable peasant, with a coarse beard and a backward cap, had an inherent affection for botany, tending to the fragile buds and plants in his humble garden. The peasant’s authentic love for nature was evident in the way he would gently graze the leaves, his face glowing with a warm blush. A narrow lane adorned with a row of cricket sounds, led to the picturesque pond where the inhabitant’s children would occasionally play, splashing water and laughing with merry expressions.</p>\n<p>Nevertheless, the village had its own hardships. The brutal burden of a persistent drought had yielded a deficit in their water supply, causing distress among the community. The inhabitants convened in the village center, under the intense scrutiny of the sun, to discuss the pressing circumstance. The mayor, a man of immense stature, declared that the community must come together and seek a solution to eradicate this problem.</p>\n<p>In a desperate effort to avert further crisis, a group of settlers, comprising of young and old, decided to explore the surroundings, hoping to stumble upon a potential water source. Their journey led them through a dense forest, encountering various species of wildlife. The air was filled with the intermittent sounds of the birds and the rustle of leaves, while the group trudged forward, consumed by fatigue.</p>\n<p>Suddenly, a young woman, in the crew, with an innate instinct for detection, stumbled upon a hidden path. As they ventured further, they discovered a concealed fountain, a remnant of their ancestors. The crystal-clear water gushing from the fountain revitalized their spirits, inducing a sense of hope and excitement. The villagers swiftly mobilized to construct a makeshift aqueduct, ensuring a steady flow of water back to their village.</p>\n<p>As the water made its way through the heart of the village, it seemed to breathe new life into the parched land. The once-dreary gardens began to flourish with vibrant colors, and the villagers’ faces beamed with gratitude and joy. The village had endured the ordeal through unity and determination, exemplifying the true power of community resilience. Their collective efforts transformed their environment, and as they gazed upon the thriving landscape, they knew that they had overcome adversity together, leaving a lasting legacy for the generations to come.</p>\n<p>在一个小乡村，一个和蔼可亲的农民，留着粗糙的胡子，戴着一顶反向的帽子，对植物学有着与生俱来的喜爱，他在自己简陋的花园里照顾着脆弱的花苞和植物。这个农民对自然的真挚热爱，从他轻轻抚摸叶子的方式中就可以看出来，他的脸上泛着温暖的红晕。一条狭窄的小巷，两旁鸣着蟋蟀的声音，通向一片如画的池塘，村民们的孩子偶尔会在那里嬉戏，溅起水花，笑得开心。</p>\n<p>然而，这个村子也有自己的困境。持续的干旱给他们的水供应带来了严重的短缺，给社区带来了很大的困扰。村民们聚集在村子的中心，在烈日的严密审视下，讨论当前的紧急情况。身材高大的市长宣布，整个社区必须团结起来，寻求消除这个问题的办法。</p>\n<p>为了避免进一步的危机，一群由年轻人和老年人组成的移民决定探险周围的环境，希望能找到一个潜在的水源。他们的旅程带领他们穿越了一片茂密的森林，邂逅了各种各样的野生动物。空气中充满了鸟儿的断断续续的鸣叫声和树叶沙沙作响的声音，而这群人在疲惫中继续前进。</p>\n<p>突然，队伍中的一位年轻女子凭借她与生俱来的侦查本能，发现了一条隐藏的小路。当他们继续前进时，他们发现了一个隐藏的喷泉，这是他们祖先留下的遗迹。从喷泉涌出的清澈的水激发了他们的精神，给他们带来了希望和兴奋。村民们迅速行动起来，搭建了一个临时的渠道，确保水稳定地流回他们的村子。</p>\n<p>当河水流经村庄中心时，它似乎给这片干枯的土地注入了新的生命。 曾经沉闷的花园开始绽放出生机勃勃的色彩，村民们的脸上洋溢着感激和喜悦。 村民们团结一致、坚韧不拔地经受住了磨难，体现了社区复原力的真正力量。 他们的共同努力改变了他们的环境，当他们注视着欣欣向荣的风景时，他们知道他们一起克服了逆境，为后代留下了持久的遗产 。</p>\n<h2 id=\"part2\"><a href=\"#part2\" class=\"headerlink\" title=\"part2:\"></a>part2:</h2><p>In an era where technology was advancing at a rapid pace, a renowned corporation embarked on a mission to develop an innovative device to enhance communication. The company’s headquarters buzzed with excitement as the research team, consisting of top-notch engineers and scientists, convened to brainstorm potential ideas. The chief scientist, an amicable yet assertive individual, would frequently emphasize the importance of discipline, focus, and collaboration.</p>\n<p>Their first prototype, a compact gadget with extraordinary capabilities, allowed users to interact with one another in real-time. The device harnessed the power of cutting-edge infrared technology to transmit voice and video data seamlessly. However, the prototype had its fair share of defects, including short battery life and intermittent connectivity issues. The engineers worked tirelessly to iron out these problems, fueled by their unwavering determination and a shared belief in the project’s potential.</p>\n<p>Meanwhile, the marketing department was tasked with developing an advertising campaign to create hype around the product launch. They devised a series of advertisements that showcased the device’s unique selling points, including its flexibility, wireless connectivity, and user-friendly interface. The marketing team’s efforts soon paid off as consumers began to express interest in the product, eagerly anticipating its release.</p>\n<p>Unfortunately, the corporation faced a major setback when their rival company accused them of plagiarism, claiming that the device’s design infringed on their patents. The allegations prompted a thorough investigation, and the matter was eventually brought before a court of law. The judge, a wise and fair individual, presided over the case, listening intently to both sides’ arguments.</p>\n<p>In the end, the court ruled in favor of the defendant, concluding that there was insufficient evidence to support the plaintiff’s claims. The verdict was met with a collective sigh of relief from the corporation’s employees, who had feared that their hard work would be in vain. The company’s reputation remained intact, and they resumed their preparations for the product launch with renewed vigor.</p>\n<p>The device’s official release was met with widespread acclaim, as customers praised its intuitive design and advanced features. The corporation’s sales skyrocketed, solidifying their position as a dominant player in the tech industry. In the face of adversity, the company had demonstrated resilience and adaptability, qualities that would continue to define their success in the years to come.</p>\n<p>Throughout the entire ordeal, the employees had remained united in their pursuit of innovation. Their unwavering commitment to excellence served as a testament to the power of teamwork and perseverance, traits that would shape the company’s culture for generations to come.</p>\n<p>在一个科技飞速发展的时代，一家著名的公司开始了一项使命，开发一种创新的设备，以加强沟通。 由顶尖工程师和科学家组成的研究团队聚集在一起，对潜在的想法进行头脑风暴，公司总部一片兴奋。 首席科学家是一个友好而自信的人，他经常强调纪律、专注和合作的重要性。  </p>\n<p>他们的第一个原型是一个具有非凡功能的小型设备，允许用户与他人实时互动。 该设备利用尖端红外技术的力量无缝传输语音和视频数据。 然而，原型机也存在一些缺陷，包括电池寿命短和间歇性连接问题。 工程师们不知疲倦地工作，以解决这些问题，他们坚定的决心和对项目潜力的共同信念激励着他们。  </p>\n<p>与此同时，营销部门的任务是开展一场广告宣传活动，为产品发布造势。 他们设计了一系列广告来展示这款设备的独特卖点，包括它的灵活性、无线连接和用户友好的界面。 营销团队的努力很快得到了回报，因为消费者开始对产品表示兴趣，急切地期待着它的发布。  </p>\n<p>不幸的是，该公司遭遇了重大挫折，他们的竞争对手指控他们抄袭，声称该设备的设计侵犯了他们的专利。 这些指控引发了彻底的调查，并最终将此事提交法庭。 法官是一个明智而公正的人，他主持了这个案件，认真地听取了双方的论点。  </p>\n<p>最后，法院裁定被告胜诉，认为没有足够的证据支持原告的主张。 这一判决让公司员工集体松了一口气，他们曾担心自己的辛勤工作将付诸东流。 公司的声誉完好无损，他们以新的活力重新开始了产品发布的准备工作。  </p>\n<p>这款设备的正式发布受到了广泛的好评，消费者称赞其直观的设计和先进的功能。 该公司的销售额飙升，巩固了他们在科技行业的主导地位。 面对逆境，该公司表现出了韧性和适应能力，这些品质将继续决定他们在未来几年的成功。  </p>\n<p>在整个磨难中，员工们始终团结一致，追求创新。 他们对卓越的坚定不移的承诺证明了团队合作和毅力的力量，这些品质将塑造未来几代人的公司文化。</p>\n<blockquote>\n<p>考研真的还是蛮苦的</p>\n<p>GPT太酷了</p>\n</blockquote>"},{"title":"TypeScript开发游戏学习笔记","date":"2022-05-21T02:15:56.000Z","_content":"\n### “烂码”\n\n看之前写的杆踪球影中NPC这段代码可能确实存在一些潜在的问题。其中可能比较明显的是，NPC在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\n\n此外，NPC移动的速度也受到了限制，可能会导致玩家在进行游戏时感到不自然。现在觉得最好的做法是将代码进行重构，尽量将每个状态下的行为分开处理，并考虑到玩家在游戏中的体验。\n<!-- more -->\n\n### 截取某段\n\n```typescript\nelse if (this.stihs.chapter === Chapter.Total) {\n  if (this === this.stihs.redCharacters[5] || this === this.stihs.blueCharacters[5]) {\n    if (!this.locked) {\n      if (!this.isAutoMoving) {\n        const pos = this.node.getPosition();\n        const rand = 1 - 2 * randomRangeInt(0, 2);\n        pos.x += rand * 0.5;\n        if (-2.5 <= pos.x && pos.x <=2.5) {\n          this.isAutoMoving = true;\n          tween(this.node)\n          .to(0.5, { position: pos }, { easing: \"linear\" })\n          .call(() => {\n            this.isAutoMoving = false;\n          })\n          .start();\n        }\n      }\n    }\n  } else {\n    if (!this.locked) {\n      if (this.stihs.player?.gamePad) {\n        if (this.stihs.player.gamePad.dir.length() > 0.5) {\n          const skeletalAnimation = this.getComponent(\n            SkeletalAnimation\n          ) as SkeletalAnimation;\n          const animState1 = skeletalAnimation.getState(\"起步\");\n          const animState2 = skeletalAnimation.getState(\"溜冰\");\n          const animState3 = skeletalAnimation.getState(\"急停\");\n          if (!animState1.isPlaying && !animState2.isPlaying) {\n            skeletalAnimation.play(\"起步\");\n          }\n          const rigidBody = this.getComponent(RigidBody) as RigidBody;\n          let { x, y } = this.stihs.player.gamePad.dir;\n          let angle = Math.atan2(y, x);\n          const delta = Math.random() * Math.PI - Math.PI / 2;\n          angle += delta;\n          [x, y] = [Math.cos(angle), Math.sin(angle)];\n          rigidBody.applyForce(\n            new Vec3(\n              x * 5000 * deltaTime,\n              0,\n              y * -5000 * deltaTime\n            )\n          );\n          let v: Vec3 = new Vec3(0, 0, 0);\n          rigidBody.getLinearVelocity(v);\n          let vLen = v.length();\n          if (vLen > 7) {\n            v.divide(\n              new Vec3(1, 1, 1).multiplyScalar(vLen)\n            ).multiplyScalar(7);\n            vLen = 7;\n            rigidBody.setLinearVelocity(v);\n            if (animState1.isPlaying) {\n              animState1.stop();\n              skeletalAnimation.crossFade(\"溜冰\", 0.3);\n              animState2.speed = 1;\n            }\n          }\n          if (!this.facedTarget) {\n            this.dir = new Vec3(v.x / vLen, v.y / vLen, v.z / vLen);\n          }\n        } else {\n          const skeletalAnimation = this.getComponent(\n            SkeletalAnimation\n          ) as SkeletalAnimation;\n          const animState1 = skeletalAnimation.getState(\"起步\");\n          const animState2 = skeletalAnimation.getState(\"溜冰\");\n          const animState3 = skeletalAnimation.getState(\"急停\");\n          if (animState1.isPlaying) {\n            animState1.setTime(0);\n            animState1.stop();\n          }\n          if (animState2.isPlaying) {\n            skeletalAnimation.play(\"急停\");\n            animState3.repeatCount = 1;\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n### 可以使用曲线函数调整NPC的移动速度：\n\n```typescript\nphpCopy code\n// 定义速度曲线函数\nconst speedCurve = new cc.AnimationCurve([\n  { time: 0, value: 0 },\n  { time: 0.25, value: 0.5 },\n  { time: 0.5, value: 1 },\n  { time: 0.75, value: 0.5 },\n  { time: 1, value: 0 }\n]);\n\n// 在 update 方法中使用曲线函数调整移动速度\nupdate(deltaTime: number) {\n  if (this.isAutoMoving && this.stihs) {\n    const speed = speedCurve.evaluate(this.elapsedTime / this.moveDuration) * this.maxSpeed;\n    // 使用 speed 进行移动\n  }\n}\n```\n\n### 再添加物理效果：\n\n```typescript\nkotlinCopy code\n// 定义 NPC 的物理属性\nconst mass = 1;\nconst friction = 0.5;\nconst restitution = 0.2;\n\n// 在初始化方法中为 NPC 添加刚体组件\nonLoad() {\n  const rigidbody = this.node.addComponent(cc.RigidBody);\n  rigidbody.type = cc.RigidBodyType.Dynamic;\n  rigidbody.gravityScale = 0;\n  rigidbody.mass = mass;\n  rigidbody.linearDamping = friction;\n  rigidbody.angularDamping = friction;\n  rigidbody.restitution = restitution;\n}\n\n// 在 update 方法中更新 NPC 的位置\nupdate(deltaTime: number) {\n  if (this.isAutoMoving && this.stihs) {\n    const velocity = cc.v2(this.moveDirection).normalize().mul(this.maxSpeed);\n    const force = velocity.mul(mass);\n    const rigidbody = this.node.getComponent(cc.RigidBody);\n    rigidbody.applyForceToCenter(force);\n  }\n}\n```\n\n### 然后解决在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\n\n直接继承 `Chapter.Shoot` 状态下的行为,将 `Chapter.Shoot` 状态下的行为提取成一个单独的方法或者函数，并将其放在一个可重用的地方。然后在需要使用这个行为的地方，调用该方法或函数即可。\n\n```typescript\nkotlinCopy code\nclass NPC extends Character {\n  private isAutoMoving: boolean = false;\n  private stihs: Stihs | null = null;\n\n  // ...\n\n  private moveRandomlyWithinRange(range: number) {\n    // 移动到随机的位置\n  }\n\n  private playSkatingAnimation(speed: number) {\n    // 播放溜冰动画\n  }\n\n  private updateBlockChapter() {\n    this.playSkatingAnimation(1.5); // 播放溜冰动画，速度为 1.5\n  }\n\n  private updateShootChapter() {\n    if (!this.isAutoMoving) {\n      this.isAutoMoving = true;\n      this.moveRandomlyWithinRange(10); // 在范围内随机移动\n    }\n  }\n\n  private updateTotalChapter() {\n    if (this instanceof SpecificNPC) {\n      this.updateShootChapter(); // 直接继承 Chapter.Shoot 状态下的行为\n    } else {\n      // 移动方向由玩家游戏手柄输入的方向确定，加上一些小的随机偏差\n      // 移动速度受到限制，超过一定速度会切换到溜冰动画\n      this.playSkatingAnimation(1.2);\n      // ...\n    }\n  }\n\n  public update() {\n    if (this.stihs === null || this.isLocked) {\n      return;\n    }\n\n    switch (this.stihs.currentChapter) {\n      case Chapter.Block:\n        this.updateBlockChapter();\n        break;\n      case Chapter.Shoot:\n        this.updateShootChapter();\n        break;\n      case Chapter.Total:\n        this.updateTotalChapter();\n        break;\n    }\n  }\n}\n```\n\n到此差不多了\n","source":"_posts/NPC代码分析.md","raw":"---\ntitle: TypeScript开发游戏学习笔记\ndate: 2022-05-21 10:15:56\ntags:\n  - TypeScript\n  - 游戏开发\n  - 前端开发\n  - 编程语言\n  - Web开发\n  - 游戏设计\n  - 前端框架\n  - 工具\n  - 学习笔记\n  - 教程\n  - 杆踪球影冰球游戏\ncategories:\n- 笔记\n---\n\n### “烂码”\n\n看之前写的杆踪球影中NPC这段代码可能确实存在一些潜在的问题。其中可能比较明显的是，NPC在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\n\n此外，NPC移动的速度也受到了限制，可能会导致玩家在进行游戏时感到不自然。现在觉得最好的做法是将代码进行重构，尽量将每个状态下的行为分开处理，并考虑到玩家在游戏中的体验。\n<!-- more -->\n\n### 截取某段\n\n```typescript\nelse if (this.stihs.chapter === Chapter.Total) {\n  if (this === this.stihs.redCharacters[5] || this === this.stihs.blueCharacters[5]) {\n    if (!this.locked) {\n      if (!this.isAutoMoving) {\n        const pos = this.node.getPosition();\n        const rand = 1 - 2 * randomRangeInt(0, 2);\n        pos.x += rand * 0.5;\n        if (-2.5 <= pos.x && pos.x <=2.5) {\n          this.isAutoMoving = true;\n          tween(this.node)\n          .to(0.5, { position: pos }, { easing: \"linear\" })\n          .call(() => {\n            this.isAutoMoving = false;\n          })\n          .start();\n        }\n      }\n    }\n  } else {\n    if (!this.locked) {\n      if (this.stihs.player?.gamePad) {\n        if (this.stihs.player.gamePad.dir.length() > 0.5) {\n          const skeletalAnimation = this.getComponent(\n            SkeletalAnimation\n          ) as SkeletalAnimation;\n          const animState1 = skeletalAnimation.getState(\"起步\");\n          const animState2 = skeletalAnimation.getState(\"溜冰\");\n          const animState3 = skeletalAnimation.getState(\"急停\");\n          if (!animState1.isPlaying && !animState2.isPlaying) {\n            skeletalAnimation.play(\"起步\");\n          }\n          const rigidBody = this.getComponent(RigidBody) as RigidBody;\n          let { x, y } = this.stihs.player.gamePad.dir;\n          let angle = Math.atan2(y, x);\n          const delta = Math.random() * Math.PI - Math.PI / 2;\n          angle += delta;\n          [x, y] = [Math.cos(angle), Math.sin(angle)];\n          rigidBody.applyForce(\n            new Vec3(\n              x * 5000 * deltaTime,\n              0,\n              y * -5000 * deltaTime\n            )\n          );\n          let v: Vec3 = new Vec3(0, 0, 0);\n          rigidBody.getLinearVelocity(v);\n          let vLen = v.length();\n          if (vLen > 7) {\n            v.divide(\n              new Vec3(1, 1, 1).multiplyScalar(vLen)\n            ).multiplyScalar(7);\n            vLen = 7;\n            rigidBody.setLinearVelocity(v);\n            if (animState1.isPlaying) {\n              animState1.stop();\n              skeletalAnimation.crossFade(\"溜冰\", 0.3);\n              animState2.speed = 1;\n            }\n          }\n          if (!this.facedTarget) {\n            this.dir = new Vec3(v.x / vLen, v.y / vLen, v.z / vLen);\n          }\n        } else {\n          const skeletalAnimation = this.getComponent(\n            SkeletalAnimation\n          ) as SkeletalAnimation;\n          const animState1 = skeletalAnimation.getState(\"起步\");\n          const animState2 = skeletalAnimation.getState(\"溜冰\");\n          const animState3 = skeletalAnimation.getState(\"急停\");\n          if (animState1.isPlaying) {\n            animState1.setTime(0);\n            animState1.stop();\n          }\n          if (animState2.isPlaying) {\n            skeletalAnimation.play(\"急停\");\n            animState3.repeatCount = 1;\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n### 可以使用曲线函数调整NPC的移动速度：\n\n```typescript\nphpCopy code\n// 定义速度曲线函数\nconst speedCurve = new cc.AnimationCurve([\n  { time: 0, value: 0 },\n  { time: 0.25, value: 0.5 },\n  { time: 0.5, value: 1 },\n  { time: 0.75, value: 0.5 },\n  { time: 1, value: 0 }\n]);\n\n// 在 update 方法中使用曲线函数调整移动速度\nupdate(deltaTime: number) {\n  if (this.isAutoMoving && this.stihs) {\n    const speed = speedCurve.evaluate(this.elapsedTime / this.moveDuration) * this.maxSpeed;\n    // 使用 speed 进行移动\n  }\n}\n```\n\n### 再添加物理效果：\n\n```typescript\nkotlinCopy code\n// 定义 NPC 的物理属性\nconst mass = 1;\nconst friction = 0.5;\nconst restitution = 0.2;\n\n// 在初始化方法中为 NPC 添加刚体组件\nonLoad() {\n  const rigidbody = this.node.addComponent(cc.RigidBody);\n  rigidbody.type = cc.RigidBodyType.Dynamic;\n  rigidbody.gravityScale = 0;\n  rigidbody.mass = mass;\n  rigidbody.linearDamping = friction;\n  rigidbody.angularDamping = friction;\n  rigidbody.restitution = restitution;\n}\n\n// 在 update 方法中更新 NPC 的位置\nupdate(deltaTime: number) {\n  if (this.isAutoMoving && this.stihs) {\n    const velocity = cc.v2(this.moveDirection).normalize().mul(this.maxSpeed);\n    const force = velocity.mul(mass);\n    const rigidbody = this.node.getComponent(cc.RigidBody);\n    rigidbody.applyForceToCenter(force);\n  }\n}\n```\n\n### 然后解决在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\n\n直接继承 `Chapter.Shoot` 状态下的行为,将 `Chapter.Shoot` 状态下的行为提取成一个单独的方法或者函数，并将其放在一个可重用的地方。然后在需要使用这个行为的地方，调用该方法或函数即可。\n\n```typescript\nkotlinCopy code\nclass NPC extends Character {\n  private isAutoMoving: boolean = false;\n  private stihs: Stihs | null = null;\n\n  // ...\n\n  private moveRandomlyWithinRange(range: number) {\n    // 移动到随机的位置\n  }\n\n  private playSkatingAnimation(speed: number) {\n    // 播放溜冰动画\n  }\n\n  private updateBlockChapter() {\n    this.playSkatingAnimation(1.5); // 播放溜冰动画，速度为 1.5\n  }\n\n  private updateShootChapter() {\n    if (!this.isAutoMoving) {\n      this.isAutoMoving = true;\n      this.moveRandomlyWithinRange(10); // 在范围内随机移动\n    }\n  }\n\n  private updateTotalChapter() {\n    if (this instanceof SpecificNPC) {\n      this.updateShootChapter(); // 直接继承 Chapter.Shoot 状态下的行为\n    } else {\n      // 移动方向由玩家游戏手柄输入的方向确定，加上一些小的随机偏差\n      // 移动速度受到限制，超过一定速度会切换到溜冰动画\n      this.playSkatingAnimation(1.2);\n      // ...\n    }\n  }\n\n  public update() {\n    if (this.stihs === null || this.isLocked) {\n      return;\n    }\n\n    switch (this.stihs.currentChapter) {\n      case Chapter.Block:\n        this.updateBlockChapter();\n        break;\n      case Chapter.Shoot:\n        this.updateShootChapter();\n        break;\n      case Chapter.Total:\n        this.updateTotalChapter();\n        break;\n    }\n  }\n}\n```\n\n到此差不多了\n","slug":"NPC代码分析","published":1,"updated":"2023-04-19T12:02:39.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3g0009q05zd70q73o7","content":"<h3 id=\"“烂码”\"><a href=\"#“烂码”\" class=\"headerlink\" title=\"“烂码”\"></a>“烂码”</h3><p>看之前写的杆踪球影中NPC这段代码可能确实存在一些潜在的问题。其中可能比较明显的是，NPC在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。</p>\n<p>此外，NPC移动的速度也受到了限制，可能会导致玩家在进行游戏时感到不自然。现在觉得最好的做法是将代码进行重构，尽量将每个状态下的行为分开处理，并考虑到玩家在游戏中的体验。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"截取某段\"><a href=\"#截取某段\" class=\"headerlink\" title=\"截取某段\"></a>截取某段</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">chapter</span> === <span class=\"title class_\">Chapter</span>.<span class=\"property\">Total</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">redCharacters</span>[<span class=\"number\">5</span>] || <span class=\"variable language_\">this</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">blueCharacters</span>[<span class=\"number\">5</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">locked</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pos = <span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">getPosition</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rand = <span class=\"number\">1</span> - <span class=\"number\">2</span> * <span class=\"title function_\">randomRangeInt</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        pos.<span class=\"property\">x</span> += rand * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (-<span class=\"number\">2.5</span> &lt;= pos.<span class=\"property\">x</span> &amp;&amp; pos.<span class=\"property\">x</span> &lt;=<span class=\"number\">2.5</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"title function_\">tween</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">node</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">to</span>(<span class=\"number\">0.5</span>, &#123; <span class=\"attr\">position</span>: pos &#125;, &#123; <span class=\"attr\">easing</span>: <span class=\"string\">&quot;linear&quot;</span> &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">call</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">start</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">locked</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">player</span>?.<span class=\"property\">gamePad</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">player</span>.<span class=\"property\">gamePad</span>.<span class=\"property\">dir</span>.<span class=\"title function_\">length</span>() &gt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> skeletalAnimation = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getComponent</span>(</span><br><span class=\"line\">            <span class=\"title class_\">SkeletalAnimation</span></span><br><span class=\"line\">          ) <span class=\"keyword\">as</span> <span class=\"title class_\">SkeletalAnimation</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState1 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;起步&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState2 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;溜冰&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState3 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;急停&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!animState1.<span class=\"property\">isPlaying</span> &amp;&amp; !animState2.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">            skeletalAnimation.<span class=\"title function_\">play</span>(<span class=\"string\">&quot;起步&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> rigidBody = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getComponent</span>(<span class=\"title class_\">RigidBody</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">RigidBody</span>;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; x, y &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">player</span>.<span class=\"property\">gamePad</span>.<span class=\"property\">dir</span>;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> angle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(y, x);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> delta = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> - <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">          angle += delta;</span><br><span class=\"line\">          [x, y] = [<span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(angle), <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(angle)];</span><br><span class=\"line\">          rigidBody.<span class=\"title function_\">applyForce</span>(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(</span><br><span class=\"line\">              x * <span class=\"number\">5000</span> * deltaTime,</span><br><span class=\"line\">              <span class=\"number\">0</span>,</span><br><span class=\"line\">              y * -<span class=\"number\">5000</span> * deltaTime</span><br><span class=\"line\">            )</span><br><span class=\"line\">          );</span><br><span class=\"line\">          <span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"title class_\">Vec3</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          rigidBody.<span class=\"title function_\">getLinearVelocity</span>(v);</span><br><span class=\"line\">          <span class=\"keyword\">let</span> vLen = v.<span class=\"title function_\">length</span>();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (vLen &gt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">            v.<span class=\"title function_\">divide</span>(</span><br><span class=\"line\">              <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).<span class=\"title function_\">multiplyScalar</span>(vLen)</span><br><span class=\"line\">            ).<span class=\"title function_\">multiplyScalar</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">            vLen = <span class=\"number\">7</span>;</span><br><span class=\"line\">            rigidBody.<span class=\"title function_\">setLinearVelocity</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (animState1.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">              animState1.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">              skeletalAnimation.<span class=\"title function_\">crossFade</span>(<span class=\"string\">&quot;溜冰&quot;</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">              animState2.<span class=\"property\">speed</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">facedTarget</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">dir</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(v.<span class=\"property\">x</span> / vLen, v.<span class=\"property\">y</span> / vLen, v.<span class=\"property\">z</span> / vLen);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> skeletalAnimation = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getComponent</span>(</span><br><span class=\"line\">            <span class=\"title class_\">SkeletalAnimation</span></span><br><span class=\"line\">          ) <span class=\"keyword\">as</span> <span class=\"title class_\">SkeletalAnimation</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState1 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;起步&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState2 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;溜冰&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState3 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;急停&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (animState1.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">            animState1.<span class=\"title function_\">setTime</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            animState1.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (animState2.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">            skeletalAnimation.<span class=\"title function_\">play</span>(<span class=\"string\">&quot;急停&quot;</span>);</span><br><span class=\"line\">            animState3.<span class=\"property\">repeatCount</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以使用曲线函数调整NPC的移动速度：\"><a href=\"#可以使用曲线函数调整NPC的移动速度：\" class=\"headerlink\" title=\"可以使用曲线函数调整NPC的移动速度：\"></a>可以使用曲线函数调整NPC的移动速度：</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpCopy code</span><br><span class=\"line\"><span class=\"comment\">// 定义速度曲线函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> speedCurve = <span class=\"keyword\">new</span> cc.<span class=\"title class_\">AnimationCurve</span>([</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0</span>, <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0.25</span>, <span class=\"attr\">value</span>: <span class=\"number\">0.5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0.75</span>, <span class=\"attr\">value</span>: <span class=\"number\">0.5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 update 方法中使用曲线函数调整移动速度</span></span><br><span class=\"line\"><span class=\"title function_\">update</span>(<span class=\"params\">deltaTime: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> speed = speedCurve.evaluate(<span class=\"variable language_\">this</span>.<span class=\"property\">elapsedTime</span> / <span class=\"variable language_\">this</span>.<span class=\"property\">moveDuration</span>) * <span class=\"variable language_\">this</span>.<span class=\"property\">maxSpeed</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 speed 进行移动</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"再添加物理效果：\"><a href=\"#再添加物理效果：\" class=\"headerlink\" title=\"再添加物理效果：\"></a>再添加物理效果：</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlinCopy code</span><br><span class=\"line\"><span class=\"comment\">// 定义 NPC 的物理属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mass = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> friction = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> restitution = <span class=\"number\">0.2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在初始化方法中为 NPC 添加刚体组件</span></span><br><span class=\"line\"><span class=\"title function_\">onLoad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rigidbody = <span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">addComponent</span>(cc.<span class=\"property\">RigidBody</span>);</span><br><span class=\"line\">  rigidbody.<span class=\"property\">type</span> = cc.<span class=\"property\">RigidBodyType</span>.<span class=\"property\">Dynamic</span>;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">gravityScale</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">mass</span> = mass;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">linearDamping</span> = friction;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">angularDamping</span> = friction;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">restitution</span> = restitution;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 update 方法中更新 NPC 的位置</span></span><br><span class=\"line\"><span class=\"title function_\">update</span>(<span class=\"params\">deltaTime: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> velocity = cc.<span class=\"title function_\">v2</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">moveDirection</span>).<span class=\"title function_\">normalize</span>().<span class=\"title function_\">mul</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">maxSpeed</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> force = velocity.<span class=\"title function_\">mul</span>(mass);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rigidbody = <span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">getComponent</span>(cc.<span class=\"property\">RigidBody</span>);</span><br><span class=\"line\">    rigidbody.<span class=\"title function_\">applyForceToCenter</span>(force);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"然后解决在Chapter-Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\"><a href=\"#然后解决在Chapter-Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\" class=\"headerlink\" title=\"然后解决在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\"></a>然后解决在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。</h3><p>直接继承 <code>Chapter.Shoot</code> 状态下的行为,将 <code>Chapter.Shoot</code> 状态下的行为提取成一个单独的方法或者函数，并将其放在一个可重用的地方。然后在需要使用这个行为的地方，调用该方法或函数即可。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlinCopy code</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NPC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Character</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">isAutoMoving</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">stihs</span>: <span class=\"title class_\">Stihs</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">moveRandomlyWithinRange</span>(<span class=\"params\">range: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移动到随机的位置</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">playSkatingAnimation</span>(<span class=\"params\">speed: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 播放溜冰动画</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">updateBlockChapter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">playSkatingAnimation</span>(<span class=\"number\">1.5</span>); <span class=\"comment\">// 播放溜冰动画，速度为 1.5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">updateShootChapter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">moveRandomlyWithinRange</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 在范围内随机移动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">updateTotalChapter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">SpecificNPC</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateShootChapter</span>(); <span class=\"comment\">// 直接继承 Chapter.Shoot 状态下的行为</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移动方向由玩家游戏手柄输入的方向确定，加上一些小的随机偏差</span></span><br><span class=\"line\">      <span class=\"comment\">// 移动速度受到限制，超过一定速度会切换到溜冰动画</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">playSkatingAnimation</span>(<span class=\"number\">1.2</span>);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span> === <span class=\"literal\">null</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">isLocked</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">currentChapter</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Chapter</span>.<span class=\"property\">Block</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateBlockChapter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Chapter</span>.<span class=\"property\">Shoot</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateShootChapter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Chapter</span>.<span class=\"property\">Total</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateTotalChapter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此差不多了</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"“烂码”\"><a href=\"#“烂码”\" class=\"headerlink\" title=\"“烂码”\"></a>“烂码”</h3><p>看之前写的杆踪球影中NPC这段代码可能确实存在一些潜在的问题。其中可能比较明显的是，NPC在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。</p>\n<p>此外，NPC移动的速度也受到了限制，可能会导致玩家在进行游戏时感到不自然。现在觉得最好的做法是将代码进行重构，尽量将每个状态下的行为分开处理，并考虑到玩家在游戏中的体验。</p>","more":"<h3 id=\"截取某段\"><a href=\"#截取某段\" class=\"headerlink\" title=\"截取某段\"></a>截取某段</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">chapter</span> === <span class=\"title class_\">Chapter</span>.<span class=\"property\">Total</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">redCharacters</span>[<span class=\"number\">5</span>] || <span class=\"variable language_\">this</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">blueCharacters</span>[<span class=\"number\">5</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">locked</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pos = <span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">getPosition</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rand = <span class=\"number\">1</span> - <span class=\"number\">2</span> * <span class=\"title function_\">randomRangeInt</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        pos.<span class=\"property\">x</span> += rand * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (-<span class=\"number\">2.5</span> &lt;= pos.<span class=\"property\">x</span> &amp;&amp; pos.<span class=\"property\">x</span> &lt;=<span class=\"number\">2.5</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"title function_\">tween</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">node</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">to</span>(<span class=\"number\">0.5</span>, &#123; <span class=\"attr\">position</span>: pos &#125;, &#123; <span class=\"attr\">easing</span>: <span class=\"string\">&quot;linear&quot;</span> &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">call</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">start</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">locked</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">player</span>?.<span class=\"property\">gamePad</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">player</span>.<span class=\"property\">gamePad</span>.<span class=\"property\">dir</span>.<span class=\"title function_\">length</span>() &gt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> skeletalAnimation = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getComponent</span>(</span><br><span class=\"line\">            <span class=\"title class_\">SkeletalAnimation</span></span><br><span class=\"line\">          ) <span class=\"keyword\">as</span> <span class=\"title class_\">SkeletalAnimation</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState1 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;起步&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState2 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;溜冰&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState3 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;急停&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!animState1.<span class=\"property\">isPlaying</span> &amp;&amp; !animState2.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">            skeletalAnimation.<span class=\"title function_\">play</span>(<span class=\"string\">&quot;起步&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> rigidBody = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getComponent</span>(<span class=\"title class_\">RigidBody</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">RigidBody</span>;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; x, y &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">player</span>.<span class=\"property\">gamePad</span>.<span class=\"property\">dir</span>;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> angle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(y, x);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> delta = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> - <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">          angle += delta;</span><br><span class=\"line\">          [x, y] = [<span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(angle), <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(angle)];</span><br><span class=\"line\">          rigidBody.<span class=\"title function_\">applyForce</span>(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(</span><br><span class=\"line\">              x * <span class=\"number\">5000</span> * deltaTime,</span><br><span class=\"line\">              <span class=\"number\">0</span>,</span><br><span class=\"line\">              y * -<span class=\"number\">5000</span> * deltaTime</span><br><span class=\"line\">            )</span><br><span class=\"line\">          );</span><br><span class=\"line\">          <span class=\"keyword\">let</span> <span class=\"attr\">v</span>: <span class=\"title class_\">Vec3</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          rigidBody.<span class=\"title function_\">getLinearVelocity</span>(v);</span><br><span class=\"line\">          <span class=\"keyword\">let</span> vLen = v.<span class=\"title function_\">length</span>();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (vLen &gt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">            v.<span class=\"title function_\">divide</span>(</span><br><span class=\"line\">              <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).<span class=\"title function_\">multiplyScalar</span>(vLen)</span><br><span class=\"line\">            ).<span class=\"title function_\">multiplyScalar</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">            vLen = <span class=\"number\">7</span>;</span><br><span class=\"line\">            rigidBody.<span class=\"title function_\">setLinearVelocity</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (animState1.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">              animState1.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">              skeletalAnimation.<span class=\"title function_\">crossFade</span>(<span class=\"string\">&quot;溜冰&quot;</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">              animState2.<span class=\"property\">speed</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">facedTarget</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">dir</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vec3</span>(v.<span class=\"property\">x</span> / vLen, v.<span class=\"property\">y</span> / vLen, v.<span class=\"property\">z</span> / vLen);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> skeletalAnimation = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getComponent</span>(</span><br><span class=\"line\">            <span class=\"title class_\">SkeletalAnimation</span></span><br><span class=\"line\">          ) <span class=\"keyword\">as</span> <span class=\"title class_\">SkeletalAnimation</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState1 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;起步&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState2 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;溜冰&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> animState3 = skeletalAnimation.<span class=\"title function_\">getState</span>(<span class=\"string\">&quot;急停&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (animState1.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">            animState1.<span class=\"title function_\">setTime</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            animState1.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (animState2.<span class=\"property\">isPlaying</span>) &#123;</span><br><span class=\"line\">            skeletalAnimation.<span class=\"title function_\">play</span>(<span class=\"string\">&quot;急停&quot;</span>);</span><br><span class=\"line\">            animState3.<span class=\"property\">repeatCount</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以使用曲线函数调整NPC的移动速度：\"><a href=\"#可以使用曲线函数调整NPC的移动速度：\" class=\"headerlink\" title=\"可以使用曲线函数调整NPC的移动速度：\"></a>可以使用曲线函数调整NPC的移动速度：</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpCopy code</span><br><span class=\"line\"><span class=\"comment\">// 定义速度曲线函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> speedCurve = <span class=\"keyword\">new</span> cc.<span class=\"title class_\">AnimationCurve</span>([</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0</span>, <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0.25</span>, <span class=\"attr\">value</span>: <span class=\"number\">0.5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">0.75</span>, <span class=\"attr\">value</span>: <span class=\"number\">0.5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">time</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 update 方法中使用曲线函数调整移动速度</span></span><br><span class=\"line\"><span class=\"title function_\">update</span>(<span class=\"params\">deltaTime: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> speed = speedCurve.evaluate(<span class=\"variable language_\">this</span>.<span class=\"property\">elapsedTime</span> / <span class=\"variable language_\">this</span>.<span class=\"property\">moveDuration</span>) * <span class=\"variable language_\">this</span>.<span class=\"property\">maxSpeed</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 speed 进行移动</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"再添加物理效果：\"><a href=\"#再添加物理效果：\" class=\"headerlink\" title=\"再添加物理效果：\"></a>再添加物理效果：</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlinCopy code</span><br><span class=\"line\"><span class=\"comment\">// 定义 NPC 的物理属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mass = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> friction = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> restitution = <span class=\"number\">0.2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在初始化方法中为 NPC 添加刚体组件</span></span><br><span class=\"line\"><span class=\"title function_\">onLoad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rigidbody = <span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">addComponent</span>(cc.<span class=\"property\">RigidBody</span>);</span><br><span class=\"line\">  rigidbody.<span class=\"property\">type</span> = cc.<span class=\"property\">RigidBodyType</span>.<span class=\"property\">Dynamic</span>;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">gravityScale</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">mass</span> = mass;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">linearDamping</span> = friction;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">angularDamping</span> = friction;</span><br><span class=\"line\">  rigidbody.<span class=\"property\">restitution</span> = restitution;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 update 方法中更新 NPC 的位置</span></span><br><span class=\"line\"><span class=\"title function_\">update</span>(<span class=\"params\">deltaTime: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> velocity = cc.<span class=\"title function_\">v2</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">moveDirection</span>).<span class=\"title function_\">normalize</span>().<span class=\"title function_\">mul</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">maxSpeed</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> force = velocity.<span class=\"title function_\">mul</span>(mass);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rigidbody = <span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">getComponent</span>(cc.<span class=\"property\">RigidBody</span>);</span><br><span class=\"line\">    rigidbody.<span class=\"title function_\">applyForceToCenter</span>(force);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"然后解决在Chapter-Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\"><a href=\"#然后解决在Chapter-Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\" class=\"headerlink\" title=\"然后解决在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。\"></a>然后解决在Chapter.Total状态下的行为过于复杂，导致代码变得比较混乱难以维护。</h3><p>直接继承 <code>Chapter.Shoot</code> 状态下的行为,将 <code>Chapter.Shoot</code> 状态下的行为提取成一个单独的方法或者函数，并将其放在一个可重用的地方。然后在需要使用这个行为的地方，调用该方法或函数即可。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlinCopy code</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NPC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Character</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">isAutoMoving</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">stihs</span>: <span class=\"title class_\">Stihs</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">moveRandomlyWithinRange</span>(<span class=\"params\">range: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移动到随机的位置</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">playSkatingAnimation</span>(<span class=\"params\">speed: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 播放溜冰动画</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">updateBlockChapter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">playSkatingAnimation</span>(<span class=\"number\">1.5</span>); <span class=\"comment\">// 播放溜冰动画，速度为 1.5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">updateShootChapter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isAutoMoving</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">moveRandomlyWithinRange</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 在范围内随机移动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">updateTotalChapter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">SpecificNPC</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateShootChapter</span>(); <span class=\"comment\">// 直接继承 Chapter.Shoot 状态下的行为</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移动方向由玩家游戏手柄输入的方向确定，加上一些小的随机偏差</span></span><br><span class=\"line\">      <span class=\"comment\">// 移动速度受到限制，超过一定速度会切换到溜冰动画</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">playSkatingAnimation</span>(<span class=\"number\">1.2</span>);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span> === <span class=\"literal\">null</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">isLocked</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stihs</span>.<span class=\"property\">currentChapter</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Chapter</span>.<span class=\"property\">Block</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateBlockChapter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Chapter</span>.<span class=\"property\">Shoot</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateShootChapter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Chapter</span>.<span class=\"property\">Total</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateTotalChapter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此差不多了</p>"},{"title":"TypeScript 和 React 开发中的心得","date":"2022-04-17T07:23:00.000Z","_content":"\n在我最近的项目中，我使用 Typescript 和 React 进行开发，期间遇到了一些问题。我在这里记录下来，希望能对遇到相似问题的开发者有所帮助。\n\n<!-- more -->\n\n## 1. 类型定义问题\n\n在使用 Typescript 进行 React 开发时，最常遇到的问题就是类型定义的问题。例如，在定义组件 Props 时，需要使用 `React.FC`，但是 `React.FC` 的类型定义并不总是适用于所有情况。这时，需要手动定义 Props 的类型。\n\n解决方案：\n\n使用泛型来手动定义 Props 的类型。例如，对于一个名为 `MyComponent` 的组件，可以这样定义 Props 类型：\n\n```\ntsxCopy code\ninterface MyComponentProps {\n  name: string;\n  age: number;\n}\n\nconst MyComponent: React.FC<MyComponentProps> = ({ name, age }) => {\n  // ...\n}\n```\n\n这样，就可以在组件中使用 `name` 和 `age` 属性，同时也能够获得 Typescript 的类型检查。\n\n## 2. 路由配置问题\n\n在使用 React Router 进行路由配置时，经常会遇到页面跳转后无法正确渲染组件的问题。这通常是由于路由配置不正确导致的。\n\n解决方案：\n\n可以在路由配置时，使用 `<Switch>` 组件来确保只有一个路由能够被匹配到。例如：\n\n```\ntsxCopy code\nimport { Switch, Route } from 'react-router-dom';\n\nconst App: React.FC = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/about\" component={AboutPage} />\n      <Route path=\"/contact\" component={ContactPage} />\n      <Route path=\"*\" component={NotFoundPage} />\n    </Switch>\n  );\n};\n```\n\n这样，只有一个路由能够被匹配到，确保了页面跳转后组件能够正确地渲染。\n\n## 3. 状态管理问题\n\n在大型应用程序中，状态管理是一个非常重要的问题。在使用 React 进行开发时，通常会选择使用 Redux 进行状态管理。然而，Redux 的使用可能会带来一些问题，例如：冗长的代码、过多的 boilerplate 等。\n\n解决方案：\n\n使用类似于 React Hooks 的方式来简化 Redux 的使用。例如，使用 `useSelector` 和 `useDispatch` 来替代 `mapStateToProps` 和 `mapDispatchToProps`。这样，我们就可以使用更简洁的代码来管理状态。\n\n```\ntsxCopy code\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store';\n\nconst MyComponent: React.FC = () => {\n  const dispatch = useDispatch();\n  const count = useSelector((state: RootState) => state.count);\n\n  const handleClick = () => {\n    dispatch({ type: 'INCREMENT' });\n  };\n```\n\n使用 Redux 或 MobX 等状态管理工具来帮助我们管理应用程序中的状态。这些工具可以帮助创建一个单一的状态源，从而使状态更易于管理和维护。\n\n下面是一个使用 Redux 和 TypeScript 的代码示例，它实现了一个简单的计数器：\n\n```\ntypescriptCopy code\nimport { createStore } from 'redux';\n\ninterface AppState {\n  count: number;\n}\n\ninterface IncrementAction {\n  type: 'INCREMENT';\n}\n\ninterface DecrementAction {\n  type: 'DECREMENT';\n}\n\ntype AppAction = IncrementAction | DecrementAction;\n\nconst initialState: AppState = {\n  count: 0,\n};\n\nfunction appReducer(state = initialState, action: AppAction): AppState {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        ...state,\n        count: state.count + 1,\n      };\n    case 'DECREMENT':\n      return {\n        ...state,\n        count: state.count - 1,\n      };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(appReducer);\n\n// dispatch an action\nstore.dispatch({ type: 'INCREMENT' });\n\n// get the current state\nconst state = store.getState();\n\nconsole.log(state); // { count: 1 }\n```\n\n定义了一个 AppState 接口来描述我们的应用程序状态。定义了两个操作，即 IncrementAction 和 DecrementAction 接口，用于增加和减少计数器，还定义了一个 AppAction 类型，该类型是这两个操作的联合类型。\n\n定义了一个初始状态 initialState 和一个 appReducer 函数，该函数接受当前状态和一个操作，并返回新的状态。最后创建 store，并使用 store.dispatch 方法来分派一个操作，并使用 store.getState 方法来获取当前状态。\n\n除了状态管理工具之外，还可以使用一些数据流控制模式，例如单向数据流和控制反转。这些模式可以帮助我更好地组织和管理我们的代码，从而使其更易于维护和扩展。下面是一个使用单向数据流的代码示例：\n\n```\ntypescriptCopy code\nimport React, { useState } from 'react';\n\ninterface Props {\n  initialCount: number;\n}\n\nfunction Counter({ initialCount }: Props) {\n  const [count, setCount] = useState(initialCount);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  const decrement = () => {\n    setCount(count - 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\n","source":"_posts/Typescript + React 开发中遇到的问题及解决方案.md","raw":"---\ntitle: TypeScript 和 React 开发中的心得 \ndate:  2022-04-17 15:23:00 \ntags:\n- Typescript\n- React\ncategories: \n- 技术分享\n---\n\n在我最近的项目中，我使用 Typescript 和 React 进行开发，期间遇到了一些问题。我在这里记录下来，希望能对遇到相似问题的开发者有所帮助。\n\n<!-- more -->\n\n## 1. 类型定义问题\n\n在使用 Typescript 进行 React 开发时，最常遇到的问题就是类型定义的问题。例如，在定义组件 Props 时，需要使用 `React.FC`，但是 `React.FC` 的类型定义并不总是适用于所有情况。这时，需要手动定义 Props 的类型。\n\n解决方案：\n\n使用泛型来手动定义 Props 的类型。例如，对于一个名为 `MyComponent` 的组件，可以这样定义 Props 类型：\n\n```\ntsxCopy code\ninterface MyComponentProps {\n  name: string;\n  age: number;\n}\n\nconst MyComponent: React.FC<MyComponentProps> = ({ name, age }) => {\n  // ...\n}\n```\n\n这样，就可以在组件中使用 `name` 和 `age` 属性，同时也能够获得 Typescript 的类型检查。\n\n## 2. 路由配置问题\n\n在使用 React Router 进行路由配置时，经常会遇到页面跳转后无法正确渲染组件的问题。这通常是由于路由配置不正确导致的。\n\n解决方案：\n\n可以在路由配置时，使用 `<Switch>` 组件来确保只有一个路由能够被匹配到。例如：\n\n```\ntsxCopy code\nimport { Switch, Route } from 'react-router-dom';\n\nconst App: React.FC = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/about\" component={AboutPage} />\n      <Route path=\"/contact\" component={ContactPage} />\n      <Route path=\"*\" component={NotFoundPage} />\n    </Switch>\n  );\n};\n```\n\n这样，只有一个路由能够被匹配到，确保了页面跳转后组件能够正确地渲染。\n\n## 3. 状态管理问题\n\n在大型应用程序中，状态管理是一个非常重要的问题。在使用 React 进行开发时，通常会选择使用 Redux 进行状态管理。然而，Redux 的使用可能会带来一些问题，例如：冗长的代码、过多的 boilerplate 等。\n\n解决方案：\n\n使用类似于 React Hooks 的方式来简化 Redux 的使用。例如，使用 `useSelector` 和 `useDispatch` 来替代 `mapStateToProps` 和 `mapDispatchToProps`。这样，我们就可以使用更简洁的代码来管理状态。\n\n```\ntsxCopy code\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store';\n\nconst MyComponent: React.FC = () => {\n  const dispatch = useDispatch();\n  const count = useSelector((state: RootState) => state.count);\n\n  const handleClick = () => {\n    dispatch({ type: 'INCREMENT' });\n  };\n```\n\n使用 Redux 或 MobX 等状态管理工具来帮助我们管理应用程序中的状态。这些工具可以帮助创建一个单一的状态源，从而使状态更易于管理和维护。\n\n下面是一个使用 Redux 和 TypeScript 的代码示例，它实现了一个简单的计数器：\n\n```\ntypescriptCopy code\nimport { createStore } from 'redux';\n\ninterface AppState {\n  count: number;\n}\n\ninterface IncrementAction {\n  type: 'INCREMENT';\n}\n\ninterface DecrementAction {\n  type: 'DECREMENT';\n}\n\ntype AppAction = IncrementAction | DecrementAction;\n\nconst initialState: AppState = {\n  count: 0,\n};\n\nfunction appReducer(state = initialState, action: AppAction): AppState {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        ...state,\n        count: state.count + 1,\n      };\n    case 'DECREMENT':\n      return {\n        ...state,\n        count: state.count - 1,\n      };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(appReducer);\n\n// dispatch an action\nstore.dispatch({ type: 'INCREMENT' });\n\n// get the current state\nconst state = store.getState();\n\nconsole.log(state); // { count: 1 }\n```\n\n定义了一个 AppState 接口来描述我们的应用程序状态。定义了两个操作，即 IncrementAction 和 DecrementAction 接口，用于增加和减少计数器，还定义了一个 AppAction 类型，该类型是这两个操作的联合类型。\n\n定义了一个初始状态 initialState 和一个 appReducer 函数，该函数接受当前状态和一个操作，并返回新的状态。最后创建 store，并使用 store.dispatch 方法来分派一个操作，并使用 store.getState 方法来获取当前状态。\n\n除了状态管理工具之外，还可以使用一些数据流控制模式，例如单向数据流和控制反转。这些模式可以帮助我更好地组织和管理我们的代码，从而使其更易于维护和扩展。下面是一个使用单向数据流的代码示例：\n\n```\ntypescriptCopy code\nimport React, { useState } from 'react';\n\ninterface Props {\n  initialCount: number;\n}\n\nfunction Counter({ initialCount }: Props) {\n  const [count, setCount] = useState(initialCount);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  const decrement = () => {\n    setCount(count - 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\n","slug":"Typescript + React 开发中遇到的问题及解决方案","published":1,"updated":"2023-04-19T10:51:11.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3i000bq05zekxw69i3","content":"<p>在我最近的项目中，我使用 Typescript 和 React 进行开发，期间遇到了一些问题。我在这里记录下来，希望能对遇到相似问题的开发者有所帮助。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-类型定义问题\"><a href=\"#1-类型定义问题\" class=\"headerlink\" title=\"1. 类型定义问题\"></a>1. 类型定义问题</h2><p>在使用 Typescript 进行 React 开发时，最常遇到的问题就是类型定义的问题。例如，在定义组件 Props 时，需要使用 <code>React.FC</code>，但是 <code>React.FC</code> 的类型定义并不总是适用于所有情况。这时，需要手动定义 Props 的类型。</p>\n<p>解决方案：</p>\n<p>使用泛型来手动定义 Props 的类型。例如，对于一个名为 <code>MyComponent</code> 的组件，可以这样定义 Props 类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsxCopy code</span><br><span class=\"line\">interface MyComponentProps &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const MyComponent: React.FC&lt;MyComponentProps&gt; = (&#123; name, age &#125;) =&gt; &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，就可以在组件中使用 <code>name</code> 和 <code>age</code> 属性，同时也能够获得 Typescript 的类型检查。</p>\n<h2 id=\"2-路由配置问题\"><a href=\"#2-路由配置问题\" class=\"headerlink\" title=\"2. 路由配置问题\"></a>2. 路由配置问题</h2><p>在使用 React Router 进行路由配置时，经常会遇到页面跳转后无法正确渲染组件的问题。这通常是由于路由配置不正确导致的。</p>\n<p>解决方案：</p>\n<p>可以在路由配置时，使用 <code>&lt;Switch&gt;</code> 组件来确保只有一个路由能够被匹配到。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsxCopy code</span><br><span class=\"line\">import &#123; Switch, Route &#125; from &#x27;react-router-dom&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const App: React.FC = () =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route exact path=&quot;/&quot; component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=&quot;/about&quot; component=&#123;AboutPage&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=&quot;/contact&quot; component=&#123;ContactPage&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=&quot;*&quot; component=&#123;NotFoundPage&#125; /&gt;</span><br><span class=\"line\">    &lt;/Switch&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样，只有一个路由能够被匹配到，确保了页面跳转后组件能够正确地渲染。</p>\n<h2 id=\"3-状态管理问题\"><a href=\"#3-状态管理问题\" class=\"headerlink\" title=\"3. 状态管理问题\"></a>3. 状态管理问题</h2><p>在大型应用程序中，状态管理是一个非常重要的问题。在使用 React 进行开发时，通常会选择使用 Redux 进行状态管理。然而，Redux 的使用可能会带来一些问题，例如：冗长的代码、过多的 boilerplate 等。</p>\n<p>解决方案：</p>\n<p>使用类似于 React Hooks 的方式来简化 Redux 的使用。例如，使用 <code>useSelector</code> 和 <code>useDispatch</code> 来替代 <code>mapStateToProps</code> 和 <code>mapDispatchToProps</code>。这样，我们就可以使用更简洁的代码来管理状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsxCopy code</span><br><span class=\"line\">import &#123; useSelector, useDispatch &#125; from &#x27;react-redux&#x27;;</span><br><span class=\"line\">import &#123; RootState &#125; from &#x27;store&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MyComponent: React.FC = () =&gt; &#123;</span><br><span class=\"line\">  const dispatch = useDispatch();</span><br><span class=\"line\">  const count = useSelector((state: RootState) =&gt; state.count);</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleClick = () =&gt; &#123;</span><br><span class=\"line\">    dispatch(&#123; type: &#x27;INCREMENT&#x27; &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用 Redux 或 MobX 等状态管理工具来帮助我们管理应用程序中的状态。这些工具可以帮助创建一个单一的状态源，从而使状态更易于管理和维护。</p>\n<p>下面是一个使用 Redux 和 TypeScript 的代码示例，它实现了一个简单的计数器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typescriptCopy code</span><br><span class=\"line\">import &#123; createStore &#125; from &#x27;redux&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">interface AppState &#123;</span><br><span class=\"line\">  count: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IncrementAction &#123;</span><br><span class=\"line\">  type: &#x27;INCREMENT&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface DecrementAction &#123;</span><br><span class=\"line\">  type: &#x27;DECREMENT&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type AppAction = IncrementAction | DecrementAction;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState: AppState = &#123;</span><br><span class=\"line\">  count: 0,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function appReducer(state = initialState, action: AppAction): AppState &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &#x27;INCREMENT&#x27;:</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count + 1,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    case &#x27;DECREMENT&#x27;:</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count - 1,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(appReducer);</span><br><span class=\"line\"></span><br><span class=\"line\">// dispatch an action</span><br><span class=\"line\">store.dispatch(&#123; type: &#x27;INCREMENT&#x27; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// get the current state</span><br><span class=\"line\">const state = store.getState();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(state); // &#123; count: 1 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义了一个 AppState 接口来描述我们的应用程序状态。定义了两个操作，即 IncrementAction 和 DecrementAction 接口，用于增加和减少计数器，还定义了一个 AppAction 类型，该类型是这两个操作的联合类型。</p>\n<p>定义了一个初始状态 initialState 和一个 appReducer 函数，该函数接受当前状态和一个操作，并返回新的状态。最后创建 store，并使用 store.dispatch 方法来分派一个操作，并使用 store.getState 方法来获取当前状态。</p>\n<p>除了状态管理工具之外，还可以使用一些数据流控制模式，例如单向数据流和控制反转。这些模式可以帮助我更好地组织和管理我们的代码，从而使其更易于维护和扩展。下面是一个使用单向数据流的代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typescriptCopy code</span><br><span class=\"line\">import React, &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Props &#123;</span><br><span class=\"line\">  initialCount: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Counter(&#123; initialCount &#125;: Props) &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(initialCount);</span><br><span class=\"line\"></span><br><span class=\"line\">  const increment = () =&gt; &#123;</span><br><span class=\"line\">    setCount(count + 1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const decrement = () =&gt; &#123;</span><br><span class=\"line\">    setCount(count - 1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;increment&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;decrement&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Counter;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>在我最近的项目中，我使用 Typescript 和 React 进行开发，期间遇到了一些问题。我在这里记录下来，希望能对遇到相似问题的开发者有所帮助。</p>","more":"<h2 id=\"1-类型定义问题\"><a href=\"#1-类型定义问题\" class=\"headerlink\" title=\"1. 类型定义问题\"></a>1. 类型定义问题</h2><p>在使用 Typescript 进行 React 开发时，最常遇到的问题就是类型定义的问题。例如，在定义组件 Props 时，需要使用 <code>React.FC</code>，但是 <code>React.FC</code> 的类型定义并不总是适用于所有情况。这时，需要手动定义 Props 的类型。</p>\n<p>解决方案：</p>\n<p>使用泛型来手动定义 Props 的类型。例如，对于一个名为 <code>MyComponent</code> 的组件，可以这样定义 Props 类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsxCopy code</span><br><span class=\"line\">interface MyComponentProps &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const MyComponent: React.FC&lt;MyComponentProps&gt; = (&#123; name, age &#125;) =&gt; &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，就可以在组件中使用 <code>name</code> 和 <code>age</code> 属性，同时也能够获得 Typescript 的类型检查。</p>\n<h2 id=\"2-路由配置问题\"><a href=\"#2-路由配置问题\" class=\"headerlink\" title=\"2. 路由配置问题\"></a>2. 路由配置问题</h2><p>在使用 React Router 进行路由配置时，经常会遇到页面跳转后无法正确渲染组件的问题。这通常是由于路由配置不正确导致的。</p>\n<p>解决方案：</p>\n<p>可以在路由配置时，使用 <code>&lt;Switch&gt;</code> 组件来确保只有一个路由能够被匹配到。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsxCopy code</span><br><span class=\"line\">import &#123; Switch, Route &#125; from &#x27;react-router-dom&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const App: React.FC = () =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Switch&gt;</span><br><span class=\"line\">      &lt;Route exact path=&quot;/&quot; component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=&quot;/about&quot; component=&#123;AboutPage&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=&quot;/contact&quot; component=&#123;ContactPage&#125; /&gt;</span><br><span class=\"line\">      &lt;Route path=&quot;*&quot; component=&#123;NotFoundPage&#125; /&gt;</span><br><span class=\"line\">    &lt;/Switch&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样，只有一个路由能够被匹配到，确保了页面跳转后组件能够正确地渲染。</p>\n<h2 id=\"3-状态管理问题\"><a href=\"#3-状态管理问题\" class=\"headerlink\" title=\"3. 状态管理问题\"></a>3. 状态管理问题</h2><p>在大型应用程序中，状态管理是一个非常重要的问题。在使用 React 进行开发时，通常会选择使用 Redux 进行状态管理。然而，Redux 的使用可能会带来一些问题，例如：冗长的代码、过多的 boilerplate 等。</p>\n<p>解决方案：</p>\n<p>使用类似于 React Hooks 的方式来简化 Redux 的使用。例如，使用 <code>useSelector</code> 和 <code>useDispatch</code> 来替代 <code>mapStateToProps</code> 和 <code>mapDispatchToProps</code>。这样，我们就可以使用更简洁的代码来管理状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsxCopy code</span><br><span class=\"line\">import &#123; useSelector, useDispatch &#125; from &#x27;react-redux&#x27;;</span><br><span class=\"line\">import &#123; RootState &#125; from &#x27;store&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MyComponent: React.FC = () =&gt; &#123;</span><br><span class=\"line\">  const dispatch = useDispatch();</span><br><span class=\"line\">  const count = useSelector((state: RootState) =&gt; state.count);</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleClick = () =&gt; &#123;</span><br><span class=\"line\">    dispatch(&#123; type: &#x27;INCREMENT&#x27; &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用 Redux 或 MobX 等状态管理工具来帮助我们管理应用程序中的状态。这些工具可以帮助创建一个单一的状态源，从而使状态更易于管理和维护。</p>\n<p>下面是一个使用 Redux 和 TypeScript 的代码示例，它实现了一个简单的计数器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typescriptCopy code</span><br><span class=\"line\">import &#123; createStore &#125; from &#x27;redux&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">interface AppState &#123;</span><br><span class=\"line\">  count: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IncrementAction &#123;</span><br><span class=\"line\">  type: &#x27;INCREMENT&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface DecrementAction &#123;</span><br><span class=\"line\">  type: &#x27;DECREMENT&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type AppAction = IncrementAction | DecrementAction;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState: AppState = &#123;</span><br><span class=\"line\">  count: 0,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function appReducer(state = initialState, action: AppAction): AppState &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &#x27;INCREMENT&#x27;:</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count + 1,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    case &#x27;DECREMENT&#x27;:</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count - 1,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(appReducer);</span><br><span class=\"line\"></span><br><span class=\"line\">// dispatch an action</span><br><span class=\"line\">store.dispatch(&#123; type: &#x27;INCREMENT&#x27; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// get the current state</span><br><span class=\"line\">const state = store.getState();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(state); // &#123; count: 1 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义了一个 AppState 接口来描述我们的应用程序状态。定义了两个操作，即 IncrementAction 和 DecrementAction 接口，用于增加和减少计数器，还定义了一个 AppAction 类型，该类型是这两个操作的联合类型。</p>\n<p>定义了一个初始状态 initialState 和一个 appReducer 函数，该函数接受当前状态和一个操作，并返回新的状态。最后创建 store，并使用 store.dispatch 方法来分派一个操作，并使用 store.getState 方法来获取当前状态。</p>\n<p>除了状态管理工具之外，还可以使用一些数据流控制模式，例如单向数据流和控制反转。这些模式可以帮助我更好地组织和管理我们的代码，从而使其更易于维护和扩展。下面是一个使用单向数据流的代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typescriptCopy code</span><br><span class=\"line\">import React, &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Props &#123;</span><br><span class=\"line\">  initialCount: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Counter(&#123; initialCount &#125;: Props) &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(initialCount);</span><br><span class=\"line\"></span><br><span class=\"line\">  const increment = () =&gt; &#123;</span><br><span class=\"line\">    setCount(count + 1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const decrement = () =&gt; &#123;</span><br><span class=\"line\">    setCount(count - 1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;increment&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;decrement&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Counter;</span><br></pre></td></tr></table></figure>"},{"title":"first-article","date":"2020-10-18T06:28:49.000Z","_content":"\n# 这是我的第一篇博客文章\n\n欢迎来到我的博客！这是我第一次写博客，所以我想简单介绍一下自己和这个博客。\n\n<!-- more -->\n\n我是一名软件工程师，我喜欢编写代码和学习新技术。我在这个博客上将分享我的经验和教训，希望能够帮助其他人在他们的职业生涯中取得成功。\n\n在这个博客上，我将分享我对软件开发、编程和技术的看法，以及我在开发过程中所遇到的一些有趣的问题和解决方案。我会在这里发布一些教程和指南，帮助读者更好地理解和应用新技术。\n\n如果您对这个博客或我的文章有任何意见或建议，欢迎随时联系我。我期待着与您建立联系，分享更多关于软件开发和技术的经验和教训。\n\n\n谢谢您的访问，希望您喜欢我的博客！\n\n","source":"_posts/first-article.md","raw":"---\ntitle: first-article\ndate: 2020-10-18 14:28:49\ntags:\n- 第一篇\ncategories: \n- 随便写\n---\n\n# 这是我的第一篇博客文章\n\n欢迎来到我的博客！这是我第一次写博客，所以我想简单介绍一下自己和这个博客。\n\n<!-- more -->\n\n我是一名软件工程师，我喜欢编写代码和学习新技术。我在这个博客上将分享我的经验和教训，希望能够帮助其他人在他们的职业生涯中取得成功。\n\n在这个博客上，我将分享我对软件开发、编程和技术的看法，以及我在开发过程中所遇到的一些有趣的问题和解决方案。我会在这里发布一些教程和指南，帮助读者更好地理解和应用新技术。\n\n如果您对这个博客或我的文章有任何意见或建议，欢迎随时联系我。我期待着与您建立联系，分享更多关于软件开发和技术的经验和教训。\n\n\n谢谢您的访问，希望您喜欢我的博客！\n\n","slug":"first-article","published":1,"updated":"2023-04-20T03:15:54.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3o000fq05z0enj4tjf","content":"<h1 id=\"这是我的第一篇博客文章\"><a href=\"#这是我的第一篇博客文章\" class=\"headerlink\" title=\"这是我的第一篇博客文章\"></a>这是我的第一篇博客文章</h1><p>欢迎来到我的博客！这是我第一次写博客，所以我想简单介绍一下自己和这个博客。</p>\n<span id=\"more\"></span>\n\n<p>我是一名软件工程师，我喜欢编写代码和学习新技术。我在这个博客上将分享我的经验和教训，希望能够帮助其他人在他们的职业生涯中取得成功。</p>\n<p>在这个博客上，我将分享我对软件开发、编程和技术的看法，以及我在开发过程中所遇到的一些有趣的问题和解决方案。我会在这里发布一些教程和指南，帮助读者更好地理解和应用新技术。</p>\n<p>如果您对这个博客或我的文章有任何意见或建议，欢迎随时联系我。我期待着与您建立联系，分享更多关于软件开发和技术的经验和教训。</p>\n<p>谢谢您的访问，希望您喜欢我的博客！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"这是我的第一篇博客文章\"><a href=\"#这是我的第一篇博客文章\" class=\"headerlink\" title=\"这是我的第一篇博客文章\"></a>这是我的第一篇博客文章</h1><p>欢迎来到我的博客！这是我第一次写博客，所以我想简单介绍一下自己和这个博客。</p>","more":"<p>我是一名软件工程师，我喜欢编写代码和学习新技术。我在这个博客上将分享我的经验和教训，希望能够帮助其他人在他们的职业生涯中取得成功。</p>\n<p>在这个博客上，我将分享我对软件开发、编程和技术的看法，以及我在开发过程中所遇到的一些有趣的问题和解决方案。我会在这里发布一些教程和指南，帮助读者更好地理解和应用新技术。</p>\n<p>如果您对这个博客或我的文章有任何意见或建议，欢迎随时联系我。我期待着与您建立联系，分享更多关于软件开发和技术的经验和教训。</p>\n<p>谢谢您的访问，希望您喜欢我的博客！</p>"},{"title":"SSM学习","date":"2023-03-02T16:00:00.000Z","_content":"\n学点后端吧，学习了黑马的SSM课程,耗时半个寒假，以前提前放假安得一息安寝\n\n用了Springboot再也不想碰Spring\n\n<!-- more -->\n\n## SpringBoot\n\n**今日目标：**\n\n> - 掌握基于SpringBoot框架的程序开发步骤\n> - 熟练使用SpringBoot配置信息修改服务器配置\n> - 基于SpringBoot的完成SSM整合项目开发\n\n## 1，SpringBoot简介\n\n`SpringBoot` 是由 `Pivotal` 团队提供的全新框架，其设计目的是用来==简化== `Spring` 应用的==初始搭建==以及==开发过程==。\n\n使用了 `Spring` 框架后已经简化了我们的开发。而 `SpringBoot` 又是对 `Spring` 开发进行简化的，可想而知 `SpringBoot` 使用的简单及广泛性。既然 `SpringBoot` 是用来简化 `Spring` 开发的，那我们就先回顾一下，以 `SpringMVC` 开发为例：\n\n1. **创建工程，并在 `pom.xml` 配置文件中配置所依赖的坐标**\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911132335452.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n2. **编写 `web3.0` 的配置类**\n\n   作为 `web` 程序，`web3.0` 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133112602.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n3. **编写 `SpringMVC` 的配置类**\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133219847.png\" alt=\"image-20210911133219847\" style=\"zoom:50%;\" />\n\n​ 做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 `Controller` 类，在该类中提供一个方法。\n\n4. **编写 `Controller` 类**\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133532151.png\" alt=\"image-20210911133532151\" style=\"zoom:50%;\" />\n\n从上面的 `SpringMVC` 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。`SpringBoot` 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 `SpingBoot` 简化 `Spring` 开发。\n\n### 1.1 SpringBoot快速入门\n\n#### 1.1.1 开发步骤\n\n`SpringBoot` 开发起来特别简单，分为如下几步：\n\n- 创建新模块，选择Spring初始化，并配置模块相关基础信息\n- 选择当前模块需要使用的技术集\n- 开发控制器类\n- 运行自动生成的Application类\n\n知道了 `SpringBoot` 的开发步骤后，接下来我们进行具体的操作\n\n##### 1.1.1.1 创建新模块\n\n- 点击 `+` 选择 `New Module` 创建新模块\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155135008.png\" alt=\"image-20210911155135008\" style=\"zoom:60%;\" />\n\n- 选择 `Spring Initializr` ，用来创建 `SpringBoot` 工程\n\n  以前我们选择的是 `Maven` ，今天选择 `Spring Initializr` 来快速构建 `SpringBoot` 工程。而在 `Module SDK` 这一项选择我们安装的 `JDK` 版本。\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155249493.png\" alt=\"image-20210911155249493\" style=\"zoom:60%;\" />\n\n- 对 `SpringBoot` 工程进行相关的设置\n\n  我们使用这种方式构建的 `SpringBoot` 工程其实也是 `Maven` 工程，而该方式只是一种快速构建的方式而已。\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155916899.png\" alt=\"image-20210911155916899\" style=\"zoom:67%;\" />\n\n  > ==注意：打包方式这里需要设置为 `Jar`==\n\n- 选中 `Web`，然后勾选 `Spring Web`\n\n  由于我们需要开发一个 `web` 程序，使用到了 `SpringMVC` 技术，所以按照下图红框进行勾选\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160040328.png\" alt=\"image-20210911160040328\" style=\"zoom:60%;\" />\n\n- 下图界面不需要任何修改，直接点击 `Finish` 完成 `SpringBoot` 工程的构建\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160353534.png\" alt=\"image-20210911160353534\" style=\"zoom:70%;\" />\n\n经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 `Application` 类，而该类一会再启动服务器时会用到\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160541833.png\" alt=\"image-20210911160541833\" style=\"zoom:80%;\" />\n\n> ==注意：==\n>\n> 1. 在创建好的工程中不需要创建配置类\n> 2. 创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。\n>\n>    可以删除的目录和文件如下：\n>\n>    - `.mvn`\n>    - `.gitignore`\n>    - `HELP.md`\n>    - `mvnw`\n>    - `mvnw.cmd`\n\n##### 1.1.1.2 创建 `Controller`\n\n在 `com.itheima.controller` 包下创建 `BookController` ，代码如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(\"id ==> \"+id);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n##### 1.1.1.3 启动服务器\n\n运行 `SpringBoot` 工程不需要使用本地的 `Tomcat` 和 插件，只运行项目 `com.itheima` 包下的 `Application` 类，我们就可以在控制台看出如下信息\n\n![image-20210911165642280](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911165642280.png)\n\n##### 1.1.1.4 进行测试\n\n使用 `Postman` 工具来测试我们的程序\n\n![image-20210911160850121](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160850121.png)\n\n通过上面的入门案例我们可以看到使用 `SpringBoot` 进行开发，使整个开发变得很简单，那它是如何做到的呢？\n\n要研究这个问题，我们需要看看 `Application` 类和 `pom.xml` 都书写了什么。先看看 `Applicaion` 类，该类内容如下：\n\n```java\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n这个类中的东西很简单，就在类上添加了一个 `@SpringBootApplication` 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。\n\n再看看 `pom.xml` 配置文件中的内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用-->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n    <groupId>com.itheima</groupId>\n    <artifactId>springboot_01_quickstart</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <!--JDK 的版本-->\n    <properties>\n        <java.version>8</java.version>\n    </properties>\n\n    <dependencies>\n        <!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\t\t<!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <!--这个插件是在打包时需要的，而这里暂时还没有用到-->\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n我们代码之所以能简化，就是因为指定的父工程和 `Spring Web` 依赖实现的。具体的我们后面在聊。\n\n#### 1.1.2 对比\n\n做完 `SpringBoot` 的入门案例后，接下来对比一下 `Spring` 程序和 `SpringBoot` 程序。如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911172200292.png\" alt=\"image-20210911172200292\" style=\"zoom:60%;\" />\n\n- **坐标**\n\n  `Spring` 程序中的坐标需要自己编写，而且坐标非常多\n\n  `SpringBoot` 程序中的坐标是我们在创建工程时进行勾选自动生成的\n\n- **web3.0配置类**\n\n  `Spring` 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂\n\n  `SpringBoot` 程序不需要我们自己书写\n\n- **配置类**\n\n  `Spring/SpringMVC` 程序的配置类需要自己书写。而 `SpringBoot` 程序则不需要书写。\n\n> ==注意：基于Idea的 `Spring Initializr` 快速构建 `SpringBoot` 工程时需要联网。==\n\n#### 1.1.3 官网构建工程\n\n在入门案例中之所以能快速构建 `SpringBoot` 工程，是因为 `Idea` 使用了官网提供了快速构建 `SpringBoot` 工程的组件实现的。那如何在官网进行工程构建呢？通过如下步骤构建\n\n##### 1.1.3.1 进入SpringBoot官网\n\n官网地址如下：\n\n```\nhttps://spring.io/projects/spring-boot\n```\n\n进入到 `SpringBoot` 官网后拖到最下方就可以看到如下内容\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911173712014.png\" alt=\"image-20210911173712014\" style=\"zoom:60%;\" />\n\n然后点击 `Spring Initializr` 超链接就会跳转到如下页面\n\n![image-20210911174110687](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174110687.png)\n\n这个页面内容是不是感觉很眼熟的，这和我们使用 `Idea` 快速构建 `SpringBoot` 工程的界面基本相同。在上面页面输入对应的信息\n\n##### 1.1.3.2 选择依赖\n\n选择 `Spring Web` 可以点击上图右上角的 `ADD DEPENDENCIES... CTRL + B` 按钮，就会出现如下界面\n\n![image-20210911174650679](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174650679.png)\n\n##### 1.1.3.3 生成工程\n\n以上步骤完成后就可以生成 `SpringBoot` 工程了。在页面的最下方点击 `GENERATE CTRL + 回车` 按钮生成工程并下载到本地，如下图所示\n\n![image-20210911175222857](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175222857.png)\n\n打开下载好的压缩包可以看到工程结构和使用 `Idea` 生成的一模一样，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175502834.png\" alt=\"image-20210911175502834\" style=\"zoom:80%;\" />\n\n而打开 `pom.xml` 文件，里面也包含了父工程和 `Spring Web` 的依赖。\n\n通过上面官网的操作，我们知道 `Idea` 中快速构建 `SpringBoot` 工程其实就是使用的官网的快速构建组件，那以后即使没有 `Idea` 也可以使用官网的方式构建 `SpringBoot` 工程。\n\n#### 1.1.4 SpringBoot工程快速启动\n\n##### 1.1.4.1 问题导入\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911180828611.png\" alt=\"image-20210911180828611\" style=\"zoom:50%;\" />\n\n以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 `Tomcat` 和 `Idea` ，在自己电脑上启动后端程序，这显然不现实。\n\n我们后端可以将 `SpringBoot` 工程打成 `jar` 包，该 `jar` 包运行不依赖于 `Tomcat` 和 `Idea` 这些工具也可以正常运行，只是这个 `jar` 包在运行过程中连接和我们自己程序相同的 `Mysql` 数据库即可。这样就可以解决这个问题，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911181714437.png\" alt=\"image-20210911181714437\" style=\"zoom:50%;\" />\n\n那现在问题是如何打包呢？\n\n##### 1.1.4.2 打包\n\n由于我们在构建 `SpringBoot` 工程时已经在 `pom.xml` 中配置了如下插件\n\n```xml\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n```\n\n所以我们只需要使用 `Maven` 的 `package` 指令打包就会在 `target` 目录下生成对应的 `Jar` 包。\n\n> ==注意：该插件必须配置，不然打好的 `jar` 包也是有问题的。==\n\n##### 1.1.4.3 启动\n\n进入 `jar` 包所在位置，在 `命令提示符` 中输入如下命令\n\n```shell\njar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar\n```\n\n执行上述命令就可以看到 `SpringBoot` 运行的日志信息\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911182956629.png\" alt=\"image-20210911182956629\" style=\"zoom:60%;\" />\n\n### 1.2 SpringBoot概述\n\n`SpringBoot` 是由Pivotal团队提供的全新框架，其设计目的是用来==简化==Spring应用的==初始搭建==以及==开发过程==。\n\n大家已经感受了 `SpringBoot` 程序，回过头看看 `SpringBoot` 主要作用是什么，就是简化 `Spring` 的搭建过程和开发过程。\n\n原始 `Spring` 环境搭建和开发存在以下问题：\n\n- 配置繁琐\n- 依赖设置繁琐\n\n`SpringBoot` 程序优点恰巧就是针对 `Spring` 的缺点\n\n- 自动配置。这个是用来解决 `Spring` 程序配置繁琐的问题\n- 起步依赖。这个是用来解决 `Spring` 程序依赖设置繁琐的问题\n- 辅助功能（内置服务器,...）。我们在启动 `SpringBoot` 程序时既没有使用本地的 `tomcat` 也没有使用 `tomcat` 插件，而是使用 `SpringBoot` 内置的服务器。\n\n接下来我们来说一下 `SpringBoot` 的起步依赖\n\n#### 1.2.1 起步依赖\n\n我们使用 `Spring Initializr` 方式创建的 `Maven` 工程的的 `pom.xml` 配置文件中自动生成了很多包含 `starter` 的依赖，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220338109.png\" alt=\"image-20210918220338109\" style=\"zoom:70%;\" />\n\n这些依赖就是==启动依赖==，接下来我们探究一下他是如何实现的。\n\n##### 1.2.1.1 探索父工程\n\n从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220855024.png\" alt=\"image-20210918220855024\" style=\"zoom:80%;\" />\n\n再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221042947.png\" alt=\"image-20210918221042947\" style=\"zoom:80%;\" />\n\n上图中的 `properties` 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 `properties` 中我们找 `servlet` 和 `mysql` 的版本如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221511249.png\" alt=\"image-20210918221511249\" style=\"zoom:80%;\" />\n\n`dependencyManagement` 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 `groupid` 和 `artifactId` 不需要定义 `version`。\n\n而 `build` 标签中也对插件的版本进行了锁定，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221942453.png\" alt=\"image-20210918221942453\" style=\"zoom:80%;\" />\n\n看完了父工程中 `pom.xml` 的配置后不难理解我们工程的的依赖为什么都没有配置 `version`。\n\n##### 1.2.1.2 探索依赖\n\n在我们创建的工程中的 `pom.xml` 中配置了如下依赖\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222321402.png\" alt=\"image-20210918222321402\" style=\"zoom:80%;\" />\n\n进入到该依赖，查看 `pom.xml` 的依赖会发现它引入了如下的依赖\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222607469.png\" alt=\"image-20210918222607469\" style=\"zoom:80%;\" />\n\n里面的引入了 `spring-web` 和 `spring-webmvc` 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 `springMVC` 中的注解的原因。\n\n而依赖 `spring-boot-starter-tomcat` ，从名字基本能确认内部依赖了 `tomcat`，所以我们的工程才能正常启动。\n\n==结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可==\n\n##### 1.2.1.3 小结\n\n**starter**\n\n- `SpringBoot` 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的\n\n**parent**\n\n- 所有 `SpringBoot` 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的\n\n- `spring-boot-starter-parent`（2.5.0）与 `spring-boot-starter-parent`（2.4.6）共计57处坐标版本不同\n\n**实际开发**\n\n- 使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供\n\n  > G：groupid\n  >\n  > A：artifactId\n  >\n  > V：version\n\n- 如发生坐标错误，再指定version（要小心版本冲突）\n\n#### 1.2.2 程序启动\n\n创建的每一个 `SpringBoot` 程序时都包含一个类似于下面的类，我们将这个类称作引导类\n\n```java\n@SpringBootApplication\npublic class Springboot01QuickstartApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Springboot01QuickstartApplication.class, args);\n    }\n}\n```\n\n==注意：==\n\n- `SpringBoot` 在创建项目时，采用jar的打包方式\n\n- `SpringBoot` 的引导类是项目的入口，运行 `main` 方法就可以启动项目\n\n  因为我们在 `pom.xml` 中配置了 `spring-boot-starter-web` 依赖，而该依赖通过前面的学习知道它依赖 `tomcat` ，所以运行 `main` 方法就可以使用 `tomcat` 启动咱们的工程。\n\n#### 1.2.3 切换web服务器\n\n现在我们启动工程使用的是 `tomcat` 服务器，那能不能不使用 `tomcat` 而使用 `jetty` 服务器，`jetty` 在我们 `maven` 高级时讲 `maven` 私服使用的服务器。而要切换 `web` 服务器就需要将默认的 `tomcat` 服务器给排除掉，怎么排除呢？使用 `exclusion` 标签\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <groupId>org.springframework.boot</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下\n\n![image-20210918232512707](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232512707.png)\n\n程序直接停止了，为什么呢？那是因为排除了 `tomcat` 服务器，程序中就没有服务器了。所以此时不光要排除 `tomcat` 服务器，还要引入 `jetty` 服务器。在 `pom.xml` 中因为 `jetty` 的起步依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jetty</artifactId>\n</dependency>\n```\n\n接下来再次运行引导类，在日志信息中就可以看到使用的是 `jetty` 服务器\n\n![image-20210918232904623](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232904623.png)\n\n**小结：**\n\n通过切换服务器，我们不难发现在使用 `SpringBoot` 换技术时只需要导入该技术的起步依赖即可。\n\n## 2，配置文件\n\n### 2.1 配置文件格式\n\n我们现在启动服务器默认的端口号是 `8080`，访问路径可以书写为\n\n```\nhttp://localhost:8080/books/1\n```\n\n在线上环境我们还是希望将端口号改为 `80`，这样在访问的时候就可以不写端口号了，如下\n\n```\nhttp://localhost/books/1\n```\n\n而 `SpringBoot` 程序如何修改呢？`SpringBoot` 提供了多种属性配置方式\n\n- `application.properties`\n\n  ```\n  server.port=80\n  ```\n\n- `application.yml`\n\n  ```yaml\n  server:\n  \tport: 81\n  ```\n\n- `application.yaml`\n\n  ```yaml\n  server:\n  \tport: 82\n  ```\n\n> ==注意：`SpringBoot` 程序的配置文件名必须是 `application` ，只是后缀名不同而已。==\n\n#### 2.1.1 环境准备\n\n创建一个新工程 `springboot_02_base_config` 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917151314753.png\" alt=\"image-20210917151314753\" style=\"zoom:80%;\" />\n\n在该工程中的 `com.itheima.controller` 包下创建一个名为 `BookController` 的控制器。内容如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(\"id ==> \"+id);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n#### 2.1.2 不同配置文件演示\n\n- **application.properties配置文件**\n\n现在需要进行配置，配合文件必须放在 `resources` 目录下，而该目录下有一个名为 `application.properties` 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 `port` ，`Idea` 就会提示，如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161422535.png\" alt=\"image-20210917161422535\" style=\"zoom:80%;\" />\n\n`application.properties` 配置文件内容如下：\n\n```properties\nserver.port=80\n```\n\n启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161720855.png\" alt=\"image-20210917161720855\" style=\"zoom:80%;\" />\n\n- **application.yml配置文件**\n\n删除 `application.properties` 配置文件中的内容。在 `resources` 下创建一个名为 `application.yml` 的配置文件，在该文件中书写端口号的配置项，格式如下：\n\n```yaml\nserver:\n\tport: 81\n```\n\n> ==注意： 在`:`后，数据前一定要加空格。==\n\n而在 `yml` 配置文件中也是有提示功能的，我们也可以在该文件中书写 `port` ，然后 `idea` 就会提示并书写成上面的格式\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162512646.png\" alt=\"image-20210917162512646\" style=\"zoom:80%;\" />\n\n启动服务，可以在控制台看到绑定的端口号是 `81`\n\n![image-20210917162700711](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162700711.png)\n\n- **application.yaml配置文件**\n\n删除 `application.yml` 配置文件和 `application.properties` 配置文件内容，然后在 `resources` 下创建名为 `application.yaml` 的配置文件，配置内容和后缀名为 `yml` 的配置文件中的内容相同，只是使用了不同的后缀名而已\n\n`application.yaml` 配置文件内容如下：\n\n```yaml\nserver:\n\tport: 83\n```\n\n启动服务，在控制台可以看到绑定的端口号\n\n![image-20210917163335913](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163335913.png)\n\n==注意：在配合文件中如果没有提示，可以使用一下方式解决==\n\n- 点击 `File` 选中 `Project Structure`\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163557071.png\" alt=\"image-20210917163557071\" style=\"zoom:80%;\" />\n\n- 弹出如下窗口，按图中标记红框进行选择\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163736458.png\" alt=\"image-20210917163736458\" style=\"zoom:70%;\" />\n\n- 通过上述操作，会弹出如下窗口\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163818051.png\" alt=\"image-20210917163818051\" style=\"zoom:80%;\" />\n\n- 点击上图的 `+` 号，弹出选择该模块的配置文件\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163828518.png\" alt=\"image-20210917163828518\" style=\"zoom:80%;\" />\n\n- 通过上述几步后，就可以看到如下界面。`properties` 类型的配合文件有一个，`ymal` 类型的配置文件有两个\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163846243.png\" alt=\"image-20210917163846243\" style=\"zoom:80%;\" />\n\n#### 2.1.3 三种配合文件的优先级\n\n在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些\n\n`application.properties` 文件内容如下：\n\n```properties\nserver.port=80\n```\n\n`application.yml` 文件内容如下：\n\n```yaml\nserver:\n\tport: 81\n```\n\n`application.yaml` 文件内容如下：\n\n```yaml\nserver:\n\tport: 82\n```\n\n启动服务，在控制台可以看到使用的端口号是 `80`。说明 `application.properties` 的优先级最高\n\n注释掉 `application.properties` 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 `81`，说明 `application.yml` 配置文件为第二优先级。\n\n从上述的验证结果可以确定三种配置文件的优先级是：\n\n==`application.properties` > `application.yml` > `application.yaml`==\n\n> ==注意：==\n>\n> - `SpringBoot` 核心配置文件名为 `application`\n> - `SpringBoot` 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性\n>\n>   例如要设置日志的级别时，可以在配置文件中书写 `logging`，就会提示出来。配置内容如下\n>\n>   ```yaml\n>   logging:\n>     level:\n>       root: info\n>   ```\n\n### 2.2 yaml格式\n\n上面讲了三种不同类型的配置文件，而 `properties` 类型的配合文件之前我们学习过，接下来我们重点学习 `yaml` 类型的配置文件。\n\n**YAML（YAML Ain't Markup Language），一种数据序列化格式。**这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。\n\n最开始我们使用的是 `xml` ，格式如下：\n\n```xml\n<enterprise>\n    <name>itcast</name>\n    <age>16</age>\n    <tel>4006184000</tel>\n</enterprise>\n```\n\n而 `properties` 类型的配置文件如下\n\n```properties\nenterprise.name=itcast\nenterprise.age=16\nenterprise.tel=4006184000\n```\n\n`yaml` 类型的配置文件内容如下\n\n```yaml\nenterprise:\n\tname: itcast\n\tage: 16\n\ttel: 4006184000\n```\n\n**优点：**\n\n- 容易阅读\n\n  `yaml` 类型的配置文件比 `xml` 类型的配置文件更容易阅读，结构更加清晰\n\n- 容易与脚本语言交互\n\n- 以数据为核心，重数据轻格式\n\n  `yaml` 更注重数据，而 `xml` 更注重格式\n\n**YAML 文件扩展名：**\n\n- `.yml` (主流)\n- `.yaml`\n\n上面两种后缀名都可以，以后使用更多的还是 `yml` 的。\n\n#### 2.2.1 语法规则\n\n- 大小写敏感\n\n- 属性层级关系使用多行描述，每行结尾使用冒号结束\n\n- 使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）\n\n  空格的个数并不重要，只要保证同层级的左侧对齐即可。\n\n- 属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）\n\n- \\# 表示注释\n\n==核心规则：数据前面要加空格与冒号隔开==\n\n数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如\n\n```yaml\nenterprise:\n  name: itcast\n  age: 16\n  tel: 4006184000\n  subject:\n    - Java\n    - 前端\n    - 大数据\n```\n\n### 2.3 yaml配置文件数据读取\n\n#### 2.3.1 环境准备\n\n新创建一个名为 `springboot_03_read_data` 的 `SpringBoot` 工程，目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917172736484.png\" alt=\"image-20210917172736484\" style=\"zoom:80%;\" />\n\n在 `com.itheima.controller` 包写创建名为 `BookController` 的控制器，内容如下\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(\"id ==> \"+id);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n在 `com.itheima.domain` 包下创建一个名为 `Enterprise` 的实体类等会用来封装数据，内容如下\n\n```java\npublic class Enterprise {\n    private String name;\n    private int age;\n    private String tel;\n    private String[] subject;\n\n    //setter and getter\n\n    //toString\n}\n```\n\n在 `resources` 下创建一个名为 `application.yml` 的配置文件，里面配置了不同的数据，内容如下\n\n```yaml\nlesson: SpringBoot\n\nserver:\n  port: 80\n\nenterprise:\n  name: itcast\n  age: 16\n  tel: 4006184000\n  subject:\n    - Java\n    - 前端\n    - 大数据\n```\n\n#### 2.3.2 读取配置数据\n\n##### 2.3.2.1 使用 @Value注解\n\n使用 `@Value(\"表达式\")` 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：`${一级属性名.二级属性名……}`\n\n我们可以在 `BookController` 中使用 `@Value` 注解读取配合文件数据，如下\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @Value(\"${lesson}\")\n    private String lesson;\n    @Value(\"${server.port}\")\n    private Integer port;\n    @Value(\"${enterprise.subject[0]}\")\n    private String subject_00;\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(lesson);\n        System.out.println(port);\n        System.out.println(subject_00);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n##### 2.3.2.2 Environment对象\n\n上面方式读取到的数据特别零散，`SpringBoot` 还可以使用 `@Autowired` 注解注入 `Environment` 对象的方式读取数据。这种方式 `SpringBoot` 会将配置文件中所有的数据封装到 `Environment` 对象中，如果需要使用哪个数据只需要通过调用 `Environment` 对象的 `getProperty(String name)` 方法获取。具体代码如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @Autowired\n    private Environment env;\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(env.getProperty(\"lesson\"));\n        System.out.println(env.getProperty(\"enterprise.name\"));\n        System.out.println(env.getProperty(\"enterprise.subject[0]\"));\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n> ==注意：这种方式，框架内容大量数据，而在开发中我们很少使用。==\n\n##### 2.3.2.3 自定义对象\n\n`SpringBoot` 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：\n\n- 将实体类 `bean` 的创建交给 `Spring` 管理。\n\n  在类上添加 `@Component` 注解\n\n- 使用 `@ConfigurationProperties` 注解表示加载配置文件\n\n  在该注解中也可以使用 `prefix` 属性指定只加载指定前缀的数据\n\n- 在 `BookController` 中进行注入\n\n**具体代码如下：**\n\n`Enterprise` 实体类内容如下：\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"enterprise\")\npublic class Enterprise {\n    private String name;\n    private int age;\n    private String tel;\n    private String[] subject;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getTel() {\n        return tel;\n    }\n\n    public void setTel(String tel) {\n        this.tel = tel;\n    }\n\n    public String[] getSubject() {\n        return subject;\n    }\n\n    public void setSubject(String[] subject) {\n        this.subject = subject;\n    }\n\n    @Override\n    public String toString() {\n        return \"Enterprise{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", tel='\" + tel + '\\'' +\n                \", subject=\" + Arrays.toString(subject) +\n                '}';\n    }\n}\n```\n\n`BookController` 内容如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @Autowired\n    private Enterprise enterprise;\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(enterprise.getName());\n        System.out.println(enterprise.getAge());\n        System.out.println(enterprise.getSubject());\n        System.out.println(enterprise.getTel());\n        System.out.println(enterprise.getSubject()[0]);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n==注意：==\n\n使用第三种方式，在实体类上有如下警告提示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917180919390.png\" alt=\"image-20210917180919390\" style=\"zoom:70%;\" />\n\n这个警告提示解决是在 `pom.xml` 中添加如下依赖即可\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n### 2.4 多环境配置\n\n以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 `mysql` ，连接自己电脑上的 `mysql` 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917185253557.png\" alt=\"image-20210917185253557\" style=\"zoom:60%;\" />\n\n来回的修改配置会很麻烦，而 `SpringBoot` 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明\n\n#### 2.4.1 yaml文件\n\n在 `application.yml` 中使用 `---` 来分割不同的配置，内容如下\n\n```yaml\n#开发\nspring:\n  profiles: dev #给开发环境起的名字\nserver:\n  port: 80\n---\n#生产\nspring:\n  profiles: pro #给生产环境起的名字\nserver:\n  port: 81\n---\n#测试\nspring:\n  profiles: test #给测试环境起的名字\nserver:\n  port: 82\n---\n```\n\n上面配置中 `spring.profiles` 是用来给不同的配置起名字的。而如何告知 `SpringBoot` 使用哪段配置呢？可以使用如下配置来启用都一段配置\n\n```yaml\n#设置启用的环境\nspring:\n  profiles:\n    active: dev #表示使用的是开发环境的配置\n```\n\n综上所述，`application.yml` 配置文件内容如下\n\n```yaml\n#设置启用的环境\nspring:\n  profiles:\n    active: dev\n\n---\n#开发\nspring:\n  profiles: dev\nserver:\n  port: 80\n---\n#生产\nspring:\n  profiles: pro\nserver:\n  port: 81\n---\n#测试\nspring:\n  profiles: test\nserver:\n  port: 82\n---\n```\n\n==注意：==\n\n在上面配置中给不同配置起名字的 `spring.profiles` 配置项已经过时。最新用来起名字的配置项是\n\n```yaml\n#开发\nspring:\n  config:\n    activate:\n      on-profile: dev\n```\n\n#### 2.4.2 properties文件\n\n`properties` 类型的配置文件配置多环境需要定义不同的配置文件\n\n- `application-dev.properties` 是开发环境的配置文件。我们在该文件中配置端口号为 `80`\n\n  ```properties\n  server.port=80\n  ```\n\n- `application-test.properties` 是测试环境的配置文件。我们在该文件中配置端口号为 `81`\n\n  ```properties\n  server.port=81\n  ```\n\n- `application-pro.properties` 是生产环境的配置文件。我们在该文件中配置端口号为 `82`\n\n  ```properties\n  server.port=82\n  ```\n\n`SpringBoot` 只会默认加载名为 `application.properties` 的配置文件，所以需要在 `application.properties` 配置文件中设置启用哪个配置文件，配置如下:\n\n```properties\nspring.profiles.active=pro\n```\n\n#### 2.4.3 命令行启动参数设置\n\n使用 `SpringBoot` 开发的程序以后都是打成 `jar` 包，通过 `java -jar xxx.jar` 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。\n\n我们知道 `jar` 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 `SpringBoot` 提供了在运行 `jar` 时设置开启指定的环境的方式，如下\n\n```shell\njava –jar xxx.jar –-spring.profiles.active=test\n```\n\n那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式\n\n```shell\njava –jar xxx.jar –-server.port=88\n```\n\n当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下\n\n```shell\njava –jar springboot.jar –-server.port=88 –-spring.profiles.active=test\n```\n\n大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 `SpringBoot` 官网已经进行了说明，参见 :\n\n```\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config\n```\n\n进入上面网站后会看到如下页面\n\n![image-20210917193910191](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917193910191.png)\n\n如果使用了多种方式配合同一个配置项，优先级高的生效。\n\n### 2.5 配置文件分类\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917194941597.png\" alt=\"image-20210917194941597\" style=\"zoom:70%;\" />\n\n有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下\n\n```shell\njava –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……\n```\n\n针对这种情况，`SpringBoot` 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。\n\n`SpringBoot` 中4级配置文件放置位置：\n\n- 1级：classpath：application.yml\n- 2级：classpath：config/application.yml\n- 3级：file ：application.yml\n- 4级：file ：config/application.yml\n\n> ==说明：==级别越高优先级越高\n\n#### 2.5.1 代码演示\n\n在这里我们只演示不同级别配置文件放置位置的优先级。\n\n##### 2.5.1.1 环境准备\n\n创建一个名为 `springboot_06_config_file` 的 `SpringBoot` 工程，目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200241282.png\" alt=\"image-20210917200241282\" style=\"zoom:80%;\" />\n\n在 `resources` 下创建一个名为 `config` 的目录，在该目录中创建 `application.yml` 配置文件，而在该配置文件中将端口号设置为 `81`，内容如下\n\n```yaml\nserver:\n  port: 81\n```\n\n而在 `resources` 下创建的 `application.yml` 配置文件中并将端口号设置为 `80`，内容如下\n\n```yaml\nserver:\n  port: 80\n```\n\n##### 2.5.1.2 验证1级和2级的优先级\n\n运行启动引导类，可以在控制台看到如下日志信息\n\n![image-20210917200805389](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200805389.png)\n\n通过这个结果可以得出==类路径下的 `config` 下的配置文件优先于类路径下的配置文件。==\n\n##### 2.5.1.3 验证2级和4级的优先级\n\n要验证4级，按照以下步骤完成\n\n- 将工程打成 `jar` 包\n\n  点击工程的 `package` 来打 `jar` 包\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201243721.png\" alt=\"image-20210917201243721\" style=\"zoom:80%;\" />\n\n- 在硬盘上找到 `jar` 包所在位置\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201523669.png\" alt=\"image-20210917201523669\" style=\"zoom:70%;\" />\n\n- 在 `jar` 包所在位置创建 `config` 文件夹，在该文件夹下创建 `application.yml` 配置文件，而在该配合文件中将端口号设置为 `82`\n\n- 在命令行使用以下命令运行程序\n\n  ```shell\n  java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar\n  ```\n\n  运行后日志信息如下\n\n  ![image-20210917201922831](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201922831.png)\n\n  通过这个结果可以得出==file： `config` 下的配置文件优先于类路径下的配置文件。==\n\n> ==注意：==\n>\n> SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 `jar` 所在位置的 `config` 目录下创建一个任意名称的文件夹\n\n## 3，SpringBoot整合junit\n\n回顾 `Spring` 整合 `junit`\n\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = SpringConfig.class)\npublic class UserServiceTest {\n\n    @Autowired\n    private BookService bookService;\n\n    @Test\n    public void testSave(){\n        bookService.save();\n    }\n}\n```\n\n使用 `@RunWith` 注解指定运行器，使用 `@ContextConfiguration` 注解来指定配置类或者配置文件。而 `SpringBoot` 整合 `junit` 特别简单，分为以下三步完成\n\n- 在测试类上添加 `SpringBootTest` 注解\n- 使用 `@Autowired` 注入要测试的资源\n- 定义测试方法进行测试\n\n### 3.1 环境准备\n\n创建一个名为 `springboot_07_test` 的 `SpringBoot` 工程，工程目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917213556673.png\" alt=\"image-20210917213556673\" style=\"zoom:80%;\" />\n\n在 `com.itheima.service` 下创建 `BookService` 接口，内容如下\n\n```java\npublic interface BookService {\n    public void save();\n}\n```\n\n在 `com.itheima.service.impl` 包写创建一个 `BookServiceImpl` 类，使其实现 `BookService` 接口，内容如下\n\n```java\n@Service\npublic class BookServiceImpl implements BookService {\n    @Override\n    public void save() {\n        System.out.println(\"book service is running ...\");\n    }\n}\n```\n\n### 3.2 编写测试类\n\n在 `test/java` 下创建 `com.itheima` 包，在该包下创建测试类，将 `BookService` 注入到该测试类中\n\n```java\n@SpringBootTest\nclass Springboot07TestApplicationTests {\n\n    @Autowired\n    private BookService bookService;\n\n    @Test\n    public void save() {\n        bookService.save();\n    }\n}\n```\n\n> ==注意：==这里的引导类所在包必须是测试类所在包及其子包。\n>\n> 例如：\n>\n> - 引导类所在包是 `com.itheima`\n> - 测试类所在包是 `com.itheima`\n>\n> 如果不满足这个要求的话，就需要在使用 `@SpringBootTest` 注解时，使用 `classes` 属性指定引导类的字节码对象。如 `@SpringBootTest(classes = Springboot07TestApplication.class)`\n\n## 4，SpringBoot整合mybatis\n\n### 4.1 回顾Spring整合Mybatis\n\n`Spring` 整合 `Mybatis` 需要定义很多配置类\n\n- `SpringConfig` 配置类\n\n  - 导入 `JdbcConfig` 配置类\n\n  - 导入 `MybatisConfig` 配置类\n\n    ```java\n    @Configuration\n    @ComponentScan(\"com.itheima\")\n    @PropertySource(\"classpath:jdbc.properties\")\n    @Import({JdbcConfig.class,MyBatisConfig.class})\n    public class SpringConfig {\n    }\n\n    ```\n\n- `JdbcConfig` 配置类\n\n  - 定义数据源（加载properties配置项：driver、url、username、password）\n\n    ```java\n    public class JdbcConfig {\n        @Value(\"${jdbc.driver}\")\n        private String driver;\n        @Value(\"${jdbc.url}\")\n        private String url;\n        @Value(\"${jdbc.username}\")\n        private String userName;\n        @Value(\"${jdbc.password}\")\n        private String password;\n\n        @Bean\n        public DataSource getDataSource(){\n            DruidDataSource ds = new DruidDataSource();\n            ds.setDriverClassName(driver);\n            ds.setUrl(url);\n            ds.setUsername(userName);\n            ds.setPassword(password);\n            return ds;\n        }\n    }\n    ```\n\n- `MybatisConfig` 配置类\n\n  - 定义 `SqlSessionFactoryBean`\n\n  - 定义映射配置\n\n    ```java\n    @Bean\n    public MapperScannerConfigurer getMapperScannerConfigurer(){\n        MapperScannerConfigurer msc = new MapperScannerConfigurer();\n        msc.setBasePackage(\"com.itheima.dao\");\n        return msc;\n    }\n\n    @Bean\n    public SqlSessionFactoryBean getSqlSessionFactoryBean(DataSource dataSource){\n        SqlSessionFactoryBean ssfb = new SqlSessionFactoryBean();\n        ssfb.setTypeAliasesPackage(\"com.itheima.domain\");\n        ssfb.setDataSource(dataSource);\n        return ssfb;\n    }\n\n    ```\n\n### 4.2 SpringBoot整合mybatis\n\n#### 4.2.1 创建模块\n\n- 创建新模块，选择 `Spring Initializr`，并配置模块相关基础信息\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215913779.png\" alt=\"image-20210917215913779\" style=\"zoom:80%;\" />\n\n- 选择当前模块需要使用的技术集（MyBatis、MySQL）\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215958091.png\" alt=\"image-20210917215958091\" style=\"zoom:80%;\" />\n\n#### 4.2.2 定义实体类\n\n在 `com.itheima.domain` 包下定义实体类 `Book`，内容如下\n\n```java\npublic class Book {\n    private Integer id;\n    private String name;\n    private String type;\n    private String description;\n\n    //setter and  getter\n\n    //toString\n}\n```\n\n#### 4.2.3 定义dao接口\n\n在 `com.itheima.dao` 包下定义 `BookDao` 接口，内容如下\n\n```java\npublic interface BookDao {\n    @Select(\"select * from tbl_book where id = #{id}\")\n    public Book getById(Integer id);\n}\n```\n\n#### 4.2.4 定义测试类\n\n在 `test/java` 下定义包 `com.itheima` ，在该包下测试类，内容如下\n\n```java\n@SpringBootTest\nclass Springboot08MybatisApplicationTests {\n\n\t@Autowired\n\tprivate BookDao bookDao;\n\n\t@Test\n\tvoid testGetById() {\n\t\tBook book = bookDao.getById(1);\n\t\tSystem.out.println(book);\n\t}\n}\n```\n\n#### 4.2.5 编写配置\n\n我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 `SpringBoot` 的配置文件中进行配合。\n\n在 `application.yml` 配置文件中配置如下内容\n\n```yml\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm_db\n    username: root\n    password: root\n```\n\n#### 4.2.6 测试\n\n运行测试方法，我们会看到如下错误信息\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917221427930.png\" alt=\"image-20210917221427930\" style=\"zoom:70%;\" />\n\n错误信息显示在 `Spring` 容器中没有 `BookDao` 类型的 `bean`。为什么会出现这种情况呢？\n\n原因是 `Mybatis` 会扫描接口并创建接口的代码对象交给 `Spring` 管理，但是现在并没有告诉 `Mybatis` 哪个是 `dao` 接口。而我们要解决这个问题需要在`BookDao` 接口上使用 `@Mapper` ，`BookDao` 接口改进为\n\n```java\n@Mapper\npublic interface BookDao {\n    @Select(\"select * from tbl_book where id = #{id}\")\n    public Book getById(Integer id);\n}\n```\n\n> ==注意：==\n>\n> `SpringBoot` 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 `jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC`，或在MySQL数据库端配置时区解决此问题\n\n#### 4.2.7 使用Druid数据源\n\n现在我们并没有指定数据源，`SpringBoot` 有默认的数据源，我们也可以指定使用 `Druid` 数据源，按照以下步骤实现\n\n- 导入 `Druid` 依赖\n\n  ```xml\n  <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid</artifactId>\n      <version>1.1.16</version>\n  </dependency>\n  ```\n\n- 在 `application.yml` 配置文件配置\n\n  可以通过 `spring.datasource.type` 来配置使用什么数据源。配置文件内容可以改进为\n\n  ```yaml\n  spring:\n    datasource:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC\n      username: root\n      password: root\n      type: com.alibaba.druid.pool.DruidDataSource\n  ```\n\n## 5，案例\n\n`SpringBoot` 到这就已经学习完毕，接下来我们将学习 `SSM` 时做的三大框架整合的案例用 `SpringBoot` 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 `SpringBoot` 的即可，主要从以下几部分完成\n\n1. pom.xml\n\n   配置起步依赖，必要的资源坐标(druid)\n\n2. application.yml\n\n   设置数据源、端口等\n\n3. 配置类\n\n   全部删除\n\n4. dao\n\n   设置@Mapper\n\n5. 测试类\n\n6. 页面\n\n   放置在resources目录下的static目录中\n\n### 5.1 创建工程\n\n创建 `SpringBoot` 工程，在创建工程时需要勾选 `web`、`mysql`、`mybatis`，工程目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225019868.png\" alt=\"image-20210917225019868\" style=\"zoom:80%;\" />\n\n由于我们工程中使用到了 `Druid` ，所以需要导入 `Druid` 的坐标\n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.16</version>\n</dependency>\n```\n\n### 5.2 代码拷贝\n\n将 `springmvc_11_page` 工程中的 `java` 代码及测试代码连同包拷贝到 `springboot_09_ssm` 工程，按照下图进行拷贝\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225715519.png\" alt=\"image-20210917225715519\" style=\"zoom:70%;\" />\n\n需要修改的内容如下：\n\n- `Springmvc_11_page` 中 `config` 包下的是配置类，而 `SpringBoot` 工程不需要这些配置类，所以这些可以直接删除\n\n- `dao` 包下的接口上在拷贝到 `springboot_09-ssm` 工程中需要在接口中添加 `@Mapper` 注解\n\n- `BookServiceTest` 测试需要改成 `SpringBoot` 整合 `junit` 的\n\n  ```java\n  @SpringBootTest\n  public class BookServiceTest {\n\n      @Autowired\n      private BookService bookService;\n\n      @Test\n      public void testGetById(){\n          Book book = bookService.getById(2);\n          System.out.println(book);\n      }\n\n      @Test\n      public void testGetAll(){\n          List<Book> all = bookService.getAll();\n          System.out.println(all);\n      }\n  }\n  ```\n\n### 5.3 配置文件\n\n在 `application.yml` 配置文件中需要配置如下内容\n\n- 服务的端口号\n- 连接数据库的信息\n- 数据源\n\n```yaml\nserver:\n  port: 80\n\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm_db #?servierTimezone=UTC\n    username: root\n    password: root\n```\n\n### 5.4 静态资源\n\n在 `SpringBoot` 程序中是没有 `webapp` 目录的，那么在 `SpringBoot` 程序中静态资源需要放在什么位置呢？\n\n静态资源需要放在 `resources` 下的 `static` 下，如下图所示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917230702072.png\" alt=\"image-20210917230702072\" style=\"zoom:80%;\" />\n","source":"_posts/SSM学习.md","raw":"---\ntitle: SSM学习\ndate: 2023-03-03\ntags:\n  - Spring\n  - Sprintboot\n  - Mybatis\ncategories:\n  - 技术分享\n---\n\n学点后端吧，学习了黑马的SSM课程,耗时半个寒假，以前提前放假安得一息安寝\n\n用了Springboot再也不想碰Spring\n\n<!-- more -->\n\n## SpringBoot\n\n**今日目标：**\n\n> - 掌握基于SpringBoot框架的程序开发步骤\n> - 熟练使用SpringBoot配置信息修改服务器配置\n> - 基于SpringBoot的完成SSM整合项目开发\n\n## 1，SpringBoot简介\n\n`SpringBoot` 是由 `Pivotal` 团队提供的全新框架，其设计目的是用来==简化== `Spring` 应用的==初始搭建==以及==开发过程==。\n\n使用了 `Spring` 框架后已经简化了我们的开发。而 `SpringBoot` 又是对 `Spring` 开发进行简化的，可想而知 `SpringBoot` 使用的简单及广泛性。既然 `SpringBoot` 是用来简化 `Spring` 开发的，那我们就先回顾一下，以 `SpringMVC` 开发为例：\n\n1. **创建工程，并在 `pom.xml` 配置文件中配置所依赖的坐标**\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911132335452.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n2. **编写 `web3.0` 的配置类**\n\n   作为 `web` 程序，`web3.0` 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133112602.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n3. **编写 `SpringMVC` 的配置类**\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133219847.png\" alt=\"image-20210911133219847\" style=\"zoom:50%;\" />\n\n​ 做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 `Controller` 类，在该类中提供一个方法。\n\n4. **编写 `Controller` 类**\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133532151.png\" alt=\"image-20210911133532151\" style=\"zoom:50%;\" />\n\n从上面的 `SpringMVC` 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。`SpringBoot` 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 `SpingBoot` 简化 `Spring` 开发。\n\n### 1.1 SpringBoot快速入门\n\n#### 1.1.1 开发步骤\n\n`SpringBoot` 开发起来特别简单，分为如下几步：\n\n- 创建新模块，选择Spring初始化，并配置模块相关基础信息\n- 选择当前模块需要使用的技术集\n- 开发控制器类\n- 运行自动生成的Application类\n\n知道了 `SpringBoot` 的开发步骤后，接下来我们进行具体的操作\n\n##### 1.1.1.1 创建新模块\n\n- 点击 `+` 选择 `New Module` 创建新模块\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155135008.png\" alt=\"image-20210911155135008\" style=\"zoom:60%;\" />\n\n- 选择 `Spring Initializr` ，用来创建 `SpringBoot` 工程\n\n  以前我们选择的是 `Maven` ，今天选择 `Spring Initializr` 来快速构建 `SpringBoot` 工程。而在 `Module SDK` 这一项选择我们安装的 `JDK` 版本。\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155249493.png\" alt=\"image-20210911155249493\" style=\"zoom:60%;\" />\n\n- 对 `SpringBoot` 工程进行相关的设置\n\n  我们使用这种方式构建的 `SpringBoot` 工程其实也是 `Maven` 工程，而该方式只是一种快速构建的方式而已。\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155916899.png\" alt=\"image-20210911155916899\" style=\"zoom:67%;\" />\n\n  > ==注意：打包方式这里需要设置为 `Jar`==\n\n- 选中 `Web`，然后勾选 `Spring Web`\n\n  由于我们需要开发一个 `web` 程序，使用到了 `SpringMVC` 技术，所以按照下图红框进行勾选\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160040328.png\" alt=\"image-20210911160040328\" style=\"zoom:60%;\" />\n\n- 下图界面不需要任何修改，直接点击 `Finish` 完成 `SpringBoot` 工程的构建\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160353534.png\" alt=\"image-20210911160353534\" style=\"zoom:70%;\" />\n\n经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 `Application` 类，而该类一会再启动服务器时会用到\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160541833.png\" alt=\"image-20210911160541833\" style=\"zoom:80%;\" />\n\n> ==注意：==\n>\n> 1. 在创建好的工程中不需要创建配置类\n> 2. 创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。\n>\n>    可以删除的目录和文件如下：\n>\n>    - `.mvn`\n>    - `.gitignore`\n>    - `HELP.md`\n>    - `mvnw`\n>    - `mvnw.cmd`\n\n##### 1.1.1.2 创建 `Controller`\n\n在 `com.itheima.controller` 包下创建 `BookController` ，代码如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(\"id ==> \"+id);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n##### 1.1.1.3 启动服务器\n\n运行 `SpringBoot` 工程不需要使用本地的 `Tomcat` 和 插件，只运行项目 `com.itheima` 包下的 `Application` 类，我们就可以在控制台看出如下信息\n\n![image-20210911165642280](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911165642280.png)\n\n##### 1.1.1.4 进行测试\n\n使用 `Postman` 工具来测试我们的程序\n\n![image-20210911160850121](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160850121.png)\n\n通过上面的入门案例我们可以看到使用 `SpringBoot` 进行开发，使整个开发变得很简单，那它是如何做到的呢？\n\n要研究这个问题，我们需要看看 `Application` 类和 `pom.xml` 都书写了什么。先看看 `Applicaion` 类，该类内容如下：\n\n```java\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n这个类中的东西很简单，就在类上添加了一个 `@SpringBootApplication` 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。\n\n再看看 `pom.xml` 配置文件中的内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用-->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n    <groupId>com.itheima</groupId>\n    <artifactId>springboot_01_quickstart</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <!--JDK 的版本-->\n    <properties>\n        <java.version>8</java.version>\n    </properties>\n\n    <dependencies>\n        <!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\t\t<!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <!--这个插件是在打包时需要的，而这里暂时还没有用到-->\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n我们代码之所以能简化，就是因为指定的父工程和 `Spring Web` 依赖实现的。具体的我们后面在聊。\n\n#### 1.1.2 对比\n\n做完 `SpringBoot` 的入门案例后，接下来对比一下 `Spring` 程序和 `SpringBoot` 程序。如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911172200292.png\" alt=\"image-20210911172200292\" style=\"zoom:60%;\" />\n\n- **坐标**\n\n  `Spring` 程序中的坐标需要自己编写，而且坐标非常多\n\n  `SpringBoot` 程序中的坐标是我们在创建工程时进行勾选自动生成的\n\n- **web3.0配置类**\n\n  `Spring` 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂\n\n  `SpringBoot` 程序不需要我们自己书写\n\n- **配置类**\n\n  `Spring/SpringMVC` 程序的配置类需要自己书写。而 `SpringBoot` 程序则不需要书写。\n\n> ==注意：基于Idea的 `Spring Initializr` 快速构建 `SpringBoot` 工程时需要联网。==\n\n#### 1.1.3 官网构建工程\n\n在入门案例中之所以能快速构建 `SpringBoot` 工程，是因为 `Idea` 使用了官网提供了快速构建 `SpringBoot` 工程的组件实现的。那如何在官网进行工程构建呢？通过如下步骤构建\n\n##### 1.1.3.1 进入SpringBoot官网\n\n官网地址如下：\n\n```\nhttps://spring.io/projects/spring-boot\n```\n\n进入到 `SpringBoot` 官网后拖到最下方就可以看到如下内容\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911173712014.png\" alt=\"image-20210911173712014\" style=\"zoom:60%;\" />\n\n然后点击 `Spring Initializr` 超链接就会跳转到如下页面\n\n![image-20210911174110687](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174110687.png)\n\n这个页面内容是不是感觉很眼熟的，这和我们使用 `Idea` 快速构建 `SpringBoot` 工程的界面基本相同。在上面页面输入对应的信息\n\n##### 1.1.3.2 选择依赖\n\n选择 `Spring Web` 可以点击上图右上角的 `ADD DEPENDENCIES... CTRL + B` 按钮，就会出现如下界面\n\n![image-20210911174650679](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174650679.png)\n\n##### 1.1.3.3 生成工程\n\n以上步骤完成后就可以生成 `SpringBoot` 工程了。在页面的最下方点击 `GENERATE CTRL + 回车` 按钮生成工程并下载到本地，如下图所示\n\n![image-20210911175222857](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175222857.png)\n\n打开下载好的压缩包可以看到工程结构和使用 `Idea` 生成的一模一样，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175502834.png\" alt=\"image-20210911175502834\" style=\"zoom:80%;\" />\n\n而打开 `pom.xml` 文件，里面也包含了父工程和 `Spring Web` 的依赖。\n\n通过上面官网的操作，我们知道 `Idea` 中快速构建 `SpringBoot` 工程其实就是使用的官网的快速构建组件，那以后即使没有 `Idea` 也可以使用官网的方式构建 `SpringBoot` 工程。\n\n#### 1.1.4 SpringBoot工程快速启动\n\n##### 1.1.4.1 问题导入\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911180828611.png\" alt=\"image-20210911180828611\" style=\"zoom:50%;\" />\n\n以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 `Tomcat` 和 `Idea` ，在自己电脑上启动后端程序，这显然不现实。\n\n我们后端可以将 `SpringBoot` 工程打成 `jar` 包，该 `jar` 包运行不依赖于 `Tomcat` 和 `Idea` 这些工具也可以正常运行，只是这个 `jar` 包在运行过程中连接和我们自己程序相同的 `Mysql` 数据库即可。这样就可以解决这个问题，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911181714437.png\" alt=\"image-20210911181714437\" style=\"zoom:50%;\" />\n\n那现在问题是如何打包呢？\n\n##### 1.1.4.2 打包\n\n由于我们在构建 `SpringBoot` 工程时已经在 `pom.xml` 中配置了如下插件\n\n```xml\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n```\n\n所以我们只需要使用 `Maven` 的 `package` 指令打包就会在 `target` 目录下生成对应的 `Jar` 包。\n\n> ==注意：该插件必须配置，不然打好的 `jar` 包也是有问题的。==\n\n##### 1.1.4.3 启动\n\n进入 `jar` 包所在位置，在 `命令提示符` 中输入如下命令\n\n```shell\njar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar\n```\n\n执行上述命令就可以看到 `SpringBoot` 运行的日志信息\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911182956629.png\" alt=\"image-20210911182956629\" style=\"zoom:60%;\" />\n\n### 1.2 SpringBoot概述\n\n`SpringBoot` 是由Pivotal团队提供的全新框架，其设计目的是用来==简化==Spring应用的==初始搭建==以及==开发过程==。\n\n大家已经感受了 `SpringBoot` 程序，回过头看看 `SpringBoot` 主要作用是什么，就是简化 `Spring` 的搭建过程和开发过程。\n\n原始 `Spring` 环境搭建和开发存在以下问题：\n\n- 配置繁琐\n- 依赖设置繁琐\n\n`SpringBoot` 程序优点恰巧就是针对 `Spring` 的缺点\n\n- 自动配置。这个是用来解决 `Spring` 程序配置繁琐的问题\n- 起步依赖。这个是用来解决 `Spring` 程序依赖设置繁琐的问题\n- 辅助功能（内置服务器,...）。我们在启动 `SpringBoot` 程序时既没有使用本地的 `tomcat` 也没有使用 `tomcat` 插件，而是使用 `SpringBoot` 内置的服务器。\n\n接下来我们来说一下 `SpringBoot` 的起步依赖\n\n#### 1.2.1 起步依赖\n\n我们使用 `Spring Initializr` 方式创建的 `Maven` 工程的的 `pom.xml` 配置文件中自动生成了很多包含 `starter` 的依赖，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220338109.png\" alt=\"image-20210918220338109\" style=\"zoom:70%;\" />\n\n这些依赖就是==启动依赖==，接下来我们探究一下他是如何实现的。\n\n##### 1.2.1.1 探索父工程\n\n从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220855024.png\" alt=\"image-20210918220855024\" style=\"zoom:80%;\" />\n\n再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221042947.png\" alt=\"image-20210918221042947\" style=\"zoom:80%;\" />\n\n上图中的 `properties` 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 `properties` 中我们找 `servlet` 和 `mysql` 的版本如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221511249.png\" alt=\"image-20210918221511249\" style=\"zoom:80%;\" />\n\n`dependencyManagement` 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 `groupid` 和 `artifactId` 不需要定义 `version`。\n\n而 `build` 标签中也对插件的版本进行了锁定，如下图\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221942453.png\" alt=\"image-20210918221942453\" style=\"zoom:80%;\" />\n\n看完了父工程中 `pom.xml` 的配置后不难理解我们工程的的依赖为什么都没有配置 `version`。\n\n##### 1.2.1.2 探索依赖\n\n在我们创建的工程中的 `pom.xml` 中配置了如下依赖\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222321402.png\" alt=\"image-20210918222321402\" style=\"zoom:80%;\" />\n\n进入到该依赖，查看 `pom.xml` 的依赖会发现它引入了如下的依赖\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222607469.png\" alt=\"image-20210918222607469\" style=\"zoom:80%;\" />\n\n里面的引入了 `spring-web` 和 `spring-webmvc` 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 `springMVC` 中的注解的原因。\n\n而依赖 `spring-boot-starter-tomcat` ，从名字基本能确认内部依赖了 `tomcat`，所以我们的工程才能正常启动。\n\n==结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可==\n\n##### 1.2.1.3 小结\n\n**starter**\n\n- `SpringBoot` 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的\n\n**parent**\n\n- 所有 `SpringBoot` 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的\n\n- `spring-boot-starter-parent`（2.5.0）与 `spring-boot-starter-parent`（2.4.6）共计57处坐标版本不同\n\n**实际开发**\n\n- 使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供\n\n  > G：groupid\n  >\n  > A：artifactId\n  >\n  > V：version\n\n- 如发生坐标错误，再指定version（要小心版本冲突）\n\n#### 1.2.2 程序启动\n\n创建的每一个 `SpringBoot` 程序时都包含一个类似于下面的类，我们将这个类称作引导类\n\n```java\n@SpringBootApplication\npublic class Springboot01QuickstartApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Springboot01QuickstartApplication.class, args);\n    }\n}\n```\n\n==注意：==\n\n- `SpringBoot` 在创建项目时，采用jar的打包方式\n\n- `SpringBoot` 的引导类是项目的入口，运行 `main` 方法就可以启动项目\n\n  因为我们在 `pom.xml` 中配置了 `spring-boot-starter-web` 依赖，而该依赖通过前面的学习知道它依赖 `tomcat` ，所以运行 `main` 方法就可以使用 `tomcat` 启动咱们的工程。\n\n#### 1.2.3 切换web服务器\n\n现在我们启动工程使用的是 `tomcat` 服务器，那能不能不使用 `tomcat` 而使用 `jetty` 服务器，`jetty` 在我们 `maven` 高级时讲 `maven` 私服使用的服务器。而要切换 `web` 服务器就需要将默认的 `tomcat` 服务器给排除掉，怎么排除呢？使用 `exclusion` 标签\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <groupId>org.springframework.boot</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下\n\n![image-20210918232512707](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232512707.png)\n\n程序直接停止了，为什么呢？那是因为排除了 `tomcat` 服务器，程序中就没有服务器了。所以此时不光要排除 `tomcat` 服务器，还要引入 `jetty` 服务器。在 `pom.xml` 中因为 `jetty` 的起步依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jetty</artifactId>\n</dependency>\n```\n\n接下来再次运行引导类，在日志信息中就可以看到使用的是 `jetty` 服务器\n\n![image-20210918232904623](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232904623.png)\n\n**小结：**\n\n通过切换服务器，我们不难发现在使用 `SpringBoot` 换技术时只需要导入该技术的起步依赖即可。\n\n## 2，配置文件\n\n### 2.1 配置文件格式\n\n我们现在启动服务器默认的端口号是 `8080`，访问路径可以书写为\n\n```\nhttp://localhost:8080/books/1\n```\n\n在线上环境我们还是希望将端口号改为 `80`，这样在访问的时候就可以不写端口号了，如下\n\n```\nhttp://localhost/books/1\n```\n\n而 `SpringBoot` 程序如何修改呢？`SpringBoot` 提供了多种属性配置方式\n\n- `application.properties`\n\n  ```\n  server.port=80\n  ```\n\n- `application.yml`\n\n  ```yaml\n  server:\n  \tport: 81\n  ```\n\n- `application.yaml`\n\n  ```yaml\n  server:\n  \tport: 82\n  ```\n\n> ==注意：`SpringBoot` 程序的配置文件名必须是 `application` ，只是后缀名不同而已。==\n\n#### 2.1.1 环境准备\n\n创建一个新工程 `springboot_02_base_config` 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917151314753.png\" alt=\"image-20210917151314753\" style=\"zoom:80%;\" />\n\n在该工程中的 `com.itheima.controller` 包下创建一个名为 `BookController` 的控制器。内容如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(\"id ==> \"+id);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n#### 2.1.2 不同配置文件演示\n\n- **application.properties配置文件**\n\n现在需要进行配置，配合文件必须放在 `resources` 目录下，而该目录下有一个名为 `application.properties` 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 `port` ，`Idea` 就会提示，如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161422535.png\" alt=\"image-20210917161422535\" style=\"zoom:80%;\" />\n\n`application.properties` 配置文件内容如下：\n\n```properties\nserver.port=80\n```\n\n启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161720855.png\" alt=\"image-20210917161720855\" style=\"zoom:80%;\" />\n\n- **application.yml配置文件**\n\n删除 `application.properties` 配置文件中的内容。在 `resources` 下创建一个名为 `application.yml` 的配置文件，在该文件中书写端口号的配置项，格式如下：\n\n```yaml\nserver:\n\tport: 81\n```\n\n> ==注意： 在`:`后，数据前一定要加空格。==\n\n而在 `yml` 配置文件中也是有提示功能的，我们也可以在该文件中书写 `port` ，然后 `idea` 就会提示并书写成上面的格式\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162512646.png\" alt=\"image-20210917162512646\" style=\"zoom:80%;\" />\n\n启动服务，可以在控制台看到绑定的端口号是 `81`\n\n![image-20210917162700711](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162700711.png)\n\n- **application.yaml配置文件**\n\n删除 `application.yml` 配置文件和 `application.properties` 配置文件内容，然后在 `resources` 下创建名为 `application.yaml` 的配置文件，配置内容和后缀名为 `yml` 的配置文件中的内容相同，只是使用了不同的后缀名而已\n\n`application.yaml` 配置文件内容如下：\n\n```yaml\nserver:\n\tport: 83\n```\n\n启动服务，在控制台可以看到绑定的端口号\n\n![image-20210917163335913](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163335913.png)\n\n==注意：在配合文件中如果没有提示，可以使用一下方式解决==\n\n- 点击 `File` 选中 `Project Structure`\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163557071.png\" alt=\"image-20210917163557071\" style=\"zoom:80%;\" />\n\n- 弹出如下窗口，按图中标记红框进行选择\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163736458.png\" alt=\"image-20210917163736458\" style=\"zoom:70%;\" />\n\n- 通过上述操作，会弹出如下窗口\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163818051.png\" alt=\"image-20210917163818051\" style=\"zoom:80%;\" />\n\n- 点击上图的 `+` 号，弹出选择该模块的配置文件\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163828518.png\" alt=\"image-20210917163828518\" style=\"zoom:80%;\" />\n\n- 通过上述几步后，就可以看到如下界面。`properties` 类型的配合文件有一个，`ymal` 类型的配置文件有两个\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163846243.png\" alt=\"image-20210917163846243\" style=\"zoom:80%;\" />\n\n#### 2.1.3 三种配合文件的优先级\n\n在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些\n\n`application.properties` 文件内容如下：\n\n```properties\nserver.port=80\n```\n\n`application.yml` 文件内容如下：\n\n```yaml\nserver:\n\tport: 81\n```\n\n`application.yaml` 文件内容如下：\n\n```yaml\nserver:\n\tport: 82\n```\n\n启动服务，在控制台可以看到使用的端口号是 `80`。说明 `application.properties` 的优先级最高\n\n注释掉 `application.properties` 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 `81`，说明 `application.yml` 配置文件为第二优先级。\n\n从上述的验证结果可以确定三种配置文件的优先级是：\n\n==`application.properties` > `application.yml` > `application.yaml`==\n\n> ==注意：==\n>\n> - `SpringBoot` 核心配置文件名为 `application`\n> - `SpringBoot` 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性\n>\n>   例如要设置日志的级别时，可以在配置文件中书写 `logging`，就会提示出来。配置内容如下\n>\n>   ```yaml\n>   logging:\n>     level:\n>       root: info\n>   ```\n\n### 2.2 yaml格式\n\n上面讲了三种不同类型的配置文件，而 `properties` 类型的配合文件之前我们学习过，接下来我们重点学习 `yaml` 类型的配置文件。\n\n**YAML（YAML Ain't Markup Language），一种数据序列化格式。**这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。\n\n最开始我们使用的是 `xml` ，格式如下：\n\n```xml\n<enterprise>\n    <name>itcast</name>\n    <age>16</age>\n    <tel>4006184000</tel>\n</enterprise>\n```\n\n而 `properties` 类型的配置文件如下\n\n```properties\nenterprise.name=itcast\nenterprise.age=16\nenterprise.tel=4006184000\n```\n\n`yaml` 类型的配置文件内容如下\n\n```yaml\nenterprise:\n\tname: itcast\n\tage: 16\n\ttel: 4006184000\n```\n\n**优点：**\n\n- 容易阅读\n\n  `yaml` 类型的配置文件比 `xml` 类型的配置文件更容易阅读，结构更加清晰\n\n- 容易与脚本语言交互\n\n- 以数据为核心，重数据轻格式\n\n  `yaml` 更注重数据，而 `xml` 更注重格式\n\n**YAML 文件扩展名：**\n\n- `.yml` (主流)\n- `.yaml`\n\n上面两种后缀名都可以，以后使用更多的还是 `yml` 的。\n\n#### 2.2.1 语法规则\n\n- 大小写敏感\n\n- 属性层级关系使用多行描述，每行结尾使用冒号结束\n\n- 使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）\n\n  空格的个数并不重要，只要保证同层级的左侧对齐即可。\n\n- 属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）\n\n- \\# 表示注释\n\n==核心规则：数据前面要加空格与冒号隔开==\n\n数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如\n\n```yaml\nenterprise:\n  name: itcast\n  age: 16\n  tel: 4006184000\n  subject:\n    - Java\n    - 前端\n    - 大数据\n```\n\n### 2.3 yaml配置文件数据读取\n\n#### 2.3.1 环境准备\n\n新创建一个名为 `springboot_03_read_data` 的 `SpringBoot` 工程，目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917172736484.png\" alt=\"image-20210917172736484\" style=\"zoom:80%;\" />\n\n在 `com.itheima.controller` 包写创建名为 `BookController` 的控制器，内容如下\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(\"id ==> \"+id);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n在 `com.itheima.domain` 包下创建一个名为 `Enterprise` 的实体类等会用来封装数据，内容如下\n\n```java\npublic class Enterprise {\n    private String name;\n    private int age;\n    private String tel;\n    private String[] subject;\n\n    //setter and getter\n\n    //toString\n}\n```\n\n在 `resources` 下创建一个名为 `application.yml` 的配置文件，里面配置了不同的数据，内容如下\n\n```yaml\nlesson: SpringBoot\n\nserver:\n  port: 80\n\nenterprise:\n  name: itcast\n  age: 16\n  tel: 4006184000\n  subject:\n    - Java\n    - 前端\n    - 大数据\n```\n\n#### 2.3.2 读取配置数据\n\n##### 2.3.2.1 使用 @Value注解\n\n使用 `@Value(\"表达式\")` 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：`${一级属性名.二级属性名……}`\n\n我们可以在 `BookController` 中使用 `@Value` 注解读取配合文件数据，如下\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @Value(\"${lesson}\")\n    private String lesson;\n    @Value(\"${server.port}\")\n    private Integer port;\n    @Value(\"${enterprise.subject[0]}\")\n    private String subject_00;\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(lesson);\n        System.out.println(port);\n        System.out.println(subject_00);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n##### 2.3.2.2 Environment对象\n\n上面方式读取到的数据特别零散，`SpringBoot` 还可以使用 `@Autowired` 注解注入 `Environment` 对象的方式读取数据。这种方式 `SpringBoot` 会将配置文件中所有的数据封装到 `Environment` 对象中，如果需要使用哪个数据只需要通过调用 `Environment` 对象的 `getProperty(String name)` 方法获取。具体代码如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @Autowired\n    private Environment env;\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(env.getProperty(\"lesson\"));\n        System.out.println(env.getProperty(\"enterprise.name\"));\n        System.out.println(env.getProperty(\"enterprise.subject[0]\"));\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n> ==注意：这种方式，框架内容大量数据，而在开发中我们很少使用。==\n\n##### 2.3.2.3 自定义对象\n\n`SpringBoot` 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：\n\n- 将实体类 `bean` 的创建交给 `Spring` 管理。\n\n  在类上添加 `@Component` 注解\n\n- 使用 `@ConfigurationProperties` 注解表示加载配置文件\n\n  在该注解中也可以使用 `prefix` 属性指定只加载指定前缀的数据\n\n- 在 `BookController` 中进行注入\n\n**具体代码如下：**\n\n`Enterprise` 实体类内容如下：\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"enterprise\")\npublic class Enterprise {\n    private String name;\n    private int age;\n    private String tel;\n    private String[] subject;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getTel() {\n        return tel;\n    }\n\n    public void setTel(String tel) {\n        this.tel = tel;\n    }\n\n    public String[] getSubject() {\n        return subject;\n    }\n\n    public void setSubject(String[] subject) {\n        this.subject = subject;\n    }\n\n    @Override\n    public String toString() {\n        return \"Enterprise{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", tel='\" + tel + '\\'' +\n                \", subject=\" + Arrays.toString(subject) +\n                '}';\n    }\n}\n```\n\n`BookController` 内容如下：\n\n```java\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @Autowired\n    private Enterprise enterprise;\n\n    @GetMapping(\"/{id}\")\n    public String getById(@PathVariable Integer id){\n        System.out.println(enterprise.getName());\n        System.out.println(enterprise.getAge());\n        System.out.println(enterprise.getSubject());\n        System.out.println(enterprise.getTel());\n        System.out.println(enterprise.getSubject()[0]);\n        return \"hello , spring boot!\";\n    }\n}\n```\n\n==注意：==\n\n使用第三种方式，在实体类上有如下警告提示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917180919390.png\" alt=\"image-20210917180919390\" style=\"zoom:70%;\" />\n\n这个警告提示解决是在 `pom.xml` 中添加如下依赖即可\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n### 2.4 多环境配置\n\n以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 `mysql` ，连接自己电脑上的 `mysql` 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917185253557.png\" alt=\"image-20210917185253557\" style=\"zoom:60%;\" />\n\n来回的修改配置会很麻烦，而 `SpringBoot` 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明\n\n#### 2.4.1 yaml文件\n\n在 `application.yml` 中使用 `---` 来分割不同的配置，内容如下\n\n```yaml\n#开发\nspring:\n  profiles: dev #给开发环境起的名字\nserver:\n  port: 80\n---\n#生产\nspring:\n  profiles: pro #给生产环境起的名字\nserver:\n  port: 81\n---\n#测试\nspring:\n  profiles: test #给测试环境起的名字\nserver:\n  port: 82\n---\n```\n\n上面配置中 `spring.profiles` 是用来给不同的配置起名字的。而如何告知 `SpringBoot` 使用哪段配置呢？可以使用如下配置来启用都一段配置\n\n```yaml\n#设置启用的环境\nspring:\n  profiles:\n    active: dev #表示使用的是开发环境的配置\n```\n\n综上所述，`application.yml` 配置文件内容如下\n\n```yaml\n#设置启用的环境\nspring:\n  profiles:\n    active: dev\n\n---\n#开发\nspring:\n  profiles: dev\nserver:\n  port: 80\n---\n#生产\nspring:\n  profiles: pro\nserver:\n  port: 81\n---\n#测试\nspring:\n  profiles: test\nserver:\n  port: 82\n---\n```\n\n==注意：==\n\n在上面配置中给不同配置起名字的 `spring.profiles` 配置项已经过时。最新用来起名字的配置项是\n\n```yaml\n#开发\nspring:\n  config:\n    activate:\n      on-profile: dev\n```\n\n#### 2.4.2 properties文件\n\n`properties` 类型的配置文件配置多环境需要定义不同的配置文件\n\n- `application-dev.properties` 是开发环境的配置文件。我们在该文件中配置端口号为 `80`\n\n  ```properties\n  server.port=80\n  ```\n\n- `application-test.properties` 是测试环境的配置文件。我们在该文件中配置端口号为 `81`\n\n  ```properties\n  server.port=81\n  ```\n\n- `application-pro.properties` 是生产环境的配置文件。我们在该文件中配置端口号为 `82`\n\n  ```properties\n  server.port=82\n  ```\n\n`SpringBoot` 只会默认加载名为 `application.properties` 的配置文件，所以需要在 `application.properties` 配置文件中设置启用哪个配置文件，配置如下:\n\n```properties\nspring.profiles.active=pro\n```\n\n#### 2.4.3 命令行启动参数设置\n\n使用 `SpringBoot` 开发的程序以后都是打成 `jar` 包，通过 `java -jar xxx.jar` 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。\n\n我们知道 `jar` 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 `SpringBoot` 提供了在运行 `jar` 时设置开启指定的环境的方式，如下\n\n```shell\njava –jar xxx.jar –-spring.profiles.active=test\n```\n\n那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式\n\n```shell\njava –jar xxx.jar –-server.port=88\n```\n\n当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下\n\n```shell\njava –jar springboot.jar –-server.port=88 –-spring.profiles.active=test\n```\n\n大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 `SpringBoot` 官网已经进行了说明，参见 :\n\n```\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config\n```\n\n进入上面网站后会看到如下页面\n\n![image-20210917193910191](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917193910191.png)\n\n如果使用了多种方式配合同一个配置项，优先级高的生效。\n\n### 2.5 配置文件分类\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917194941597.png\" alt=\"image-20210917194941597\" style=\"zoom:70%;\" />\n\n有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下\n\n```shell\njava –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……\n```\n\n针对这种情况，`SpringBoot` 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。\n\n`SpringBoot` 中4级配置文件放置位置：\n\n- 1级：classpath：application.yml\n- 2级：classpath：config/application.yml\n- 3级：file ：application.yml\n- 4级：file ：config/application.yml\n\n> ==说明：==级别越高优先级越高\n\n#### 2.5.1 代码演示\n\n在这里我们只演示不同级别配置文件放置位置的优先级。\n\n##### 2.5.1.1 环境准备\n\n创建一个名为 `springboot_06_config_file` 的 `SpringBoot` 工程，目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200241282.png\" alt=\"image-20210917200241282\" style=\"zoom:80%;\" />\n\n在 `resources` 下创建一个名为 `config` 的目录，在该目录中创建 `application.yml` 配置文件，而在该配置文件中将端口号设置为 `81`，内容如下\n\n```yaml\nserver:\n  port: 81\n```\n\n而在 `resources` 下创建的 `application.yml` 配置文件中并将端口号设置为 `80`，内容如下\n\n```yaml\nserver:\n  port: 80\n```\n\n##### 2.5.1.2 验证1级和2级的优先级\n\n运行启动引导类，可以在控制台看到如下日志信息\n\n![image-20210917200805389](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200805389.png)\n\n通过这个结果可以得出==类路径下的 `config` 下的配置文件优先于类路径下的配置文件。==\n\n##### 2.5.1.3 验证2级和4级的优先级\n\n要验证4级，按照以下步骤完成\n\n- 将工程打成 `jar` 包\n\n  点击工程的 `package` 来打 `jar` 包\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201243721.png\" alt=\"image-20210917201243721\" style=\"zoom:80%;\" />\n\n- 在硬盘上找到 `jar` 包所在位置\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201523669.png\" alt=\"image-20210917201523669\" style=\"zoom:70%;\" />\n\n- 在 `jar` 包所在位置创建 `config` 文件夹，在该文件夹下创建 `application.yml` 配置文件，而在该配合文件中将端口号设置为 `82`\n\n- 在命令行使用以下命令运行程序\n\n  ```shell\n  java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar\n  ```\n\n  运行后日志信息如下\n\n  ![image-20210917201922831](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201922831.png)\n\n  通过这个结果可以得出==file： `config` 下的配置文件优先于类路径下的配置文件。==\n\n> ==注意：==\n>\n> SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 `jar` 所在位置的 `config` 目录下创建一个任意名称的文件夹\n\n## 3，SpringBoot整合junit\n\n回顾 `Spring` 整合 `junit`\n\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = SpringConfig.class)\npublic class UserServiceTest {\n\n    @Autowired\n    private BookService bookService;\n\n    @Test\n    public void testSave(){\n        bookService.save();\n    }\n}\n```\n\n使用 `@RunWith` 注解指定运行器，使用 `@ContextConfiguration` 注解来指定配置类或者配置文件。而 `SpringBoot` 整合 `junit` 特别简单，分为以下三步完成\n\n- 在测试类上添加 `SpringBootTest` 注解\n- 使用 `@Autowired` 注入要测试的资源\n- 定义测试方法进行测试\n\n### 3.1 环境准备\n\n创建一个名为 `springboot_07_test` 的 `SpringBoot` 工程，工程目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917213556673.png\" alt=\"image-20210917213556673\" style=\"zoom:80%;\" />\n\n在 `com.itheima.service` 下创建 `BookService` 接口，内容如下\n\n```java\npublic interface BookService {\n    public void save();\n}\n```\n\n在 `com.itheima.service.impl` 包写创建一个 `BookServiceImpl` 类，使其实现 `BookService` 接口，内容如下\n\n```java\n@Service\npublic class BookServiceImpl implements BookService {\n    @Override\n    public void save() {\n        System.out.println(\"book service is running ...\");\n    }\n}\n```\n\n### 3.2 编写测试类\n\n在 `test/java` 下创建 `com.itheima` 包，在该包下创建测试类，将 `BookService` 注入到该测试类中\n\n```java\n@SpringBootTest\nclass Springboot07TestApplicationTests {\n\n    @Autowired\n    private BookService bookService;\n\n    @Test\n    public void save() {\n        bookService.save();\n    }\n}\n```\n\n> ==注意：==这里的引导类所在包必须是测试类所在包及其子包。\n>\n> 例如：\n>\n> - 引导类所在包是 `com.itheima`\n> - 测试类所在包是 `com.itheima`\n>\n> 如果不满足这个要求的话，就需要在使用 `@SpringBootTest` 注解时，使用 `classes` 属性指定引导类的字节码对象。如 `@SpringBootTest(classes = Springboot07TestApplication.class)`\n\n## 4，SpringBoot整合mybatis\n\n### 4.1 回顾Spring整合Mybatis\n\n`Spring` 整合 `Mybatis` 需要定义很多配置类\n\n- `SpringConfig` 配置类\n\n  - 导入 `JdbcConfig` 配置类\n\n  - 导入 `MybatisConfig` 配置类\n\n    ```java\n    @Configuration\n    @ComponentScan(\"com.itheima\")\n    @PropertySource(\"classpath:jdbc.properties\")\n    @Import({JdbcConfig.class,MyBatisConfig.class})\n    public class SpringConfig {\n    }\n\n    ```\n\n- `JdbcConfig` 配置类\n\n  - 定义数据源（加载properties配置项：driver、url、username、password）\n\n    ```java\n    public class JdbcConfig {\n        @Value(\"${jdbc.driver}\")\n        private String driver;\n        @Value(\"${jdbc.url}\")\n        private String url;\n        @Value(\"${jdbc.username}\")\n        private String userName;\n        @Value(\"${jdbc.password}\")\n        private String password;\n\n        @Bean\n        public DataSource getDataSource(){\n            DruidDataSource ds = new DruidDataSource();\n            ds.setDriverClassName(driver);\n            ds.setUrl(url);\n            ds.setUsername(userName);\n            ds.setPassword(password);\n            return ds;\n        }\n    }\n    ```\n\n- `MybatisConfig` 配置类\n\n  - 定义 `SqlSessionFactoryBean`\n\n  - 定义映射配置\n\n    ```java\n    @Bean\n    public MapperScannerConfigurer getMapperScannerConfigurer(){\n        MapperScannerConfigurer msc = new MapperScannerConfigurer();\n        msc.setBasePackage(\"com.itheima.dao\");\n        return msc;\n    }\n\n    @Bean\n    public SqlSessionFactoryBean getSqlSessionFactoryBean(DataSource dataSource){\n        SqlSessionFactoryBean ssfb = new SqlSessionFactoryBean();\n        ssfb.setTypeAliasesPackage(\"com.itheima.domain\");\n        ssfb.setDataSource(dataSource);\n        return ssfb;\n    }\n\n    ```\n\n### 4.2 SpringBoot整合mybatis\n\n#### 4.2.1 创建模块\n\n- 创建新模块，选择 `Spring Initializr`，并配置模块相关基础信息\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215913779.png\" alt=\"image-20210917215913779\" style=\"zoom:80%;\" />\n\n- 选择当前模块需要使用的技术集（MyBatis、MySQL）\n\n  <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215958091.png\" alt=\"image-20210917215958091\" style=\"zoom:80%;\" />\n\n#### 4.2.2 定义实体类\n\n在 `com.itheima.domain` 包下定义实体类 `Book`，内容如下\n\n```java\npublic class Book {\n    private Integer id;\n    private String name;\n    private String type;\n    private String description;\n\n    //setter and  getter\n\n    //toString\n}\n```\n\n#### 4.2.3 定义dao接口\n\n在 `com.itheima.dao` 包下定义 `BookDao` 接口，内容如下\n\n```java\npublic interface BookDao {\n    @Select(\"select * from tbl_book where id = #{id}\")\n    public Book getById(Integer id);\n}\n```\n\n#### 4.2.4 定义测试类\n\n在 `test/java` 下定义包 `com.itheima` ，在该包下测试类，内容如下\n\n```java\n@SpringBootTest\nclass Springboot08MybatisApplicationTests {\n\n\t@Autowired\n\tprivate BookDao bookDao;\n\n\t@Test\n\tvoid testGetById() {\n\t\tBook book = bookDao.getById(1);\n\t\tSystem.out.println(book);\n\t}\n}\n```\n\n#### 4.2.5 编写配置\n\n我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 `SpringBoot` 的配置文件中进行配合。\n\n在 `application.yml` 配置文件中配置如下内容\n\n```yml\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm_db\n    username: root\n    password: root\n```\n\n#### 4.2.6 测试\n\n运行测试方法，我们会看到如下错误信息\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917221427930.png\" alt=\"image-20210917221427930\" style=\"zoom:70%;\" />\n\n错误信息显示在 `Spring` 容器中没有 `BookDao` 类型的 `bean`。为什么会出现这种情况呢？\n\n原因是 `Mybatis` 会扫描接口并创建接口的代码对象交给 `Spring` 管理，但是现在并没有告诉 `Mybatis` 哪个是 `dao` 接口。而我们要解决这个问题需要在`BookDao` 接口上使用 `@Mapper` ，`BookDao` 接口改进为\n\n```java\n@Mapper\npublic interface BookDao {\n    @Select(\"select * from tbl_book where id = #{id}\")\n    public Book getById(Integer id);\n}\n```\n\n> ==注意：==\n>\n> `SpringBoot` 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 `jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC`，或在MySQL数据库端配置时区解决此问题\n\n#### 4.2.7 使用Druid数据源\n\n现在我们并没有指定数据源，`SpringBoot` 有默认的数据源，我们也可以指定使用 `Druid` 数据源，按照以下步骤实现\n\n- 导入 `Druid` 依赖\n\n  ```xml\n  <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid</artifactId>\n      <version>1.1.16</version>\n  </dependency>\n  ```\n\n- 在 `application.yml` 配置文件配置\n\n  可以通过 `spring.datasource.type` 来配置使用什么数据源。配置文件内容可以改进为\n\n  ```yaml\n  spring:\n    datasource:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC\n      username: root\n      password: root\n      type: com.alibaba.druid.pool.DruidDataSource\n  ```\n\n## 5，案例\n\n`SpringBoot` 到这就已经学习完毕，接下来我们将学习 `SSM` 时做的三大框架整合的案例用 `SpringBoot` 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 `SpringBoot` 的即可，主要从以下几部分完成\n\n1. pom.xml\n\n   配置起步依赖，必要的资源坐标(druid)\n\n2. application.yml\n\n   设置数据源、端口等\n\n3. 配置类\n\n   全部删除\n\n4. dao\n\n   设置@Mapper\n\n5. 测试类\n\n6. 页面\n\n   放置在resources目录下的static目录中\n\n### 5.1 创建工程\n\n创建 `SpringBoot` 工程，在创建工程时需要勾选 `web`、`mysql`、`mybatis`，工程目录结构如下\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225019868.png\" alt=\"image-20210917225019868\" style=\"zoom:80%;\" />\n\n由于我们工程中使用到了 `Druid` ，所以需要导入 `Druid` 的坐标\n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.16</version>\n</dependency>\n```\n\n### 5.2 代码拷贝\n\n将 `springmvc_11_page` 工程中的 `java` 代码及测试代码连同包拷贝到 `springboot_09_ssm` 工程，按照下图进行拷贝\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225715519.png\" alt=\"image-20210917225715519\" style=\"zoom:70%;\" />\n\n需要修改的内容如下：\n\n- `Springmvc_11_page` 中 `config` 包下的是配置类，而 `SpringBoot` 工程不需要这些配置类，所以这些可以直接删除\n\n- `dao` 包下的接口上在拷贝到 `springboot_09-ssm` 工程中需要在接口中添加 `@Mapper` 注解\n\n- `BookServiceTest` 测试需要改成 `SpringBoot` 整合 `junit` 的\n\n  ```java\n  @SpringBootTest\n  public class BookServiceTest {\n\n      @Autowired\n      private BookService bookService;\n\n      @Test\n      public void testGetById(){\n          Book book = bookService.getById(2);\n          System.out.println(book);\n      }\n\n      @Test\n      public void testGetAll(){\n          List<Book> all = bookService.getAll();\n          System.out.println(all);\n      }\n  }\n  ```\n\n### 5.3 配置文件\n\n在 `application.yml` 配置文件中需要配置如下内容\n\n- 服务的端口号\n- 连接数据库的信息\n- 数据源\n\n```yaml\nserver:\n  port: 80\n\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm_db #?servierTimezone=UTC\n    username: root\n    password: root\n```\n\n### 5.4 静态资源\n\n在 `SpringBoot` 程序中是没有 `webapp` 目录的，那么在 `SpringBoot` 程序中静态资源需要放在什么位置呢？\n\n静态资源需要放在 `resources` 下的 `static` 下，如下图所示\n\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917230702072.png\" alt=\"image-20210917230702072\" style=\"zoom:80%;\" />\n","slug":"SSM学习","published":1,"updated":"2024-01-06T05:11:37.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3r000hq05zgi0o605x","content":"<p>学点后端吧，学习了黑马的SSM课程,耗时半个寒假，以前提前放假安得一息安寝</p>\n<p>用了Springboot再也不想碰Spring</p>\n<span id=\"more\"></span>\n\n<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><p><strong>今日目标：</strong></p>\n<blockquote>\n<ul>\n<li>掌握基于SpringBoot框架的程序开发步骤</li>\n<li>熟练使用SpringBoot配置信息修改服务器配置</li>\n<li>基于SpringBoot的完成SSM整合项目开发</li>\n</ul>\n</blockquote>\n<h2 id=\"1，SpringBoot简介\"><a href=\"#1，SpringBoot简介\" class=\"headerlink\" title=\"1，SpringBoot简介\"></a>1，SpringBoot简介</h2><p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来==简化== <code>Spring</code> 应用的==初始搭建==以及==开发过程==。</p>\n<p>使用了 <code>Spring</code> 框架后已经简化了我们的开发。而 <code>SpringBoot</code> 又是对 <code>Spring</code> 开发进行简化的，可想而知 <code>SpringBoot</code> 使用的简单及广泛性。既然 <code>SpringBoot</code> 是用来简化 <code>Spring</code> 开发的，那我们就先回顾一下，以 <code>SpringMVC</code> 开发为例：</p>\n<ol>\n<li><strong>创建工程，并在 <code>pom.xml</code> 配置文件中配置所依赖的坐标</strong></li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911132335452.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n<ol start=\"2\">\n<li><p><strong>编写 <code>web3.0</code> 的配置类</strong></p>\n<p>作为 <code>web</code> 程序，<code>web3.0</code> 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下</p>\n</li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133112602.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n<ol start=\"3\">\n<li><strong>编写 <code>SpringMVC</code> 的配置类</strong></li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133219847.png\" alt=\"image-20210911133219847\" style=\"zoom:50%;\" />\n\n<p>​ 做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 <code>Controller</code> 类，在该类中提供一个方法。</p>\n<ol start=\"4\">\n<li><strong>编写 <code>Controller</code> 类</strong></li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133532151.png\" alt=\"image-20210911133532151\" style=\"zoom:50%;\" />\n\n<p>从上面的 <code>SpringMVC</code> 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。<code>SpringBoot</code> 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 <code>SpingBoot</code> 简化 <code>Spring</code> 开发。</p>\n<h3 id=\"1-1-SpringBoot快速入门\"><a href=\"#1-1-SpringBoot快速入门\" class=\"headerlink\" title=\"1.1 SpringBoot快速入门\"></a>1.1 SpringBoot快速入门</h3><h4 id=\"1-1-1-开发步骤\"><a href=\"#1-1-1-开发步骤\" class=\"headerlink\" title=\"1.1.1 开发步骤\"></a>1.1.1 开发步骤</h4><p><code>SpringBoot</code> 开发起来特别简单，分为如下几步：</p>\n<ul>\n<li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li>\n<li>选择当前模块需要使用的技术集</li>\n<li>开发控制器类</li>\n<li>运行自动生成的Application类</li>\n</ul>\n<p>知道了 <code>SpringBoot</code> 的开发步骤后，接下来我们进行具体的操作</p>\n<h5 id=\"1-1-1-1-创建新模块\"><a href=\"#1-1-1-1-创建新模块\" class=\"headerlink\" title=\"1.1.1.1 创建新模块\"></a>1.1.1.1 创建新模块</h5><ul>\n<li>点击 <code>+</code> 选择 <code>New Module</code> 创建新模块</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155135008.png\" alt=\"image-20210911155135008\" style=\"zoom:60%;\" />\n\n<ul>\n<li><p>选择 <code>Spring Initializr</code> ，用来创建 <code>SpringBoot</code> 工程</p>\n<p>以前我们选择的是 <code>Maven</code> ，今天选择 <code>Spring Initializr</code> 来快速构建 <code>SpringBoot</code> 工程。而在 <code>Module SDK</code> 这一项选择我们安装的 <code>JDK</code> 版本。</p>\n</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155249493.png\" alt=\"image-20210911155249493\" style=\"zoom:60%;\" />\n\n<ul>\n<li><p>对 <code>SpringBoot</code> 工程进行相关的设置</p>\n<p>我们使用这种方式构建的 <code>SpringBoot</code> 工程其实也是 <code>Maven</code> 工程，而该方式只是一种快速构建的方式而已。</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155916899.png\" alt=\"image-20210911155916899\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>==注意：打包方式这里需要设置为 <code>Jar</code>==</p>\n</blockquote>\n</li>\n<li><p>选中 <code>Web</code>，然后勾选 <code>Spring Web</code></p>\n<p>由于我们需要开发一个 <code>web</code> 程序，使用到了 <code>SpringMVC</code> 技术，所以按照下图红框进行勾选</p>\n</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160040328.png\" alt=\"image-20210911160040328\" style=\"zoom:60%;\" />\n\n<ul>\n<li>下图界面不需要任何修改，直接点击 <code>Finish</code> 完成 <code>SpringBoot</code> 工程的构建</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160353534.png\" alt=\"image-20210911160353534\" style=\"zoom:70%;\" />\n\n<p>经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 <code>Application</code> 类，而该类一会再启动服务器时会用到</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160541833.png\" alt=\"image-20210911160541833\" style=\"zoom:80%;\" />\n\n<blockquote>\n<p>==注意：==</p>\n<ol>\n<li><p>在创建好的工程中不需要创建配置类</p>\n</li>\n<li><p>创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。</p>\n<p>可以删除的目录和文件如下：</p>\n<ul>\n<li><code>.mvn</code></li>\n<li><code>.gitignore</code></li>\n<li><code>HELP.md</code></li>\n<li><code>mvnw</code></li>\n<li><code>mvnw.cmd</code></li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h5 id=\"1-1-1-2-创建-Controller\"><a href=\"#1-1-1-2-创建-Controller\" class=\"headerlink\" title=\"1.1.1.2 创建 Controller\"></a>1.1.1.2 创建 <code>Controller</code></h5><p>在 <code>com.itheima.controller</code> 包下创建 <code>BookController</code> ，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id ==&gt; &quot;</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-1-1-3-启动服务器\"><a href=\"#1-1-1-3-启动服务器\" class=\"headerlink\" title=\"1.1.1.3 启动服务器\"></a>1.1.1.3 启动服务器</h5><p>运行 <code>SpringBoot</code> 工程不需要使用本地的 <code>Tomcat</code> 和 插件，只运行项目 <code>com.itheima</code> 包下的 <code>Application</code> 类，我们就可以在控制台看出如下信息</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911165642280.png\" alt=\"image-20210911165642280\"></p>\n<h5 id=\"1-1-1-4-进行测试\"><a href=\"#1-1-1-4-进行测试\" class=\"headerlink\" title=\"1.1.1.4 进行测试\"></a>1.1.1.4 进行测试</h5><p>使用 <code>Postman</code> 工具来测试我们的程序</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160850121.png\" alt=\"image-20210911160850121\"></p>\n<p>通过上面的入门案例我们可以看到使用 <code>SpringBoot</code> 进行开发，使整个开发变得很简单，那它是如何做到的呢？</p>\n<p>要研究这个问题，我们需要看看 <code>Application</code> 类和 <code>pom.xml</code> 都书写了什么。先看看 <code>Applicaion</code> 类，该类内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个类中的东西很简单，就在类上添加了一个 <code>@SpringBootApplication</code> 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。</p>\n<p>再看看 <code>pom.xml</code> 配置文件中的内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springboot_01_quickstart<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--JDK 的版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--这个插件是在打包时需要的，而这里暂时还没有用到--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们代码之所以能简化，就是因为指定的父工程和 <code>Spring Web</code> 依赖实现的。具体的我们后面在聊。</p>\n<h4 id=\"1-1-2-对比\"><a href=\"#1-1-2-对比\" class=\"headerlink\" title=\"1.1.2 对比\"></a>1.1.2 对比</h4><p>做完 <code>SpringBoot</code> 的入门案例后，接下来对比一下 <code>Spring</code> 程序和 <code>SpringBoot</code> 程序。如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911172200292.png\" alt=\"image-20210911172200292\" style=\"zoom:60%;\" />\n\n<ul>\n<li><p><strong>坐标</strong></p>\n<p><code>Spring</code> 程序中的坐标需要自己编写，而且坐标非常多</p>\n<p><code>SpringBoot</code> 程序中的坐标是我们在创建工程时进行勾选自动生成的</p>\n</li>\n<li><p><strong>web3.0配置类</strong></p>\n<p><code>Spring</code> 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂</p>\n<p><code>SpringBoot</code> 程序不需要我们自己书写</p>\n</li>\n<li><p><strong>配置类</strong></p>\n<p><code>Spring/SpringMVC</code> 程序的配置类需要自己书写。而 <code>SpringBoot</code> 程序则不需要书写。</p>\n</li>\n</ul>\n<blockquote>\n<p>==注意：基于Idea的 <code>Spring Initializr</code> 快速构建 <code>SpringBoot</code> 工程时需要联网。==</p>\n</blockquote>\n<h4 id=\"1-1-3-官网构建工程\"><a href=\"#1-1-3-官网构建工程\" class=\"headerlink\" title=\"1.1.3 官网构建工程\"></a>1.1.3 官网构建工程</h4><p>在入门案例中之所以能快速构建 <code>SpringBoot</code> 工程，是因为 <code>Idea</code> 使用了官网提供了快速构建 <code>SpringBoot</code> 工程的组件实现的。那如何在官网进行工程构建呢？通过如下步骤构建</p>\n<h5 id=\"1-1-3-1-进入SpringBoot官网\"><a href=\"#1-1-3-1-进入SpringBoot官网\" class=\"headerlink\" title=\"1.1.3.1 进入SpringBoot官网\"></a>1.1.3.1 进入SpringBoot官网</h5><p>官网地址如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://spring.io/projects/spring-boot</span><br></pre></td></tr></table></figure>\n\n<p>进入到 <code>SpringBoot</code> 官网后拖到最下方就可以看到如下内容</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911173712014.png\" alt=\"image-20210911173712014\" style=\"zoom:60%;\" />\n\n<p>然后点击 <code>Spring Initializr</code> 超链接就会跳转到如下页面</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174110687.png\" alt=\"image-20210911174110687\"></p>\n<p>这个页面内容是不是感觉很眼熟的，这和我们使用 <code>Idea</code> 快速构建 <code>SpringBoot</code> 工程的界面基本相同。在上面页面输入对应的信息</p>\n<h5 id=\"1-1-3-2-选择依赖\"><a href=\"#1-1-3-2-选择依赖\" class=\"headerlink\" title=\"1.1.3.2 选择依赖\"></a>1.1.3.2 选择依赖</h5><p>选择 <code>Spring Web</code> 可以点击上图右上角的 <code>ADD DEPENDENCIES... CTRL + B</code> 按钮，就会出现如下界面</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174650679.png\" alt=\"image-20210911174650679\"></p>\n<h5 id=\"1-1-3-3-生成工程\"><a href=\"#1-1-3-3-生成工程\" class=\"headerlink\" title=\"1.1.3.3 生成工程\"></a>1.1.3.3 生成工程</h5><p>以上步骤完成后就可以生成 <code>SpringBoot</code> 工程了。在页面的最下方点击 <code>GENERATE CTRL + 回车</code> 按钮生成工程并下载到本地，如下图所示</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175222857.png\" alt=\"image-20210911175222857\"></p>\n<p>打开下载好的压缩包可以看到工程结构和使用 <code>Idea</code> 生成的一模一样，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175502834.png\" alt=\"image-20210911175502834\" style=\"zoom:80%;\" />\n\n<p>而打开 <code>pom.xml</code> 文件，里面也包含了父工程和 <code>Spring Web</code> 的依赖。</p>\n<p>通过上面官网的操作，我们知道 <code>Idea</code> 中快速构建 <code>SpringBoot</code> 工程其实就是使用的官网的快速构建组件，那以后即使没有 <code>Idea</code> 也可以使用官网的方式构建 <code>SpringBoot</code> 工程。</p>\n<h4 id=\"1-1-4-SpringBoot工程快速启动\"><a href=\"#1-1-4-SpringBoot工程快速启动\" class=\"headerlink\" title=\"1.1.4 SpringBoot工程快速启动\"></a>1.1.4 SpringBoot工程快速启动</h4><h5 id=\"1-1-4-1-问题导入\"><a href=\"#1-1-4-1-问题导入\" class=\"headerlink\" title=\"1.1.4.1 问题导入\"></a>1.1.4.1 问题导入</h5><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911180828611.png\" alt=\"image-20210911180828611\" style=\"zoom:50%;\" />\n\n<p>以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 <code>Tomcat</code> 和 <code>Idea</code> ，在自己电脑上启动后端程序，这显然不现实。</p>\n<p>我们后端可以将 <code>SpringBoot</code> 工程打成 <code>jar</code> 包，该 <code>jar</code> 包运行不依赖于 <code>Tomcat</code> 和 <code>Idea</code> 这些工具也可以正常运行，只是这个 <code>jar</code> 包在运行过程中连接和我们自己程序相同的 <code>Mysql</code> 数据库即可。这样就可以解决这个问题，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911181714437.png\" alt=\"image-20210911181714437\" style=\"zoom:50%;\" />\n\n<p>那现在问题是如何打包呢？</p>\n<h5 id=\"1-1-4-2-打包\"><a href=\"#1-1-4-2-打包\" class=\"headerlink\" title=\"1.1.4.2 打包\"></a>1.1.4.2 打包</h5><p>由于我们在构建 <code>SpringBoot</code> 工程时已经在 <code>pom.xml</code> 中配置了如下插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以我们只需要使用 <code>Maven</code> 的 <code>package</code> 指令打包就会在 <code>target</code> 目录下生成对应的 <code>Jar</code> 包。</p>\n<blockquote>\n<p>==注意：该插件必须配置，不然打好的 <code>jar</code> 包也是有问题的。==</p>\n</blockquote>\n<h5 id=\"1-1-4-3-启动\"><a href=\"#1-1-4-3-启动\" class=\"headerlink\" title=\"1.1.4.3 启动\"></a>1.1.4.3 启动</h5><p>进入 <code>jar</code> 包所在位置，在 <code>命令提示符</code> 中输入如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>执行上述命令就可以看到 <code>SpringBoot</code> 运行的日志信息</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911182956629.png\" alt=\"image-20210911182956629\" style=\"zoom:60%;\" />\n\n<h3 id=\"1-2-SpringBoot概述\"><a href=\"#1-2-SpringBoot概述\" class=\"headerlink\" title=\"1.2 SpringBoot概述\"></a>1.2 SpringBoot概述</h3><p><code>SpringBoot</code> 是由Pivotal团队提供的全新框架，其设计目的是用来==简化==Spring应用的==初始搭建==以及==开发过程==。</p>\n<p>大家已经感受了 <code>SpringBoot</code> 程序，回过头看看 <code>SpringBoot</code> 主要作用是什么，就是简化 <code>Spring</code> 的搭建过程和开发过程。</p>\n<p>原始 <code>Spring</code> 环境搭建和开发存在以下问题：</p>\n<ul>\n<li>配置繁琐</li>\n<li>依赖设置繁琐</li>\n</ul>\n<p><code>SpringBoot</code> 程序优点恰巧就是针对 <code>Spring</code> 的缺点</p>\n<ul>\n<li>自动配置。这个是用来解决 <code>Spring</code> 程序配置繁琐的问题</li>\n<li>起步依赖。这个是用来解决 <code>Spring</code> 程序依赖设置繁琐的问题</li>\n<li>辅助功能（内置服务器,…）。我们在启动 <code>SpringBoot</code> 程序时既没有使用本地的 <code>tomcat</code> 也没有使用 <code>tomcat</code> 插件，而是使用 <code>SpringBoot</code> 内置的服务器。</li>\n</ul>\n<p>接下来我们来说一下 <code>SpringBoot</code> 的起步依赖</p>\n<h4 id=\"1-2-1-起步依赖\"><a href=\"#1-2-1-起步依赖\" class=\"headerlink\" title=\"1.2.1 起步依赖\"></a>1.2.1 起步依赖</h4><p>我们使用 <code>Spring Initializr</code> 方式创建的 <code>Maven</code> 工程的的 <code>pom.xml</code> 配置文件中自动生成了很多包含 <code>starter</code> 的依赖，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220338109.png\" alt=\"image-20210918220338109\" style=\"zoom:70%;\" />\n\n<p>这些依赖就是==启动依赖==，接下来我们探究一下他是如何实现的。</p>\n<h5 id=\"1-2-1-1-探索父工程\"><a href=\"#1-2-1-1-探索父工程\" class=\"headerlink\" title=\"1.2.1.1 探索父工程\"></a>1.2.1.1 探索父工程</h5><p>从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220855024.png\" alt=\"image-20210918220855024\" style=\"zoom:80%;\" />\n\n<p>再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221042947.png\" alt=\"image-20210918221042947\" style=\"zoom:80%;\" />\n\n<p>上图中的 <code>properties</code> 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 <code>properties</code> 中我们找 <code>servlet</code> 和 <code>mysql</code> 的版本如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221511249.png\" alt=\"image-20210918221511249\" style=\"zoom:80%;\" />\n\n<p><code>dependencyManagement</code> 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 <code>groupid</code> 和 <code>artifactId</code> 不需要定义 <code>version</code>。</p>\n<p>而 <code>build</code> 标签中也对插件的版本进行了锁定，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221942453.png\" alt=\"image-20210918221942453\" style=\"zoom:80%;\" />\n\n<p>看完了父工程中 <code>pom.xml</code> 的配置后不难理解我们工程的的依赖为什么都没有配置 <code>version</code>。</p>\n<h5 id=\"1-2-1-2-探索依赖\"><a href=\"#1-2-1-2-探索依赖\" class=\"headerlink\" title=\"1.2.1.2 探索依赖\"></a>1.2.1.2 探索依赖</h5><p>在我们创建的工程中的 <code>pom.xml</code> 中配置了如下依赖</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222321402.png\" alt=\"image-20210918222321402\" style=\"zoom:80%;\" />\n\n<p>进入到该依赖，查看 <code>pom.xml</code> 的依赖会发现它引入了如下的依赖</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222607469.png\" alt=\"image-20210918222607469\" style=\"zoom:80%;\" />\n\n<p>里面的引入了 <code>spring-web</code> 和 <code>spring-webmvc</code> 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 <code>springMVC</code> 中的注解的原因。</p>\n<p>而依赖 <code>spring-boot-starter-tomcat</code> ，从名字基本能确认内部依赖了 <code>tomcat</code>，所以我们的工程才能正常启动。</p>\n<p>==结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可==</p>\n<h5 id=\"1-2-1-3-小结\"><a href=\"#1-2-1-3-小结\" class=\"headerlink\" title=\"1.2.1.3 小结\"></a>1.2.1.3 小结</h5><p><strong>starter</strong></p>\n<ul>\n<li><code>SpringBoot</code> 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li>\n</ul>\n<p><strong>parent</strong></p>\n<ul>\n<li><p>所有 <code>SpringBoot</code> 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</p>\n</li>\n<li><p><code>spring-boot-starter-parent</code>（2.5.0）与 <code>spring-boot-starter-parent</code>（2.4.6）共计57处坐标版本不同</p>\n</li>\n</ul>\n<p><strong>实际开发</strong></p>\n<ul>\n<li><p>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</p>\n<blockquote>\n<p>G：groupid</p>\n<p>A：artifactId</p>\n<p>V：version</p>\n</blockquote>\n</li>\n<li><p>如发生坐标错误，再指定version（要小心版本冲突）</p>\n</li>\n</ul>\n<h4 id=\"1-2-2-程序启动\"><a href=\"#1-2-2-程序启动\" class=\"headerlink\" title=\"1.2.2 程序启动\"></a>1.2.2 程序启动</h4><p>创建的每一个 <code>SpringBoot</code> 程序时都包含一个类似于下面的类，我们将这个类称作引导类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Springboot01QuickstartApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==注意：==</p>\n<ul>\n<li><p><code>SpringBoot</code> 在创建项目时，采用jar的打包方式</p>\n</li>\n<li><p><code>SpringBoot</code> 的引导类是项目的入口，运行 <code>main</code> 方法就可以启动项目</p>\n<p>因为我们在 <code>pom.xml</code> 中配置了 <code>spring-boot-starter-web</code> 依赖，而该依赖通过前面的学习知道它依赖 <code>tomcat</code> ，所以运行 <code>main</code> 方法就可以使用 <code>tomcat</code> 启动咱们的工程。</p>\n</li>\n</ul>\n<h4 id=\"1-2-3-切换web服务器\"><a href=\"#1-2-3-切换web服务器\" class=\"headerlink\" title=\"1.2.3 切换web服务器\"></a>1.2.3 切换web服务器</h4><p>现在我们启动工程使用的是 <code>tomcat</code> 服务器，那能不能不使用 <code>tomcat</code> 而使用 <code>jetty</code> 服务器，<code>jetty</code> 在我们 <code>maven</code> 高级时讲 <code>maven</code> 私服使用的服务器。而要切换 <code>web</code> 服务器就需要将默认的 <code>tomcat</code> 服务器给排除掉，怎么排除呢？使用 <code>exclusion</code> 标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232512707.png\" alt=\"image-20210918232512707\"></p>\n<p>程序直接停止了，为什么呢？那是因为排除了 <code>tomcat</code> 服务器，程序中就没有服务器了。所以此时不光要排除 <code>tomcat</code> 服务器，还要引入 <code>jetty</code> 服务器。在 <code>pom.xml</code> 中因为 <code>jetty</code> 的起步依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来再次运行引导类，在日志信息中就可以看到使用的是 <code>jetty</code> 服务器</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232904623.png\" alt=\"image-20210918232904623\"></p>\n<p><strong>小结：</strong></p>\n<p>通过切换服务器，我们不难发现在使用 <code>SpringBoot</code> 换技术时只需要导入该技术的起步依赖即可。</p>\n<h2 id=\"2，配置文件\"><a href=\"#2，配置文件\" class=\"headerlink\" title=\"2，配置文件\"></a>2，配置文件</h2><h3 id=\"2-1-配置文件格式\"><a href=\"#2-1-配置文件格式\" class=\"headerlink\" title=\"2.1 配置文件格式\"></a>2.1 配置文件格式</h3><p>我们现在启动服务器默认的端口号是 <code>8080</code>，访问路径可以书写为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/books/1</span><br></pre></td></tr></table></figure>\n\n<p>在线上环境我们还是希望将端口号改为 <code>80</code>，这样在访问的时候就可以不写端口号了，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost/books/1</span><br></pre></td></tr></table></figure>\n\n<p>而 <code>SpringBoot</code> 程序如何修改呢？<code>SpringBoot</code> 提供了多种属性配置方式</p>\n<ul>\n<li><p><code>application.properties</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=80</span><br></pre></td></tr></table></figure></li>\n<li><p><code>application.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>application.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>==注意：<code>SpringBoot</code> 程序的配置文件名必须是 <code>application</code> ，只是后缀名不同而已。==</p>\n</blockquote>\n<h4 id=\"2-1-1-环境准备\"><a href=\"#2-1-1-环境准备\" class=\"headerlink\" title=\"2.1.1 环境准备\"></a>2.1.1 环境准备</h4><p>创建一个新工程 <code>springboot_02_base_config</code> 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917151314753.png\" alt=\"image-20210917151314753\" style=\"zoom:80%;\" />\n\n<p>在该工程中的 <code>com.itheima.controller</code> 包下创建一个名为 <code>BookController</code> 的控制器。内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id ==&gt; &quot;</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-不同配置文件演示\"><a href=\"#2-1-2-不同配置文件演示\" class=\"headerlink\" title=\"2.1.2 不同配置文件演示\"></a>2.1.2 不同配置文件演示</h4><ul>\n<li><strong>application.properties配置文件</strong></li>\n</ul>\n<p>现在需要进行配置，配合文件必须放在 <code>resources</code> 目录下，而该目录下有一个名为 <code>application.properties</code> 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 <code>port</code> ，<code>Idea</code> 就会提示，如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161422535.png\" alt=\"image-20210917161422535\" style=\"zoom:80%;\" />\n\n<p><code>application.properties</code> 配置文件内容如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161720855.png\" alt=\"image-20210917161720855\" style=\"zoom:80%;\" />\n\n<ul>\n<li><strong>application.yml配置文件</strong></li>\n</ul>\n<p>删除 <code>application.properties</code> 配置文件中的内容。在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，在该文件中书写端口号的配置项，格式如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意： 在<code>:</code>后，数据前一定要加空格。==</p>\n</blockquote>\n<p>而在 <code>yml</code> 配置文件中也是有提示功能的，我们也可以在该文件中书写 <code>port</code> ，然后 <code>idea</code> 就会提示并书写成上面的格式</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162512646.png\" alt=\"image-20210917162512646\" style=\"zoom:80%;\" />\n\n<p>启动服务，可以在控制台看到绑定的端口号是 <code>81</code></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162700711.png\" alt=\"image-20210917162700711\"></p>\n<ul>\n<li><strong>application.yaml配置文件</strong></li>\n</ul>\n<p>删除 <code>application.yml</code> 配置文件和 <code>application.properties</code> 配置文件内容，然后在 <code>resources</code> 下创建名为 <code>application.yaml</code> 的配置文件，配置内容和后缀名为 <code>yml</code> 的配置文件中的内容相同，只是使用了不同的后缀名而已</p>\n<p><code>application.yaml</code> 配置文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">83</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务，在控制台可以看到绑定的端口号</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163335913.png\" alt=\"image-20210917163335913\"></p>\n<p>==注意：在配合文件中如果没有提示，可以使用一下方式解决==</p>\n<ul>\n<li>点击 <code>File</code> 选中 <code>Project Structure</code></li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163557071.png\" alt=\"image-20210917163557071\" style=\"zoom:80%;\" />\n\n<ul>\n<li>弹出如下窗口，按图中标记红框进行选择</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163736458.png\" alt=\"image-20210917163736458\" style=\"zoom:70%;\" />\n\n<ul>\n<li>通过上述操作，会弹出如下窗口</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163818051.png\" alt=\"image-20210917163818051\" style=\"zoom:80%;\" />\n\n<ul>\n<li>点击上图的 <code>+</code> 号，弹出选择该模块的配置文件</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163828518.png\" alt=\"image-20210917163828518\" style=\"zoom:80%;\" />\n\n<ul>\n<li>通过上述几步后，就可以看到如下界面。<code>properties</code> 类型的配合文件有一个，<code>ymal</code> 类型的配置文件有两个</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163846243.png\" alt=\"image-20210917163846243\" style=\"zoom:80%;\" />\n\n<h4 id=\"2-1-3-三种配合文件的优先级\"><a href=\"#2-1-3-三种配合文件的优先级\" class=\"headerlink\" title=\"2.1.3 三种配合文件的优先级\"></a>2.1.3 三种配合文件的优先级</h4><p>在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些</p>\n<p><code>application.properties</code> 文件内容如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">80</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.yml</code> 文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.yaml</code> 文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务，在控制台可以看到使用的端口号是 <code>80</code>。说明 <code>application.properties</code> 的优先级最高</p>\n<p>注释掉 <code>application.properties</code> 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 <code>81</code>，说明 <code>application.yml</code> 配置文件为第二优先级。</p>\n<p>从上述的验证结果可以确定三种配置文件的优先级是：</p>\n<p>==<code>application.properties</code> &gt; <code>application.yml</code> &gt; <code>application.yaml</code>==</p>\n<blockquote>\n<p>==注意：==</p>\n<ul>\n<li><p><code>SpringBoot</code> 核心配置文件名为 <code>application</code></p>\n</li>\n<li><p><code>SpringBoot</code> 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</p>\n<p>例如要设置日志的级别时，可以在配置文件中书写 <code>logging</code>，就会提示出来。配置内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">root:</span> <span class=\"string\">info</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h3 id=\"2-2-yaml格式\"><a href=\"#2-2-yaml格式\" class=\"headerlink\" title=\"2.2 yaml格式\"></a>2.2 yaml格式</h3><p>上面讲了三种不同类型的配置文件，而 <code>properties</code> 类型的配合文件之前我们学习过，接下来我们重点学习 <code>yaml</code> 类型的配置文件。</p>\n<p><strong>YAML（YAML Ain’t Markup Language），一种数据序列化格式。</strong>这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。</p>\n<p>最开始我们使用的是 <code>xml</code> ，格式如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">enterprise</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>itcast<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>16<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tel</span>&gt;</span>4006184000<span class=\"tag\">&lt;/<span class=\"name\">tel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">enterprise</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>而 <code>properties</code> 类型的配置文件如下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enterprise.name</span>=<span class=\"string\">itcast</span></span><br><span class=\"line\"><span class=\"attr\">enterprise.age</span>=<span class=\"string\">16</span></span><br><span class=\"line\"><span class=\"attr\">enterprise.tel</span>=<span class=\"string\">4006184000</span></span><br></pre></td></tr></table></figure>\n\n<p><code>yaml</code> 类型的配置文件内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enterprise:</span></span><br><span class=\"line\">\t<span class=\"attr\">name:</span> <span class=\"string\">itcast</span></span><br><span class=\"line\">\t<span class=\"attr\">age:</span> <span class=\"number\">16</span></span><br><span class=\"line\">\t<span class=\"attr\">tel:</span> <span class=\"number\">4006184000</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li><p>容易阅读</p>\n<p><code>yaml</code> 类型的配置文件比 <code>xml</code> 类型的配置文件更容易阅读，结构更加清晰</p>\n</li>\n<li><p>容易与脚本语言交互</p>\n</li>\n<li><p>以数据为核心，重数据轻格式</p>\n<p><code>yaml</code> 更注重数据，而 <code>xml</code> 更注重格式</p>\n</li>\n</ul>\n<p><strong>YAML 文件扩展名：</strong></p>\n<ul>\n<li><code>.yml</code> (主流)</li>\n<li><code>.yaml</code></li>\n</ul>\n<p>上面两种后缀名都可以，以后使用更多的还是 <code>yml</code> 的。</p>\n<h4 id=\"2-2-1-语法规则\"><a href=\"#2-2-1-语法规则\" class=\"headerlink\" title=\"2.2.1 语法规则\"></a>2.2.1 语法规则</h4><ul>\n<li><p>大小写敏感</p>\n</li>\n<li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p>\n</li>\n<li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p>\n<p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p>\n</li>\n<li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p>\n</li>\n<li><p># 表示注释</p>\n</li>\n</ul>\n<p>==核心规则：数据前面要加空格与冒号隔开==</p>\n<p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enterprise:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">itcast</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">16</span></span><br><span class=\"line\">  <span class=\"attr\">tel:</span> <span class=\"number\">4006184000</span></span><br><span class=\"line\">  <span class=\"attr\">subject:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Java</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">前端</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">大数据</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-yaml配置文件数据读取\"><a href=\"#2-3-yaml配置文件数据读取\" class=\"headerlink\" title=\"2.3 yaml配置文件数据读取\"></a>2.3 yaml配置文件数据读取</h3><h4 id=\"2-3-1-环境准备\"><a href=\"#2-3-1-环境准备\" class=\"headerlink\" title=\"2.3.1 环境准备\"></a>2.3.1 环境准备</h4><p>新创建一个名为 <code>springboot_03_read_data</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917172736484.png\" alt=\"image-20210917172736484\" style=\"zoom:80%;\" />\n\n<p>在 <code>com.itheima.controller</code> 包写创建名为 <code>BookController</code> 的控制器，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id ==&gt; &quot;</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>com.itheima.domain</code> 包下创建一个名为 <code>Enterprise</code> 的实体类等会用来封装数据，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Enterprise</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//setter and getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//toString</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，里面配置了不同的数据，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">lesson:</span> <span class=\"string\">SpringBoot</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">enterprise:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">itcast</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">16</span></span><br><span class=\"line\">  <span class=\"attr\">tel:</span> <span class=\"number\">4006184000</span></span><br><span class=\"line\">  <span class=\"attr\">subject:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Java</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">前端</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">大数据</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-读取配置数据\"><a href=\"#2-3-2-读取配置数据\" class=\"headerlink\" title=\"2.3.2 读取配置数据\"></a>2.3.2 读取配置数据</h4><h5 id=\"2-3-2-1-使用-Value注解\"><a href=\"#2-3-2-1-使用-Value注解\" class=\"headerlink\" title=\"2.3.2.1 使用 @Value注解\"></a>2.3.2.1 使用 @Value注解</h5><p>使用 <code>@Value(&quot;表达式&quot;)</code> 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：<code>$&#123;一级属性名.二级属性名……&#125;</code></p>\n<p>我们可以在 <code>BookController</code> 中使用 <code>@Value</code> 注解读取配合文件数据，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lesson;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer port;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String subject_00;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(lesson);</span><br><span class=\"line\">        System.out.println(port);</span><br><span class=\"line\">        System.out.println(subject_00);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-2-2-Environment对象\"><a href=\"#2-3-2-2-Environment对象\" class=\"headerlink\" title=\"2.3.2.2 Environment对象\"></a>2.3.2.2 Environment对象</h5><p>上面方式读取到的数据特别零散，<code>SpringBoot</code> 还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(env.getProperty(<span class=\"string\">&quot;lesson&quot;</span>));</span><br><span class=\"line\">        System.out.println(env.getProperty(<span class=\"string\">&quot;enterprise.name&quot;</span>));</span><br><span class=\"line\">        System.out.println(env.getProperty(<span class=\"string\">&quot;enterprise.subject[0]&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意：这种方式，框架内容大量数据，而在开发中我们很少使用。==</p>\n</blockquote>\n<h5 id=\"2-3-2-3-自定义对象\"><a href=\"#2-3-2-3-自定义对象\" class=\"headerlink\" title=\"2.3.2.3 自定义对象\"></a>2.3.2.3 自定义对象</h5><p><code>SpringBoot</code> 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>\n<ul>\n<li><p>将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p>\n<p>在类上添加 <code>@Component</code> 注解</p>\n</li>\n<li><p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件</p>\n<p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定前缀的数据</p>\n</li>\n<li><p>在 <code>BookController</code> 中进行注入</p>\n</li>\n</ul>\n<p><strong>具体代码如下：</strong></p>\n<p><code>Enterprise</code> 实体类内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Enterprise</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getTel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTel</span><span class=\"params\">(String tel)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getSubject() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSubject</span><span class=\"params\">(String[] subject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Enterprise&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, tel=&#x27;&quot;</span> + tel + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, subject=&quot;</span> + Arrays.toString(subject) +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BookController</code> 内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Enterprise enterprise;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(enterprise.getName());</span><br><span class=\"line\">        System.out.println(enterprise.getAge());</span><br><span class=\"line\">        System.out.println(enterprise.getSubject());</span><br><span class=\"line\">        System.out.println(enterprise.getTel());</span><br><span class=\"line\">        System.out.println(enterprise.getSubject()[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==注意：==</p>\n<p>使用第三种方式，在实体类上有如下警告提示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917180919390.png\" alt=\"image-20210917180919390\" style=\"zoom:70%;\" />\n\n<p>这个警告提示解决是在 <code>pom.xml</code> 中添加如下依赖即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-多环境配置\"><a href=\"#2-4-多环境配置\" class=\"headerlink\" title=\"2.4 多环境配置\"></a>2.4 多环境配置</h3><p>以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 <code>mysql</code> ，连接自己电脑上的 <code>mysql</code> 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917185253557.png\" alt=\"image-20210917185253557\" style=\"zoom:60%;\" />\n\n<p>来回的修改配置会很麻烦，而 <code>SpringBoot</code> 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明</p>\n<h4 id=\"2-4-1-yaml文件\"><a href=\"#2-4-1-yaml文件\" class=\"headerlink\" title=\"2.4.1 yaml文件\"></a>2.4.1 yaml文件</h4><p>在 <code>application.yml</code> 中使用 <code>---</code> 来分割不同的配置，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开发</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span> <span class=\"comment\">#给开发环境起的名字</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#生产</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">pro</span> <span class=\"comment\">#给生产环境起的名字</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">test</span> <span class=\"comment\">#给测试环境起的名字</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置中 <code>spring.profiles</code> 是用来给不同的配置起名字的。而如何告知 <code>SpringBoot</code> 使用哪段配置呢？可以使用如下配置来启用都一段配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置启用的环境</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span> <span class=\"comment\">#表示使用的是开发环境的配置</span></span><br></pre></td></tr></table></figure>\n\n<p>综上所述，<code>application.yml</code> 配置文件内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置启用的环境</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#开发</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#生产</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">pro</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>==注意：==</p>\n<p>在上面配置中给不同配置起名字的 <code>spring.profiles</code> 配置项已经过时。最新用来起名字的配置项是</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开发</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"attr\">activate:</span></span><br><span class=\"line\">      <span class=\"attr\">on-profile:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-properties文件\"><a href=\"#2-4-2-properties文件\" class=\"headerlink\" title=\"2.4.2 properties文件\"></a>2.4.2 properties文件</h4><p><code>properties</code> 类型的配置文件配置多环境需要定义不同的配置文件</p>\n<ul>\n<li><p><code>application-dev.properties</code> 是开发环境的配置文件。我们在该文件中配置端口号为 <code>80</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">80</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>application-test.properties</code> 是测试环境的配置文件。我们在该文件中配置端口号为 <code>81</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">81</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>application-pro.properties</code> 是生产环境的配置文件。我们在该文件中配置端口号为 <code>82</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">82</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><code>SpringBoot</code> 只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件，配置如下:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">pro</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-3-命令行启动参数设置\"><a href=\"#2-4-3-命令行启动参数设置\" class=\"headerlink\" title=\"2.4.3 命令行启动参数设置\"></a>2.4.3 命令行启动参数设置</h4><p>使用 <code>SpringBoot</code> 开发的程序以后都是打成 <code>jar</code> 包，通过 <code>java -jar xxx.jar</code> 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。</p>\n<p>我们知道 <code>jar</code> 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 <code>SpringBoot</code> 提供了在运行 <code>jar</code> 时设置开启指定的环境的方式，如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar xxx.jar –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>\n\n<p>那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar xxx.jar –-server.port=88</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar springboot.jar –-server.port=88 –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>\n\n<p>大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 <code>SpringBoot</code> 官网已经进行了说明，参见 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</span><br></pre></td></tr></table></figure>\n\n<p>进入上面网站后会看到如下页面</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917193910191.png\" alt=\"image-20210917193910191\"></p>\n<p>如果使用了多种方式配合同一个配置项，优先级高的生效。</p>\n<h3 id=\"2-5-配置文件分类\"><a href=\"#2-5-配置文件分类\" class=\"headerlink\" title=\"2.5 配置文件分类\"></a>2.5 配置文件分类</h3><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917194941597.png\" alt=\"image-20210917194941597\" style=\"zoom:70%;\" />\n\n<p>有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……</span><br></pre></td></tr></table></figure>\n\n<p>针对这种情况，<code>SpringBoot</code> 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。</p>\n<p><code>SpringBoot</code> 中4级配置文件放置位置：</p>\n<ul>\n<li>1级：classpath：application.yml</li>\n<li>2级：classpath：config/application.yml</li>\n<li>3级：file ：application.yml</li>\n<li>4级：file ：config/application.yml</li>\n</ul>\n<blockquote>\n<p>==说明：==级别越高优先级越高</p>\n</blockquote>\n<h4 id=\"2-5-1-代码演示\"><a href=\"#2-5-1-代码演示\" class=\"headerlink\" title=\"2.5.1 代码演示\"></a>2.5.1 代码演示</h4><p>在这里我们只演示不同级别配置文件放置位置的优先级。</p>\n<h5 id=\"2-5-1-1-环境准备\"><a href=\"#2-5-1-1-环境准备\" class=\"headerlink\" title=\"2.5.1.1 环境准备\"></a>2.5.1.1 环境准备</h5><p>创建一个名为 <code>springboot_06_config_file</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200241282.png\" alt=\"image-20210917200241282\" style=\"zoom:80%;\" />\n\n<p>在 <code>resources</code> 下创建一个名为 <code>config</code> 的目录，在该目录中创建 <code>application.yml</code> 配置文件，而在该配置文件中将端口号设置为 <code>81</code>，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure>\n\n<p>而在 <code>resources</code> 下创建的 <code>application.yml</code> 配置文件中并将端口号设置为 <code>80</code>，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-1-2-验证1级和2级的优先级\"><a href=\"#2-5-1-2-验证1级和2级的优先级\" class=\"headerlink\" title=\"2.5.1.2 验证1级和2级的优先级\"></a>2.5.1.2 验证1级和2级的优先级</h5><p>运行启动引导类，可以在控制台看到如下日志信息</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200805389.png\" alt=\"image-20210917200805389\"></p>\n<p>通过这个结果可以得出==类路径下的 <code>config</code> 下的配置文件优先于类路径下的配置文件。==</p>\n<h5 id=\"2-5-1-3-验证2级和4级的优先级\"><a href=\"#2-5-1-3-验证2级和4级的优先级\" class=\"headerlink\" title=\"2.5.1.3 验证2级和4级的优先级\"></a>2.5.1.3 验证2级和4级的优先级</h5><p>要验证4级，按照以下步骤完成</p>\n<ul>\n<li><p>将工程打成 <code>jar</code> 包</p>\n<p>点击工程的 <code>package</code> 来打 <code>jar</code> 包</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201243721.png\" alt=\"image-20210917201243721\" style=\"zoom:80%;\" /></li>\n<li><p>在硬盘上找到 <code>jar</code> 包所在位置</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201523669.png\" alt=\"image-20210917201523669\" style=\"zoom:70%;\" /></li>\n<li><p>在 <code>jar</code> 包所在位置创建 <code>config</code> 文件夹，在该文件夹下创建 <code>application.yml</code> 配置文件，而在该配合文件中将端口号设置为 <code>82</code></p>\n</li>\n<li><p>在命令行使用以下命令运行程序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>运行后日志信息如下</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201922831.png\" alt=\"image-20210917201922831\"></p>\n<p>通过这个结果可以得出==file： <code>config</code> 下的配置文件优先于类路径下的配置文件。==</p>\n</li>\n</ul>\n<blockquote>\n<p>==注意：==</p>\n<p>SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 <code>jar</code> 所在位置的 <code>config</code> 目录下创建一个任意名称的文件夹</p>\n</blockquote>\n<h2 id=\"3，SpringBoot整合junit\"><a href=\"#3，SpringBoot整合junit\" class=\"headerlink\" title=\"3，SpringBoot整合junit\"></a>3，SpringBoot整合junit</h2><p>回顾 <code>Spring</code> 整合 <code>junit</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSave</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        bookService.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>@RunWith</code> 注解指定运行器，使用 <code>@ContextConfiguration</code> 注解来指定配置类或者配置文件。而 <code>SpringBoot</code> 整合 <code>junit</code> 特别简单，分为以下三步完成</p>\n<ul>\n<li>在测试类上添加 <code>SpringBootTest</code> 注解</li>\n<li>使用 <code>@Autowired</code> 注入要测试的资源</li>\n<li>定义测试方法进行测试</li>\n</ul>\n<h3 id=\"3-1-环境准备\"><a href=\"#3-1-环境准备\" class=\"headerlink\" title=\"3.1 环境准备\"></a>3.1 环境准备</h3><p>创建一个名为 <code>springboot_07_test</code> 的 <code>SpringBoot</code> 工程，工程目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917213556673.png\" alt=\"image-20210917213556673\" style=\"zoom:80%;\" />\n\n<p>在 <code>com.itheima.service</code> 下创建 <code>BookService</code> 接口，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>com.itheima.service.impl</code> 包写创建一个 <code>BookServiceImpl</code> 类，使其实现 <code>BookService</code> 接口，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service is running ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-编写测试类\"><a href=\"#3-2-编写测试类\" class=\"headerlink\" title=\"3.2 编写测试类\"></a>3.2 编写测试类</h3><p>在 <code>test/java</code> 下创建 <code>com.itheima</code> 包，在该包下创建测试类，将 <code>BookService</code> 注入到该测试类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Springboot07TestApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        bookService.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意：==这里的引导类所在包必须是测试类所在包及其子包。</p>\n<p>例如：</p>\n<ul>\n<li>引导类所在包是 <code>com.itheima</code></li>\n<li>测试类所在包是 <code>com.itheima</code></li>\n</ul>\n<p>如果不满足这个要求的话，就需要在使用 <code>@SpringBootTest</code> 注解时，使用 <code>classes</code> 属性指定引导类的字节码对象。如 <code>@SpringBootTest(classes = Springboot07TestApplication.class)</code></p>\n</blockquote>\n<h2 id=\"4，SpringBoot整合mybatis\"><a href=\"#4，SpringBoot整合mybatis\" class=\"headerlink\" title=\"4，SpringBoot整合mybatis\"></a>4，SpringBoot整合mybatis</h2><h3 id=\"4-1-回顾Spring整合Mybatis\"><a href=\"#4-1-回顾Spring整合Mybatis\" class=\"headerlink\" title=\"4.1 回顾Spring整合Mybatis\"></a>4.1 回顾Spring整合Mybatis</h3><p><code>Spring</code> 整合 <code>Mybatis</code> 需要定义很多配置类</p>\n<ul>\n<li><p><code>SpringConfig</code> 配置类</p>\n<ul>\n<li><p>导入 <code>JdbcConfig</code> 配置类</p>\n</li>\n<li><p>导入 <code>MybatisConfig</code> 配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><code>JdbcConfig</code> 配置类</p>\n<ul>\n<li><p>定义数据源（加载properties配置项：driver、url、username、password）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driver;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">DruidDataSource</span> <span class=\"variable\">ds</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        ds.setDriverClassName(driver);</span><br><span class=\"line\">        ds.setUrl(url);</span><br><span class=\"line\">        ds.setUsername(userName);</span><br><span class=\"line\">        ds.setPassword(password);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><code>MybatisConfig</code> 配置类</p>\n<ul>\n<li><p>定义 <code>SqlSessionFactoryBean</code></p>\n</li>\n<li><p>定义映射配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MapperScannerConfigurer <span class=\"title function_\">getMapperScannerConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">MapperScannerConfigurer</span> <span class=\"variable\">msc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapperScannerConfigurer</span>();</span><br><span class=\"line\">    msc.setBasePackage(<span class=\"string\">&quot;com.itheima.dao&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionFactoryBean <span class=\"title function_\">getSqlSessionFactoryBean</span><span class=\"params\">(DataSource dataSource)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSessionFactoryBean</span> <span class=\"variable\">ssfb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBean</span>();</span><br><span class=\"line\">    ssfb.setTypeAliasesPackage(<span class=\"string\">&quot;com.itheima.domain&quot;</span>);</span><br><span class=\"line\">    ssfb.setDataSource(dataSource);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ssfb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-SpringBoot整合mybatis\"><a href=\"#4-2-SpringBoot整合mybatis\" class=\"headerlink\" title=\"4.2 SpringBoot整合mybatis\"></a>4.2 SpringBoot整合mybatis</h3><h4 id=\"4-2-1-创建模块\"><a href=\"#4-2-1-创建模块\" class=\"headerlink\" title=\"4.2.1 创建模块\"></a>4.2.1 创建模块</h4><ul>\n<li>创建新模块，选择 <code>Spring Initializr</code>，并配置模块相关基础信息</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215913779.png\" alt=\"image-20210917215913779\" style=\"zoom:80%;\" />\n\n<ul>\n<li><p>选择当前模块需要使用的技术集（MyBatis、MySQL）</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215958091.png\" alt=\"image-20210917215958091\" style=\"zoom:80%;\" /></li>\n</ul>\n<h4 id=\"4-2-2-定义实体类\"><a href=\"#4-2-2-定义实体类\" class=\"headerlink\" title=\"4.2.2 定义实体类\"></a>4.2.2 定义实体类</h4><p>在 <code>com.itheima.domain</code> 包下定义实体类 <code>Book</code>，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Book</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//setter and  getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//toString</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-3-定义dao接口\"><a href=\"#4-2-3-定义dao接口\" class=\"headerlink\" title=\"4.2.3 定义dao接口\"></a>4.2.3 定义dao接口</h4><p>在 <code>com.itheima.dao</code> 包下定义 <code>BookDao</code> 接口，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Book <span class=\"title function_\">getById</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-4-定义测试类\"><a href=\"#4-2-4-定义测试类\" class=\"headerlink\" title=\"4.2.4 定义测试类\"></a>4.2.4 定义测试类</h4><p>在 <code>test/java</code> 下定义包 <code>com.itheima</code> ，在该包下测试类，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testGetById</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Book</span> <span class=\"variable\">book</span> <span class=\"operator\">=</span> bookDao.getById(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(book);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-5-编写配置\"><a href=\"#4-2-5-编写配置\" class=\"headerlink\" title=\"4.2.5 编写配置\"></a>4.2.5 编写配置</h4><p>我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 <code>SpringBoot</code> 的配置文件中进行配合。</p>\n<p>在 <code>application.yml</code> 配置文件中配置如下内容</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-6-测试\"><a href=\"#4-2-6-测试\" class=\"headerlink\" title=\"4.2.6 测试\"></a>4.2.6 测试</h4><p>运行测试方法，我们会看到如下错误信息</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917221427930.png\" alt=\"image-20210917221427930\" style=\"zoom:70%;\" />\n\n<p>错误信息显示在 <code>Spring</code> 容器中没有 <code>BookDao</code> 类型的 <code>bean</code>。为什么会出现这种情况呢？</p>\n<p>原因是 <code>Mybatis</code> 会扫描接口并创建接口的代码对象交给 <code>Spring</code> 管理，但是现在并没有告诉 <code>Mybatis</code> 哪个是 <code>dao</code> 接口。而我们要解决这个问题需要在<code>BookDao</code> 接口上使用 <code>@Mapper</code> ，<code>BookDao</code> 接口改进为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Book <span class=\"title function_\">getById</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意：==</p>\n<p><code>SpringBoot</code> 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题</p>\n</blockquote>\n<h4 id=\"4-2-7-使用Druid数据源\"><a href=\"#4-2-7-使用Druid数据源\" class=\"headerlink\" title=\"4.2.7 使用Druid数据源\"></a>4.2.7 使用Druid数据源</h4><p>现在我们并没有指定数据源，<code>SpringBoot</code> 有默认的数据源，我们也可以指定使用 <code>Druid</code> 数据源，按照以下步骤实现</p>\n<ul>\n<li><p>导入 <code>Druid</code> 依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>application.yml</code> 配置文件配置</p>\n<p>可以通过 <code>spring.datasource.type</code> 来配置使用什么数据源。配置文件内容可以改进为</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5，案例\"><a href=\"#5，案例\" class=\"headerlink\" title=\"5，案例\"></a>5，案例</h2><p><code>SpringBoot</code> 到这就已经学习完毕，接下来我们将学习 <code>SSM</code> 时做的三大框架整合的案例用 <code>SpringBoot</code> 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 <code>SpringBoot</code> 的即可，主要从以下几部分完成</p>\n<ol>\n<li><p>pom.xml</p>\n<p>配置起步依赖，必要的资源坐标(druid)</p>\n</li>\n<li><p>application.yml</p>\n<p>设置数据源、端口等</p>\n</li>\n<li><p>配置类</p>\n<p>全部删除</p>\n</li>\n<li><p>dao</p>\n<p>设置@Mapper</p>\n</li>\n<li><p>测试类</p>\n</li>\n<li><p>页面</p>\n<p>放置在resources目录下的static目录中</p>\n</li>\n</ol>\n<h3 id=\"5-1-创建工程\"><a href=\"#5-1-创建工程\" class=\"headerlink\" title=\"5.1 创建工程\"></a>5.1 创建工程</h3><p>创建 <code>SpringBoot</code> 工程，在创建工程时需要勾选 <code>web</code>、<code>mysql</code>、<code>mybatis</code>，工程目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225019868.png\" alt=\"image-20210917225019868\" style=\"zoom:80%;\" />\n\n<p>由于我们工程中使用到了 <code>Druid</code> ，所以需要导入 <code>Druid</code> 的坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-代码拷贝\"><a href=\"#5-2-代码拷贝\" class=\"headerlink\" title=\"5.2 代码拷贝\"></a>5.2 代码拷贝</h3><p>将 <code>springmvc_11_page</code> 工程中的 <code>java</code> 代码及测试代码连同包拷贝到 <code>springboot_09_ssm</code> 工程，按照下图进行拷贝</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225715519.png\" alt=\"image-20210917225715519\" style=\"zoom:70%;\" />\n\n<p>需要修改的内容如下：</p>\n<ul>\n<li><p><code>Springmvc_11_page</code> 中 <code>config</code> 包下的是配置类，而 <code>SpringBoot</code> 工程不需要这些配置类，所以这些可以直接删除</p>\n</li>\n<li><p><code>dao</code> 包下的接口上在拷贝到 <code>springboot_09-ssm</code> 工程中需要在接口中添加 <code>@Mapper</code> 注解</p>\n</li>\n<li><p><code>BookServiceTest</code> 测试需要改成 <code>SpringBoot</code> 整合 <code>junit</code> 的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetById</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Book</span> <span class=\"variable\">book</span> <span class=\"operator\">=</span> bookService.getById(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetAll</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class=\"line\">        System.out.println(all);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-3-配置文件\"><a href=\"#5-3-配置文件\" class=\"headerlink\" title=\"5.3 配置文件\"></a>5.3 配置文件</h3><p>在 <code>application.yml</code> 配置文件中需要配置如下内容</p>\n<ul>\n<li>服务的端口号</li>\n<li>连接数据库的信息</li>\n<li>数据源</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/ssm_db</span> <span class=\"comment\">#?servierTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-静态资源\"><a href=\"#5-4-静态资源\" class=\"headerlink\" title=\"5.4 静态资源\"></a>5.4 静态资源</h3><p>在 <code>SpringBoot</code> 程序中是没有 <code>webapp</code> 目录的，那么在 <code>SpringBoot</code> 程序中静态资源需要放在什么位置呢？</p>\n<p>静态资源需要放在 <code>resources</code> 下的 <code>static</code> 下，如下图所示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917230702072.png\" alt=\"image-20210917230702072\" style=\"zoom:80%;\" />\n","site":{"data":{}},"excerpt":"<p>学点后端吧，学习了黑马的SSM课程,耗时半个寒假，以前提前放假安得一息安寝</p>\n<p>用了Springboot再也不想碰Spring</p>","more":"<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><p><strong>今日目标：</strong></p>\n<blockquote>\n<ul>\n<li>掌握基于SpringBoot框架的程序开发步骤</li>\n<li>熟练使用SpringBoot配置信息修改服务器配置</li>\n<li>基于SpringBoot的完成SSM整合项目开发</li>\n</ul>\n</blockquote>\n<h2 id=\"1，SpringBoot简介\"><a href=\"#1，SpringBoot简介\" class=\"headerlink\" title=\"1，SpringBoot简介\"></a>1，SpringBoot简介</h2><p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来==简化== <code>Spring</code> 应用的==初始搭建==以及==开发过程==。</p>\n<p>使用了 <code>Spring</code> 框架后已经简化了我们的开发。而 <code>SpringBoot</code> 又是对 <code>Spring</code> 开发进行简化的，可想而知 <code>SpringBoot</code> 使用的简单及广泛性。既然 <code>SpringBoot</code> 是用来简化 <code>Spring</code> 开发的，那我们就先回顾一下，以 <code>SpringMVC</code> 开发为例：</p>\n<ol>\n<li><strong>创建工程，并在 <code>pom.xml</code> 配置文件中配置所依赖的坐标</strong></li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911132335452.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n<ol start=\"2\">\n<li><p><strong>编写 <code>web3.0</code> 的配置类</strong></p>\n<p>作为 <code>web</code> 程序，<code>web3.0</code> 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下</p>\n</li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133112602.png\" alt=\"image-20210911133112602\" style=\"zoom:50%;\" />\n\n<ol start=\"3\">\n<li><strong>编写 <code>SpringMVC</code> 的配置类</strong></li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133219847.png\" alt=\"image-20210911133219847\" style=\"zoom:50%;\" />\n\n<p>​ 做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 <code>Controller</code> 类，在该类中提供一个方法。</p>\n<ol start=\"4\">\n<li><strong>编写 <code>Controller</code> 类</strong></li>\n</ol>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911133532151.png\" alt=\"image-20210911133532151\" style=\"zoom:50%;\" />\n\n<p>从上面的 <code>SpringMVC</code> 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。<code>SpringBoot</code> 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 <code>SpingBoot</code> 简化 <code>Spring</code> 开发。</p>\n<h3 id=\"1-1-SpringBoot快速入门\"><a href=\"#1-1-SpringBoot快速入门\" class=\"headerlink\" title=\"1.1 SpringBoot快速入门\"></a>1.1 SpringBoot快速入门</h3><h4 id=\"1-1-1-开发步骤\"><a href=\"#1-1-1-开发步骤\" class=\"headerlink\" title=\"1.1.1 开发步骤\"></a>1.1.1 开发步骤</h4><p><code>SpringBoot</code> 开发起来特别简单，分为如下几步：</p>\n<ul>\n<li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li>\n<li>选择当前模块需要使用的技术集</li>\n<li>开发控制器类</li>\n<li>运行自动生成的Application类</li>\n</ul>\n<p>知道了 <code>SpringBoot</code> 的开发步骤后，接下来我们进行具体的操作</p>\n<h5 id=\"1-1-1-1-创建新模块\"><a href=\"#1-1-1-1-创建新模块\" class=\"headerlink\" title=\"1.1.1.1 创建新模块\"></a>1.1.1.1 创建新模块</h5><ul>\n<li>点击 <code>+</code> 选择 <code>New Module</code> 创建新模块</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155135008.png\" alt=\"image-20210911155135008\" style=\"zoom:60%;\" />\n\n<ul>\n<li><p>选择 <code>Spring Initializr</code> ，用来创建 <code>SpringBoot</code> 工程</p>\n<p>以前我们选择的是 <code>Maven</code> ，今天选择 <code>Spring Initializr</code> 来快速构建 <code>SpringBoot</code> 工程。而在 <code>Module SDK</code> 这一项选择我们安装的 <code>JDK</code> 版本。</p>\n</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155249493.png\" alt=\"image-20210911155249493\" style=\"zoom:60%;\" />\n\n<ul>\n<li><p>对 <code>SpringBoot</code> 工程进行相关的设置</p>\n<p>我们使用这种方式构建的 <code>SpringBoot</code> 工程其实也是 <code>Maven</code> 工程，而该方式只是一种快速构建的方式而已。</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911155916899.png\" alt=\"image-20210911155916899\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>==注意：打包方式这里需要设置为 <code>Jar</code>==</p>\n</blockquote>\n</li>\n<li><p>选中 <code>Web</code>，然后勾选 <code>Spring Web</code></p>\n<p>由于我们需要开发一个 <code>web</code> 程序，使用到了 <code>SpringMVC</code> 技术，所以按照下图红框进行勾选</p>\n</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160040328.png\" alt=\"image-20210911160040328\" style=\"zoom:60%;\" />\n\n<ul>\n<li>下图界面不需要任何修改，直接点击 <code>Finish</code> 完成 <code>SpringBoot</code> 工程的构建</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160353534.png\" alt=\"image-20210911160353534\" style=\"zoom:70%;\" />\n\n<p>经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 <code>Application</code> 类，而该类一会再启动服务器时会用到</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160541833.png\" alt=\"image-20210911160541833\" style=\"zoom:80%;\" />\n\n<blockquote>\n<p>==注意：==</p>\n<ol>\n<li><p>在创建好的工程中不需要创建配置类</p>\n</li>\n<li><p>创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。</p>\n<p>可以删除的目录和文件如下：</p>\n<ul>\n<li><code>.mvn</code></li>\n<li><code>.gitignore</code></li>\n<li><code>HELP.md</code></li>\n<li><code>mvnw</code></li>\n<li><code>mvnw.cmd</code></li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h5 id=\"1-1-1-2-创建-Controller\"><a href=\"#1-1-1-2-创建-Controller\" class=\"headerlink\" title=\"1.1.1.2 创建 Controller\"></a>1.1.1.2 创建 <code>Controller</code></h5><p>在 <code>com.itheima.controller</code> 包下创建 <code>BookController</code> ，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id ==&gt; &quot;</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-1-1-3-启动服务器\"><a href=\"#1-1-1-3-启动服务器\" class=\"headerlink\" title=\"1.1.1.3 启动服务器\"></a>1.1.1.3 启动服务器</h5><p>运行 <code>SpringBoot</code> 工程不需要使用本地的 <code>Tomcat</code> 和 插件，只运行项目 <code>com.itheima</code> 包下的 <code>Application</code> 类，我们就可以在控制台看出如下信息</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911165642280.png\" alt=\"image-20210911165642280\"></p>\n<h5 id=\"1-1-1-4-进行测试\"><a href=\"#1-1-1-4-进行测试\" class=\"headerlink\" title=\"1.1.1.4 进行测试\"></a>1.1.1.4 进行测试</h5><p>使用 <code>Postman</code> 工具来测试我们的程序</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911160850121.png\" alt=\"image-20210911160850121\"></p>\n<p>通过上面的入门案例我们可以看到使用 <code>SpringBoot</code> 进行开发，使整个开发变得很简单，那它是如何做到的呢？</p>\n<p>要研究这个问题，我们需要看看 <code>Application</code> 类和 <code>pom.xml</code> 都书写了什么。先看看 <code>Applicaion</code> 类，该类内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个类中的东西很简单，就在类上添加了一个 <code>@SpringBootApplication</code> 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。</p>\n<p>再看看 <code>pom.xml</code> 配置文件中的内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springboot_01_quickstart<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--JDK 的版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--这个插件是在打包时需要的，而这里暂时还没有用到--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们代码之所以能简化，就是因为指定的父工程和 <code>Spring Web</code> 依赖实现的。具体的我们后面在聊。</p>\n<h4 id=\"1-1-2-对比\"><a href=\"#1-1-2-对比\" class=\"headerlink\" title=\"1.1.2 对比\"></a>1.1.2 对比</h4><p>做完 <code>SpringBoot</code> 的入门案例后，接下来对比一下 <code>Spring</code> 程序和 <code>SpringBoot</code> 程序。如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911172200292.png\" alt=\"image-20210911172200292\" style=\"zoom:60%;\" />\n\n<ul>\n<li><p><strong>坐标</strong></p>\n<p><code>Spring</code> 程序中的坐标需要自己编写，而且坐标非常多</p>\n<p><code>SpringBoot</code> 程序中的坐标是我们在创建工程时进行勾选自动生成的</p>\n</li>\n<li><p><strong>web3.0配置类</strong></p>\n<p><code>Spring</code> 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂</p>\n<p><code>SpringBoot</code> 程序不需要我们自己书写</p>\n</li>\n<li><p><strong>配置类</strong></p>\n<p><code>Spring/SpringMVC</code> 程序的配置类需要自己书写。而 <code>SpringBoot</code> 程序则不需要书写。</p>\n</li>\n</ul>\n<blockquote>\n<p>==注意：基于Idea的 <code>Spring Initializr</code> 快速构建 <code>SpringBoot</code> 工程时需要联网。==</p>\n</blockquote>\n<h4 id=\"1-1-3-官网构建工程\"><a href=\"#1-1-3-官网构建工程\" class=\"headerlink\" title=\"1.1.3 官网构建工程\"></a>1.1.3 官网构建工程</h4><p>在入门案例中之所以能快速构建 <code>SpringBoot</code> 工程，是因为 <code>Idea</code> 使用了官网提供了快速构建 <code>SpringBoot</code> 工程的组件实现的。那如何在官网进行工程构建呢？通过如下步骤构建</p>\n<h5 id=\"1-1-3-1-进入SpringBoot官网\"><a href=\"#1-1-3-1-进入SpringBoot官网\" class=\"headerlink\" title=\"1.1.3.1 进入SpringBoot官网\"></a>1.1.3.1 进入SpringBoot官网</h5><p>官网地址如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://spring.io/projects/spring-boot</span><br></pre></td></tr></table></figure>\n\n<p>进入到 <code>SpringBoot</code> 官网后拖到最下方就可以看到如下内容</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911173712014.png\" alt=\"image-20210911173712014\" style=\"zoom:60%;\" />\n\n<p>然后点击 <code>Spring Initializr</code> 超链接就会跳转到如下页面</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174110687.png\" alt=\"image-20210911174110687\"></p>\n<p>这个页面内容是不是感觉很眼熟的，这和我们使用 <code>Idea</code> 快速构建 <code>SpringBoot</code> 工程的界面基本相同。在上面页面输入对应的信息</p>\n<h5 id=\"1-1-3-2-选择依赖\"><a href=\"#1-1-3-2-选择依赖\" class=\"headerlink\" title=\"1.1.3.2 选择依赖\"></a>1.1.3.2 选择依赖</h5><p>选择 <code>Spring Web</code> 可以点击上图右上角的 <code>ADD DEPENDENCIES... CTRL + B</code> 按钮，就会出现如下界面</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911174650679.png\" alt=\"image-20210911174650679\"></p>\n<h5 id=\"1-1-3-3-生成工程\"><a href=\"#1-1-3-3-生成工程\" class=\"headerlink\" title=\"1.1.3.3 生成工程\"></a>1.1.3.3 生成工程</h5><p>以上步骤完成后就可以生成 <code>SpringBoot</code> 工程了。在页面的最下方点击 <code>GENERATE CTRL + 回车</code> 按钮生成工程并下载到本地，如下图所示</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175222857.png\" alt=\"image-20210911175222857\"></p>\n<p>打开下载好的压缩包可以看到工程结构和使用 <code>Idea</code> 生成的一模一样，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911175502834.png\" alt=\"image-20210911175502834\" style=\"zoom:80%;\" />\n\n<p>而打开 <code>pom.xml</code> 文件，里面也包含了父工程和 <code>Spring Web</code> 的依赖。</p>\n<p>通过上面官网的操作，我们知道 <code>Idea</code> 中快速构建 <code>SpringBoot</code> 工程其实就是使用的官网的快速构建组件，那以后即使没有 <code>Idea</code> 也可以使用官网的方式构建 <code>SpringBoot</code> 工程。</p>\n<h4 id=\"1-1-4-SpringBoot工程快速启动\"><a href=\"#1-1-4-SpringBoot工程快速启动\" class=\"headerlink\" title=\"1.1.4 SpringBoot工程快速启动\"></a>1.1.4 SpringBoot工程快速启动</h4><h5 id=\"1-1-4-1-问题导入\"><a href=\"#1-1-4-1-问题导入\" class=\"headerlink\" title=\"1.1.4.1 问题导入\"></a>1.1.4.1 问题导入</h5><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911180828611.png\" alt=\"image-20210911180828611\" style=\"zoom:50%;\" />\n\n<p>以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 <code>Tomcat</code> 和 <code>Idea</code> ，在自己电脑上启动后端程序，这显然不现实。</p>\n<p>我们后端可以将 <code>SpringBoot</code> 工程打成 <code>jar</code> 包，该 <code>jar</code> 包运行不依赖于 <code>Tomcat</code> 和 <code>Idea</code> 这些工具也可以正常运行，只是这个 <code>jar</code> 包在运行过程中连接和我们自己程序相同的 <code>Mysql</code> 数据库即可。这样就可以解决这个问题，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911181714437.png\" alt=\"image-20210911181714437\" style=\"zoom:50%;\" />\n\n<p>那现在问题是如何打包呢？</p>\n<h5 id=\"1-1-4-2-打包\"><a href=\"#1-1-4-2-打包\" class=\"headerlink\" title=\"1.1.4.2 打包\"></a>1.1.4.2 打包</h5><p>由于我们在构建 <code>SpringBoot</code> 工程时已经在 <code>pom.xml</code> 中配置了如下插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以我们只需要使用 <code>Maven</code> 的 <code>package</code> 指令打包就会在 <code>target</code> 目录下生成对应的 <code>Jar</code> 包。</p>\n<blockquote>\n<p>==注意：该插件必须配置，不然打好的 <code>jar</code> 包也是有问题的。==</p>\n</blockquote>\n<h5 id=\"1-1-4-3-启动\"><a href=\"#1-1-4-3-启动\" class=\"headerlink\" title=\"1.1.4.3 启动\"></a>1.1.4.3 启动</h5><p>进入 <code>jar</code> 包所在位置，在 <code>命令提示符</code> 中输入如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>执行上述命令就可以看到 <code>SpringBoot</code> 运行的日志信息</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210911182956629.png\" alt=\"image-20210911182956629\" style=\"zoom:60%;\" />\n\n<h3 id=\"1-2-SpringBoot概述\"><a href=\"#1-2-SpringBoot概述\" class=\"headerlink\" title=\"1.2 SpringBoot概述\"></a>1.2 SpringBoot概述</h3><p><code>SpringBoot</code> 是由Pivotal团队提供的全新框架，其设计目的是用来==简化==Spring应用的==初始搭建==以及==开发过程==。</p>\n<p>大家已经感受了 <code>SpringBoot</code> 程序，回过头看看 <code>SpringBoot</code> 主要作用是什么，就是简化 <code>Spring</code> 的搭建过程和开发过程。</p>\n<p>原始 <code>Spring</code> 环境搭建和开发存在以下问题：</p>\n<ul>\n<li>配置繁琐</li>\n<li>依赖设置繁琐</li>\n</ul>\n<p><code>SpringBoot</code> 程序优点恰巧就是针对 <code>Spring</code> 的缺点</p>\n<ul>\n<li>自动配置。这个是用来解决 <code>Spring</code> 程序配置繁琐的问题</li>\n<li>起步依赖。这个是用来解决 <code>Spring</code> 程序依赖设置繁琐的问题</li>\n<li>辅助功能（内置服务器,…）。我们在启动 <code>SpringBoot</code> 程序时既没有使用本地的 <code>tomcat</code> 也没有使用 <code>tomcat</code> 插件，而是使用 <code>SpringBoot</code> 内置的服务器。</li>\n</ul>\n<p>接下来我们来说一下 <code>SpringBoot</code> 的起步依赖</p>\n<h4 id=\"1-2-1-起步依赖\"><a href=\"#1-2-1-起步依赖\" class=\"headerlink\" title=\"1.2.1 起步依赖\"></a>1.2.1 起步依赖</h4><p>我们使用 <code>Spring Initializr</code> 方式创建的 <code>Maven</code> 工程的的 <code>pom.xml</code> 配置文件中自动生成了很多包含 <code>starter</code> 的依赖，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220338109.png\" alt=\"image-20210918220338109\" style=\"zoom:70%;\" />\n\n<p>这些依赖就是==启动依赖==，接下来我们探究一下他是如何实现的。</p>\n<h5 id=\"1-2-1-1-探索父工程\"><a href=\"#1-2-1-1-探索父工程\" class=\"headerlink\" title=\"1.2.1.1 探索父工程\"></a>1.2.1.1 探索父工程</h5><p>从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918220855024.png\" alt=\"image-20210918220855024\" style=\"zoom:80%;\" />\n\n<p>再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221042947.png\" alt=\"image-20210918221042947\" style=\"zoom:80%;\" />\n\n<p>上图中的 <code>properties</code> 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 <code>properties</code> 中我们找 <code>servlet</code> 和 <code>mysql</code> 的版本如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221511249.png\" alt=\"image-20210918221511249\" style=\"zoom:80%;\" />\n\n<p><code>dependencyManagement</code> 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 <code>groupid</code> 和 <code>artifactId</code> 不需要定义 <code>version</code>。</p>\n<p>而 <code>build</code> 标签中也对插件的版本进行了锁定，如下图</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918221942453.png\" alt=\"image-20210918221942453\" style=\"zoom:80%;\" />\n\n<p>看完了父工程中 <code>pom.xml</code> 的配置后不难理解我们工程的的依赖为什么都没有配置 <code>version</code>。</p>\n<h5 id=\"1-2-1-2-探索依赖\"><a href=\"#1-2-1-2-探索依赖\" class=\"headerlink\" title=\"1.2.1.2 探索依赖\"></a>1.2.1.2 探索依赖</h5><p>在我们创建的工程中的 <code>pom.xml</code> 中配置了如下依赖</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222321402.png\" alt=\"image-20210918222321402\" style=\"zoom:80%;\" />\n\n<p>进入到该依赖，查看 <code>pom.xml</code> 的依赖会发现它引入了如下的依赖</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918222607469.png\" alt=\"image-20210918222607469\" style=\"zoom:80%;\" />\n\n<p>里面的引入了 <code>spring-web</code> 和 <code>spring-webmvc</code> 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 <code>springMVC</code> 中的注解的原因。</p>\n<p>而依赖 <code>spring-boot-starter-tomcat</code> ，从名字基本能确认内部依赖了 <code>tomcat</code>，所以我们的工程才能正常启动。</p>\n<p>==结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可==</p>\n<h5 id=\"1-2-1-3-小结\"><a href=\"#1-2-1-3-小结\" class=\"headerlink\" title=\"1.2.1.3 小结\"></a>1.2.1.3 小结</h5><p><strong>starter</strong></p>\n<ul>\n<li><code>SpringBoot</code> 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li>\n</ul>\n<p><strong>parent</strong></p>\n<ul>\n<li><p>所有 <code>SpringBoot</code> 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</p>\n</li>\n<li><p><code>spring-boot-starter-parent</code>（2.5.0）与 <code>spring-boot-starter-parent</code>（2.4.6）共计57处坐标版本不同</p>\n</li>\n</ul>\n<p><strong>实际开发</strong></p>\n<ul>\n<li><p>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</p>\n<blockquote>\n<p>G：groupid</p>\n<p>A：artifactId</p>\n<p>V：version</p>\n</blockquote>\n</li>\n<li><p>如发生坐标错误，再指定version（要小心版本冲突）</p>\n</li>\n</ul>\n<h4 id=\"1-2-2-程序启动\"><a href=\"#1-2-2-程序启动\" class=\"headerlink\" title=\"1.2.2 程序启动\"></a>1.2.2 程序启动</h4><p>创建的每一个 <code>SpringBoot</code> 程序时都包含一个类似于下面的类，我们将这个类称作引导类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Springboot01QuickstartApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==注意：==</p>\n<ul>\n<li><p><code>SpringBoot</code> 在创建项目时，采用jar的打包方式</p>\n</li>\n<li><p><code>SpringBoot</code> 的引导类是项目的入口，运行 <code>main</code> 方法就可以启动项目</p>\n<p>因为我们在 <code>pom.xml</code> 中配置了 <code>spring-boot-starter-web</code> 依赖，而该依赖通过前面的学习知道它依赖 <code>tomcat</code> ，所以运行 <code>main</code> 方法就可以使用 <code>tomcat</code> 启动咱们的工程。</p>\n</li>\n</ul>\n<h4 id=\"1-2-3-切换web服务器\"><a href=\"#1-2-3-切换web服务器\" class=\"headerlink\" title=\"1.2.3 切换web服务器\"></a>1.2.3 切换web服务器</h4><p>现在我们启动工程使用的是 <code>tomcat</code> 服务器，那能不能不使用 <code>tomcat</code> 而使用 <code>jetty</code> 服务器，<code>jetty</code> 在我们 <code>maven</code> 高级时讲 <code>maven</code> 私服使用的服务器。而要切换 <code>web</code> 服务器就需要将默认的 <code>tomcat</code> 服务器给排除掉，怎么排除呢？使用 <code>exclusion</code> 标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232512707.png\" alt=\"image-20210918232512707\"></p>\n<p>程序直接停止了，为什么呢？那是因为排除了 <code>tomcat</code> 服务器，程序中就没有服务器了。所以此时不光要排除 <code>tomcat</code> 服务器，还要引入 <code>jetty</code> 服务器。在 <code>pom.xml</code> 中因为 <code>jetty</code> 的起步依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来再次运行引导类，在日志信息中就可以看到使用的是 <code>jetty</code> 服务器</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210918232904623.png\" alt=\"image-20210918232904623\"></p>\n<p><strong>小结：</strong></p>\n<p>通过切换服务器，我们不难发现在使用 <code>SpringBoot</code> 换技术时只需要导入该技术的起步依赖即可。</p>\n<h2 id=\"2，配置文件\"><a href=\"#2，配置文件\" class=\"headerlink\" title=\"2，配置文件\"></a>2，配置文件</h2><h3 id=\"2-1-配置文件格式\"><a href=\"#2-1-配置文件格式\" class=\"headerlink\" title=\"2.1 配置文件格式\"></a>2.1 配置文件格式</h3><p>我们现在启动服务器默认的端口号是 <code>8080</code>，访问路径可以书写为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/books/1</span><br></pre></td></tr></table></figure>\n\n<p>在线上环境我们还是希望将端口号改为 <code>80</code>，这样在访问的时候就可以不写端口号了，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost/books/1</span><br></pre></td></tr></table></figure>\n\n<p>而 <code>SpringBoot</code> 程序如何修改呢？<code>SpringBoot</code> 提供了多种属性配置方式</p>\n<ul>\n<li><p><code>application.properties</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=80</span><br></pre></td></tr></table></figure></li>\n<li><p><code>application.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>application.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>==注意：<code>SpringBoot</code> 程序的配置文件名必须是 <code>application</code> ，只是后缀名不同而已。==</p>\n</blockquote>\n<h4 id=\"2-1-1-环境准备\"><a href=\"#2-1-1-环境准备\" class=\"headerlink\" title=\"2.1.1 环境准备\"></a>2.1.1 环境准备</h4><p>创建一个新工程 <code>springboot_02_base_config</code> 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917151314753.png\" alt=\"image-20210917151314753\" style=\"zoom:80%;\" />\n\n<p>在该工程中的 <code>com.itheima.controller</code> 包下创建一个名为 <code>BookController</code> 的控制器。内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id ==&gt; &quot;</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-不同配置文件演示\"><a href=\"#2-1-2-不同配置文件演示\" class=\"headerlink\" title=\"2.1.2 不同配置文件演示\"></a>2.1.2 不同配置文件演示</h4><ul>\n<li><strong>application.properties配置文件</strong></li>\n</ul>\n<p>现在需要进行配置，配合文件必须放在 <code>resources</code> 目录下，而该目录下有一个名为 <code>application.properties</code> 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 <code>port</code> ，<code>Idea</code> 就会提示，如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161422535.png\" alt=\"image-20210917161422535\" style=\"zoom:80%;\" />\n\n<p><code>application.properties</code> 配置文件内容如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917161720855.png\" alt=\"image-20210917161720855\" style=\"zoom:80%;\" />\n\n<ul>\n<li><strong>application.yml配置文件</strong></li>\n</ul>\n<p>删除 <code>application.properties</code> 配置文件中的内容。在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，在该文件中书写端口号的配置项，格式如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意： 在<code>:</code>后，数据前一定要加空格。==</p>\n</blockquote>\n<p>而在 <code>yml</code> 配置文件中也是有提示功能的，我们也可以在该文件中书写 <code>port</code> ，然后 <code>idea</code> 就会提示并书写成上面的格式</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162512646.png\" alt=\"image-20210917162512646\" style=\"zoom:80%;\" />\n\n<p>启动服务，可以在控制台看到绑定的端口号是 <code>81</code></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917162700711.png\" alt=\"image-20210917162700711\"></p>\n<ul>\n<li><strong>application.yaml配置文件</strong></li>\n</ul>\n<p>删除 <code>application.yml</code> 配置文件和 <code>application.properties</code> 配置文件内容，然后在 <code>resources</code> 下创建名为 <code>application.yaml</code> 的配置文件，配置内容和后缀名为 <code>yml</code> 的配置文件中的内容相同，只是使用了不同的后缀名而已</p>\n<p><code>application.yaml</code> 配置文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">83</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务，在控制台可以看到绑定的端口号</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163335913.png\" alt=\"image-20210917163335913\"></p>\n<p>==注意：在配合文件中如果没有提示，可以使用一下方式解决==</p>\n<ul>\n<li>点击 <code>File</code> 选中 <code>Project Structure</code></li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163557071.png\" alt=\"image-20210917163557071\" style=\"zoom:80%;\" />\n\n<ul>\n<li>弹出如下窗口，按图中标记红框进行选择</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163736458.png\" alt=\"image-20210917163736458\" style=\"zoom:70%;\" />\n\n<ul>\n<li>通过上述操作，会弹出如下窗口</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163818051.png\" alt=\"image-20210917163818051\" style=\"zoom:80%;\" />\n\n<ul>\n<li>点击上图的 <code>+</code> 号，弹出选择该模块的配置文件</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163828518.png\" alt=\"image-20210917163828518\" style=\"zoom:80%;\" />\n\n<ul>\n<li>通过上述几步后，就可以看到如下界面。<code>properties</code> 类型的配合文件有一个，<code>ymal</code> 类型的配置文件有两个</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917163846243.png\" alt=\"image-20210917163846243\" style=\"zoom:80%;\" />\n\n<h4 id=\"2-1-3-三种配合文件的优先级\"><a href=\"#2-1-3-三种配合文件的优先级\" class=\"headerlink\" title=\"2.1.3 三种配合文件的优先级\"></a>2.1.3 三种配合文件的优先级</h4><p>在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些</p>\n<p><code>application.properties</code> 文件内容如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">80</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.yml</code> 文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.yaml</code> 文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务，在控制台可以看到使用的端口号是 <code>80</code>。说明 <code>application.properties</code> 的优先级最高</p>\n<p>注释掉 <code>application.properties</code> 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 <code>81</code>，说明 <code>application.yml</code> 配置文件为第二优先级。</p>\n<p>从上述的验证结果可以确定三种配置文件的优先级是：</p>\n<p>==<code>application.properties</code> &gt; <code>application.yml</code> &gt; <code>application.yaml</code>==</p>\n<blockquote>\n<p>==注意：==</p>\n<ul>\n<li><p><code>SpringBoot</code> 核心配置文件名为 <code>application</code></p>\n</li>\n<li><p><code>SpringBoot</code> 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</p>\n<p>例如要设置日志的级别时，可以在配置文件中书写 <code>logging</code>，就会提示出来。配置内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">root:</span> <span class=\"string\">info</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h3 id=\"2-2-yaml格式\"><a href=\"#2-2-yaml格式\" class=\"headerlink\" title=\"2.2 yaml格式\"></a>2.2 yaml格式</h3><p>上面讲了三种不同类型的配置文件，而 <code>properties</code> 类型的配合文件之前我们学习过，接下来我们重点学习 <code>yaml</code> 类型的配置文件。</p>\n<p><strong>YAML（YAML Ain’t Markup Language），一种数据序列化格式。</strong>这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。</p>\n<p>最开始我们使用的是 <code>xml</code> ，格式如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">enterprise</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>itcast<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>16<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tel</span>&gt;</span>4006184000<span class=\"tag\">&lt;/<span class=\"name\">tel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">enterprise</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>而 <code>properties</code> 类型的配置文件如下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enterprise.name</span>=<span class=\"string\">itcast</span></span><br><span class=\"line\"><span class=\"attr\">enterprise.age</span>=<span class=\"string\">16</span></span><br><span class=\"line\"><span class=\"attr\">enterprise.tel</span>=<span class=\"string\">4006184000</span></span><br></pre></td></tr></table></figure>\n\n<p><code>yaml</code> 类型的配置文件内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enterprise:</span></span><br><span class=\"line\">\t<span class=\"attr\">name:</span> <span class=\"string\">itcast</span></span><br><span class=\"line\">\t<span class=\"attr\">age:</span> <span class=\"number\">16</span></span><br><span class=\"line\">\t<span class=\"attr\">tel:</span> <span class=\"number\">4006184000</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li><p>容易阅读</p>\n<p><code>yaml</code> 类型的配置文件比 <code>xml</code> 类型的配置文件更容易阅读，结构更加清晰</p>\n</li>\n<li><p>容易与脚本语言交互</p>\n</li>\n<li><p>以数据为核心，重数据轻格式</p>\n<p><code>yaml</code> 更注重数据，而 <code>xml</code> 更注重格式</p>\n</li>\n</ul>\n<p><strong>YAML 文件扩展名：</strong></p>\n<ul>\n<li><code>.yml</code> (主流)</li>\n<li><code>.yaml</code></li>\n</ul>\n<p>上面两种后缀名都可以，以后使用更多的还是 <code>yml</code> 的。</p>\n<h4 id=\"2-2-1-语法规则\"><a href=\"#2-2-1-语法规则\" class=\"headerlink\" title=\"2.2.1 语法规则\"></a>2.2.1 语法规则</h4><ul>\n<li><p>大小写敏感</p>\n</li>\n<li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p>\n</li>\n<li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p>\n<p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p>\n</li>\n<li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p>\n</li>\n<li><p># 表示注释</p>\n</li>\n</ul>\n<p>==核心规则：数据前面要加空格与冒号隔开==</p>\n<p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">enterprise:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">itcast</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">16</span></span><br><span class=\"line\">  <span class=\"attr\">tel:</span> <span class=\"number\">4006184000</span></span><br><span class=\"line\">  <span class=\"attr\">subject:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Java</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">前端</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">大数据</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-yaml配置文件数据读取\"><a href=\"#2-3-yaml配置文件数据读取\" class=\"headerlink\" title=\"2.3 yaml配置文件数据读取\"></a>2.3 yaml配置文件数据读取</h3><h4 id=\"2-3-1-环境准备\"><a href=\"#2-3-1-环境准备\" class=\"headerlink\" title=\"2.3.1 环境准备\"></a>2.3.1 环境准备</h4><p>新创建一个名为 <code>springboot_03_read_data</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917172736484.png\" alt=\"image-20210917172736484\" style=\"zoom:80%;\" />\n\n<p>在 <code>com.itheima.controller</code> 包写创建名为 <code>BookController</code> 的控制器，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id ==&gt; &quot;</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>com.itheima.domain</code> 包下创建一个名为 <code>Enterprise</code> 的实体类等会用来封装数据，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Enterprise</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//setter and getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//toString</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，里面配置了不同的数据，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">lesson:</span> <span class=\"string\">SpringBoot</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">enterprise:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">itcast</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">16</span></span><br><span class=\"line\">  <span class=\"attr\">tel:</span> <span class=\"number\">4006184000</span></span><br><span class=\"line\">  <span class=\"attr\">subject:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Java</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">前端</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">大数据</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-读取配置数据\"><a href=\"#2-3-2-读取配置数据\" class=\"headerlink\" title=\"2.3.2 读取配置数据\"></a>2.3.2 读取配置数据</h4><h5 id=\"2-3-2-1-使用-Value注解\"><a href=\"#2-3-2-1-使用-Value注解\" class=\"headerlink\" title=\"2.3.2.1 使用 @Value注解\"></a>2.3.2.1 使用 @Value注解</h5><p>使用 <code>@Value(&quot;表达式&quot;)</code> 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：<code>$&#123;一级属性名.二级属性名……&#125;</code></p>\n<p>我们可以在 <code>BookController</code> 中使用 <code>@Value</code> 注解读取配合文件数据，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lesson;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer port;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String subject_00;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(lesson);</span><br><span class=\"line\">        System.out.println(port);</span><br><span class=\"line\">        System.out.println(subject_00);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-2-2-Environment对象\"><a href=\"#2-3-2-2-Environment对象\" class=\"headerlink\" title=\"2.3.2.2 Environment对象\"></a>2.3.2.2 Environment对象</h5><p>上面方式读取到的数据特别零散，<code>SpringBoot</code> 还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(env.getProperty(<span class=\"string\">&quot;lesson&quot;</span>));</span><br><span class=\"line\">        System.out.println(env.getProperty(<span class=\"string\">&quot;enterprise.name&quot;</span>));</span><br><span class=\"line\">        System.out.println(env.getProperty(<span class=\"string\">&quot;enterprise.subject[0]&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意：这种方式，框架内容大量数据，而在开发中我们很少使用。==</p>\n</blockquote>\n<h5 id=\"2-3-2-3-自定义对象\"><a href=\"#2-3-2-3-自定义对象\" class=\"headerlink\" title=\"2.3.2.3 自定义对象\"></a>2.3.2.3 自定义对象</h5><p><code>SpringBoot</code> 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>\n<ul>\n<li><p>将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p>\n<p>在类上添加 <code>@Component</code> 注解</p>\n</li>\n<li><p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件</p>\n<p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定前缀的数据</p>\n</li>\n<li><p>在 <code>BookController</code> 中进行注入</p>\n</li>\n</ul>\n<p><strong>具体代码如下：</strong></p>\n<p><code>Enterprise</code> 实体类内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Enterprise</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getTel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTel</span><span class=\"params\">(String tel)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tel = tel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getSubject() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSubject</span><span class=\"params\">(String[] subject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Enterprise&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, tel=&#x27;&quot;</span> + tel + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, subject=&quot;</span> + Arrays.toString(subject) +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BookController</code> 内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Enterprise enterprise;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span>&#123;</span><br><span class=\"line\">        System.out.println(enterprise.getName());</span><br><span class=\"line\">        System.out.println(enterprise.getAge());</span><br><span class=\"line\">        System.out.println(enterprise.getSubject());</span><br><span class=\"line\">        System.out.println(enterprise.getTel());</span><br><span class=\"line\">        System.out.println(enterprise.getSubject()[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello , spring boot!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==注意：==</p>\n<p>使用第三种方式，在实体类上有如下警告提示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917180919390.png\" alt=\"image-20210917180919390\" style=\"zoom:70%;\" />\n\n<p>这个警告提示解决是在 <code>pom.xml</code> 中添加如下依赖即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-多环境配置\"><a href=\"#2-4-多环境配置\" class=\"headerlink\" title=\"2.4 多环境配置\"></a>2.4 多环境配置</h3><p>以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 <code>mysql</code> ，连接自己电脑上的 <code>mysql</code> 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917185253557.png\" alt=\"image-20210917185253557\" style=\"zoom:60%;\" />\n\n<p>来回的修改配置会很麻烦，而 <code>SpringBoot</code> 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明</p>\n<h4 id=\"2-4-1-yaml文件\"><a href=\"#2-4-1-yaml文件\" class=\"headerlink\" title=\"2.4.1 yaml文件\"></a>2.4.1 yaml文件</h4><p>在 <code>application.yml</code> 中使用 <code>---</code> 来分割不同的配置，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开发</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span> <span class=\"comment\">#给开发环境起的名字</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#生产</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">pro</span> <span class=\"comment\">#给生产环境起的名字</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">test</span> <span class=\"comment\">#给测试环境起的名字</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置中 <code>spring.profiles</code> 是用来给不同的配置起名字的。而如何告知 <code>SpringBoot</code> 使用哪段配置呢？可以使用如下配置来启用都一段配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置启用的环境</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span> <span class=\"comment\">#表示使用的是开发环境的配置</span></span><br></pre></td></tr></table></figure>\n\n<p>综上所述，<code>application.yml</code> 配置文件内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置启用的环境</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#开发</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#生产</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">pro</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">82</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>==注意：==</p>\n<p>在上面配置中给不同配置起名字的 <code>spring.profiles</code> 配置项已经过时。最新用来起名字的配置项是</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开发</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"attr\">activate:</span></span><br><span class=\"line\">      <span class=\"attr\">on-profile:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-properties文件\"><a href=\"#2-4-2-properties文件\" class=\"headerlink\" title=\"2.4.2 properties文件\"></a>2.4.2 properties文件</h4><p><code>properties</code> 类型的配置文件配置多环境需要定义不同的配置文件</p>\n<ul>\n<li><p><code>application-dev.properties</code> 是开发环境的配置文件。我们在该文件中配置端口号为 <code>80</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">80</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>application-test.properties</code> 是测试环境的配置文件。我们在该文件中配置端口号为 <code>81</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">81</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>application-pro.properties</code> 是生产环境的配置文件。我们在该文件中配置端口号为 <code>82</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">82</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><code>SpringBoot</code> 只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件，配置如下:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">pro</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-3-命令行启动参数设置\"><a href=\"#2-4-3-命令行启动参数设置\" class=\"headerlink\" title=\"2.4.3 命令行启动参数设置\"></a>2.4.3 命令行启动参数设置</h4><p>使用 <code>SpringBoot</code> 开发的程序以后都是打成 <code>jar</code> 包，通过 <code>java -jar xxx.jar</code> 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。</p>\n<p>我们知道 <code>jar</code> 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 <code>SpringBoot</code> 提供了在运行 <code>jar</code> 时设置开启指定的环境的方式，如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar xxx.jar –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>\n\n<p>那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar xxx.jar –-server.port=88</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar springboot.jar –-server.port=88 –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>\n\n<p>大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 <code>SpringBoot</code> 官网已经进行了说明，参见 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</span><br></pre></td></tr></table></figure>\n\n<p>进入上面网站后会看到如下页面</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917193910191.png\" alt=\"image-20210917193910191\"></p>\n<p>如果使用了多种方式配合同一个配置项，优先级高的生效。</p>\n<h3 id=\"2-5-配置文件分类\"><a href=\"#2-5-配置文件分类\" class=\"headerlink\" title=\"2.5 配置文件分类\"></a>2.5 配置文件分类</h3><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917194941597.png\" alt=\"image-20210917194941597\" style=\"zoom:70%;\" />\n\n<p>有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……</span><br></pre></td></tr></table></figure>\n\n<p>针对这种情况，<code>SpringBoot</code> 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。</p>\n<p><code>SpringBoot</code> 中4级配置文件放置位置：</p>\n<ul>\n<li>1级：classpath：application.yml</li>\n<li>2级：classpath：config/application.yml</li>\n<li>3级：file ：application.yml</li>\n<li>4级：file ：config/application.yml</li>\n</ul>\n<blockquote>\n<p>==说明：==级别越高优先级越高</p>\n</blockquote>\n<h4 id=\"2-5-1-代码演示\"><a href=\"#2-5-1-代码演示\" class=\"headerlink\" title=\"2.5.1 代码演示\"></a>2.5.1 代码演示</h4><p>在这里我们只演示不同级别配置文件放置位置的优先级。</p>\n<h5 id=\"2-5-1-1-环境准备\"><a href=\"#2-5-1-1-环境准备\" class=\"headerlink\" title=\"2.5.1.1 环境准备\"></a>2.5.1.1 环境准备</h5><p>创建一个名为 <code>springboot_06_config_file</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200241282.png\" alt=\"image-20210917200241282\" style=\"zoom:80%;\" />\n\n<p>在 <code>resources</code> 下创建一个名为 <code>config</code> 的目录，在该目录中创建 <code>application.yml</code> 配置文件，而在该配置文件中将端口号设置为 <code>81</code>，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br></pre></td></tr></table></figure>\n\n<p>而在 <code>resources</code> 下创建的 <code>application.yml</code> 配置文件中并将端口号设置为 <code>80</code>，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-1-2-验证1级和2级的优先级\"><a href=\"#2-5-1-2-验证1级和2级的优先级\" class=\"headerlink\" title=\"2.5.1.2 验证1级和2级的优先级\"></a>2.5.1.2 验证1级和2级的优先级</h5><p>运行启动引导类，可以在控制台看到如下日志信息</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917200805389.png\" alt=\"image-20210917200805389\"></p>\n<p>通过这个结果可以得出==类路径下的 <code>config</code> 下的配置文件优先于类路径下的配置文件。==</p>\n<h5 id=\"2-5-1-3-验证2级和4级的优先级\"><a href=\"#2-5-1-3-验证2级和4级的优先级\" class=\"headerlink\" title=\"2.5.1.3 验证2级和4级的优先级\"></a>2.5.1.3 验证2级和4级的优先级</h5><p>要验证4级，按照以下步骤完成</p>\n<ul>\n<li><p>将工程打成 <code>jar</code> 包</p>\n<p>点击工程的 <code>package</code> 来打 <code>jar</code> 包</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201243721.png\" alt=\"image-20210917201243721\" style=\"zoom:80%;\" /></li>\n<li><p>在硬盘上找到 <code>jar</code> 包所在位置</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201523669.png\" alt=\"image-20210917201523669\" style=\"zoom:70%;\" /></li>\n<li><p>在 <code>jar</code> 包所在位置创建 <code>config</code> 文件夹，在该文件夹下创建 <code>application.yml</code> 配置文件，而在该配合文件中将端口号设置为 <code>82</code></p>\n</li>\n<li><p>在命令行使用以下命令运行程序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>运行后日志信息如下</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917201922831.png\" alt=\"image-20210917201922831\"></p>\n<p>通过这个结果可以得出==file： <code>config</code> 下的配置文件优先于类路径下的配置文件。==</p>\n</li>\n</ul>\n<blockquote>\n<p>==注意：==</p>\n<p>SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 <code>jar</code> 所在位置的 <code>config</code> 目录下创建一个任意名称的文件夹</p>\n</blockquote>\n<h2 id=\"3，SpringBoot整合junit\"><a href=\"#3，SpringBoot整合junit\" class=\"headerlink\" title=\"3，SpringBoot整合junit\"></a>3，SpringBoot整合junit</h2><p>回顾 <code>Spring</code> 整合 <code>junit</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSave</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        bookService.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>@RunWith</code> 注解指定运行器，使用 <code>@ContextConfiguration</code> 注解来指定配置类或者配置文件。而 <code>SpringBoot</code> 整合 <code>junit</code> 特别简单，分为以下三步完成</p>\n<ul>\n<li>在测试类上添加 <code>SpringBootTest</code> 注解</li>\n<li>使用 <code>@Autowired</code> 注入要测试的资源</li>\n<li>定义测试方法进行测试</li>\n</ul>\n<h3 id=\"3-1-环境准备\"><a href=\"#3-1-环境准备\" class=\"headerlink\" title=\"3.1 环境准备\"></a>3.1 环境准备</h3><p>创建一个名为 <code>springboot_07_test</code> 的 <code>SpringBoot</code> 工程，工程目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917213556673.png\" alt=\"image-20210917213556673\" style=\"zoom:80%;\" />\n\n<p>在 <code>com.itheima.service</code> 下创建 <code>BookService</code> 接口，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>com.itheima.service.impl</code> 包写创建一个 <code>BookServiceImpl</code> 类，使其实现 <code>BookService</code> 接口，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service is running ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-编写测试类\"><a href=\"#3-2-编写测试类\" class=\"headerlink\" title=\"3.2 编写测试类\"></a>3.2 编写测试类</h3><p>在 <code>test/java</code> 下创建 <code>com.itheima</code> 包，在该包下创建测试类，将 <code>BookService</code> 注入到该测试类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Springboot07TestApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        bookService.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意：==这里的引导类所在包必须是测试类所在包及其子包。</p>\n<p>例如：</p>\n<ul>\n<li>引导类所在包是 <code>com.itheima</code></li>\n<li>测试类所在包是 <code>com.itheima</code></li>\n</ul>\n<p>如果不满足这个要求的话，就需要在使用 <code>@SpringBootTest</code> 注解时，使用 <code>classes</code> 属性指定引导类的字节码对象。如 <code>@SpringBootTest(classes = Springboot07TestApplication.class)</code></p>\n</blockquote>\n<h2 id=\"4，SpringBoot整合mybatis\"><a href=\"#4，SpringBoot整合mybatis\" class=\"headerlink\" title=\"4，SpringBoot整合mybatis\"></a>4，SpringBoot整合mybatis</h2><h3 id=\"4-1-回顾Spring整合Mybatis\"><a href=\"#4-1-回顾Spring整合Mybatis\" class=\"headerlink\" title=\"4.1 回顾Spring整合Mybatis\"></a>4.1 回顾Spring整合Mybatis</h3><p><code>Spring</code> 整合 <code>Mybatis</code> 需要定义很多配置类</p>\n<ul>\n<li><p><code>SpringConfig</code> 配置类</p>\n<ul>\n<li><p>导入 <code>JdbcConfig</code> 配置类</p>\n</li>\n<li><p>导入 <code>MybatisConfig</code> 配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><code>JdbcConfig</code> 配置类</p>\n<ul>\n<li><p>定义数据源（加载properties配置项：driver、url、username、password）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driver;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">DruidDataSource</span> <span class=\"variable\">ds</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        ds.setDriverClassName(driver);</span><br><span class=\"line\">        ds.setUrl(url);</span><br><span class=\"line\">        ds.setUsername(userName);</span><br><span class=\"line\">        ds.setPassword(password);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><code>MybatisConfig</code> 配置类</p>\n<ul>\n<li><p>定义 <code>SqlSessionFactoryBean</code></p>\n</li>\n<li><p>定义映射配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MapperScannerConfigurer <span class=\"title function_\">getMapperScannerConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">MapperScannerConfigurer</span> <span class=\"variable\">msc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapperScannerConfigurer</span>();</span><br><span class=\"line\">    msc.setBasePackage(<span class=\"string\">&quot;com.itheima.dao&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionFactoryBean <span class=\"title function_\">getSqlSessionFactoryBean</span><span class=\"params\">(DataSource dataSource)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSessionFactoryBean</span> <span class=\"variable\">ssfb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBean</span>();</span><br><span class=\"line\">    ssfb.setTypeAliasesPackage(<span class=\"string\">&quot;com.itheima.domain&quot;</span>);</span><br><span class=\"line\">    ssfb.setDataSource(dataSource);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ssfb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-SpringBoot整合mybatis\"><a href=\"#4-2-SpringBoot整合mybatis\" class=\"headerlink\" title=\"4.2 SpringBoot整合mybatis\"></a>4.2 SpringBoot整合mybatis</h3><h4 id=\"4-2-1-创建模块\"><a href=\"#4-2-1-创建模块\" class=\"headerlink\" title=\"4.2.1 创建模块\"></a>4.2.1 创建模块</h4><ul>\n<li>创建新模块，选择 <code>Spring Initializr</code>，并配置模块相关基础信息</li>\n</ul>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215913779.png\" alt=\"image-20210917215913779\" style=\"zoom:80%;\" />\n\n<ul>\n<li><p>选择当前模块需要使用的技术集（MyBatis、MySQL）</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917215958091.png\" alt=\"image-20210917215958091\" style=\"zoom:80%;\" /></li>\n</ul>\n<h4 id=\"4-2-2-定义实体类\"><a href=\"#4-2-2-定义实体类\" class=\"headerlink\" title=\"4.2.2 定义实体类\"></a>4.2.2 定义实体类</h4><p>在 <code>com.itheima.domain</code> 包下定义实体类 <code>Book</code>，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Book</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//setter and  getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//toString</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-3-定义dao接口\"><a href=\"#4-2-3-定义dao接口\" class=\"headerlink\" title=\"4.2.3 定义dao接口\"></a>4.2.3 定义dao接口</h4><p>在 <code>com.itheima.dao</code> 包下定义 <code>BookDao</code> 接口，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Book <span class=\"title function_\">getById</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-4-定义测试类\"><a href=\"#4-2-4-定义测试类\" class=\"headerlink\" title=\"4.2.4 定义测试类\"></a>4.2.4 定义测试类</h4><p>在 <code>test/java</code> 下定义包 <code>com.itheima</code> ，在该包下测试类，内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testGetById</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Book</span> <span class=\"variable\">book</span> <span class=\"operator\">=</span> bookDao.getById(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(book);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-5-编写配置\"><a href=\"#4-2-5-编写配置\" class=\"headerlink\" title=\"4.2.5 编写配置\"></a>4.2.5 编写配置</h4><p>我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 <code>SpringBoot</code> 的配置文件中进行配合。</p>\n<p>在 <code>application.yml</code> 配置文件中配置如下内容</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-6-测试\"><a href=\"#4-2-6-测试\" class=\"headerlink\" title=\"4.2.6 测试\"></a>4.2.6 测试</h4><p>运行测试方法，我们会看到如下错误信息</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917221427930.png\" alt=\"image-20210917221427930\" style=\"zoom:70%;\" />\n\n<p>错误信息显示在 <code>Spring</code> 容器中没有 <code>BookDao</code> 类型的 <code>bean</code>。为什么会出现这种情况呢？</p>\n<p>原因是 <code>Mybatis</code> 会扫描接口并创建接口的代码对象交给 <code>Spring</code> 管理，但是现在并没有告诉 <code>Mybatis</code> 哪个是 <code>dao</code> 接口。而我们要解决这个问题需要在<code>BookDao</code> 接口上使用 <code>@Mapper</code> ，<code>BookDao</code> 接口改进为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Book <span class=\"title function_\">getById</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==注意：==</p>\n<p><code>SpringBoot</code> 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题</p>\n</blockquote>\n<h4 id=\"4-2-7-使用Druid数据源\"><a href=\"#4-2-7-使用Druid数据源\" class=\"headerlink\" title=\"4.2.7 使用Druid数据源\"></a>4.2.7 使用Druid数据源</h4><p>现在我们并没有指定数据源，<code>SpringBoot</code> 有默认的数据源，我们也可以指定使用 <code>Druid</code> 数据源，按照以下步骤实现</p>\n<ul>\n<li><p>导入 <code>Druid</code> 依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>application.yml</code> 配置文件配置</p>\n<p>可以通过 <code>spring.datasource.type</code> 来配置使用什么数据源。配置文件内容可以改进为</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5，案例\"><a href=\"#5，案例\" class=\"headerlink\" title=\"5，案例\"></a>5，案例</h2><p><code>SpringBoot</code> 到这就已经学习完毕，接下来我们将学习 <code>SSM</code> 时做的三大框架整合的案例用 <code>SpringBoot</code> 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 <code>SpringBoot</code> 的即可，主要从以下几部分完成</p>\n<ol>\n<li><p>pom.xml</p>\n<p>配置起步依赖，必要的资源坐标(druid)</p>\n</li>\n<li><p>application.yml</p>\n<p>设置数据源、端口等</p>\n</li>\n<li><p>配置类</p>\n<p>全部删除</p>\n</li>\n<li><p>dao</p>\n<p>设置@Mapper</p>\n</li>\n<li><p>测试类</p>\n</li>\n<li><p>页面</p>\n<p>放置在resources目录下的static目录中</p>\n</li>\n</ol>\n<h3 id=\"5-1-创建工程\"><a href=\"#5-1-创建工程\" class=\"headerlink\" title=\"5.1 创建工程\"></a>5.1 创建工程</h3><p>创建 <code>SpringBoot</code> 工程，在创建工程时需要勾选 <code>web</code>、<code>mysql</code>、<code>mybatis</code>，工程目录结构如下</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225019868.png\" alt=\"image-20210917225019868\" style=\"zoom:80%;\" />\n\n<p>由于我们工程中使用到了 <code>Druid</code> ，所以需要导入 <code>Druid</code> 的坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-代码拷贝\"><a href=\"#5-2-代码拷贝\" class=\"headerlink\" title=\"5.2 代码拷贝\"></a>5.2 代码拷贝</h3><p>将 <code>springmvc_11_page</code> 工程中的 <code>java</code> 代码及测试代码连同包拷贝到 <code>springboot_09_ssm</code> 工程，按照下图进行拷贝</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917225715519.png\" alt=\"image-20210917225715519\" style=\"zoom:70%;\" />\n\n<p>需要修改的内容如下：</p>\n<ul>\n<li><p><code>Springmvc_11_page</code> 中 <code>config</code> 包下的是配置类，而 <code>SpringBoot</code> 工程不需要这些配置类，所以这些可以直接删除</p>\n</li>\n<li><p><code>dao</code> 包下的接口上在拷贝到 <code>springboot_09-ssm</code> 工程中需要在接口中添加 <code>@Mapper</code> 注解</p>\n</li>\n<li><p><code>BookServiceTest</code> 测试需要改成 <code>SpringBoot</code> 整合 <code>junit</code> 的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetById</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Book</span> <span class=\"variable\">book</span> <span class=\"operator\">=</span> bookService.getById(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetAll</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class=\"line\">        System.out.println(all);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-3-配置文件\"><a href=\"#5-3-配置文件\" class=\"headerlink\" title=\"5.3 配置文件\"></a>5.3 配置文件</h3><p>在 <code>application.yml</code> 配置文件中需要配置如下内容</p>\n<ul>\n<li>服务的端口号</li>\n<li>连接数据库的信息</li>\n<li>数据源</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/ssm_db</span> <span class=\"comment\">#?servierTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-静态资源\"><a href=\"#5-4-静态资源\" class=\"headerlink\" title=\"5.4 静态资源\"></a>5.4 静态资源</h3><p>在 <code>SpringBoot</code> 程序中是没有 <code>webapp</code> 目录的，那么在 <code>SpringBoot</code> 程序中静态资源需要放在什么位置呢？</p>\n<p>静态资源需要放在 <code>resources</code> 下的 <code>static</code> 下，如下图所示</p>\n<img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210917230702072.png\" alt=\"image-20210917230702072\" style=\"zoom:80%;\" />"},{"title":"Hexo DGS","date":"2022-03-29T13:18:34.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo DGS\ndate: 2022-03-29 21:18:34\ntags:\n- hexo指南\n- shell\ncategories: \n- 操作手册\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-04-19T11:22:55.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3t000lq05zaxdafvj6","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"java菜鸟记","date":"2021-01-03T04:00:01.000Z","_content":"\n## java\n\n三元运算符可以嵌套\n\n### 位运算符\n\n操作的是整形的数据\n\n<<:在一定范围内,每向左移一位,相当于 \\*2\n\n> 最高效计算2\\*8. --> 2 << 3. // 8 << 1;\n\n### 数组\n\n​ equal\n\nfill\n\nsort\n\ntoString\n\nbinarySearch\n\n### 构造器(constructor)\n\n如果没有显示的定义累的构造器的话 系统默认提供一个空参构造器/\n\n### 方法调用时的内存分配\n\n#### 内存何时分配\n\n方法只有被调用时，在JVM中会给该方法分配“运行所属“内存空间。\n\n#### JVM内存划分的三块主要空间\n\n- **方法区内存**（代码片段）\n- 堆内存\n- 栈内存(分配方法运行的所属内存空间)\n\n#### 数据结构——“栈”\n\n- 栈针永远指向栈顶元素\n\n- 异常 需要注意的问题 需 要按照类型的要求输入,很具相应的方法,吐过输入的数据类型月要皮球的数据类型不匹配时没汇报一导致程序\n\n- 栈顶元素处于活跃，其他元素静止\n\n- 术语\n\n  - 入栈/压栈/push\n  - 弹栈/出栈/pop\n\n- **先进后出 后进先出**\n\n  main进->m1进->m2进->m2出->m1出->main出\n\n#### 方法代码片段的存储\n\n1. 方法代码片段属于.class字节码文件的一部分，字节码文件在（classLoader加载器寻找HelloWorld.class）类加载的时候，将其放到了方法去中。所以JVM中的三块主要的内存空间中**方法区内存**最先有数据，存放了代码片段。\n2. 代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每次调用这个方法的时候需要给该方法分配**独立的活动场所**，在栈内存中分配。\n3. 方法调用，给方法分配内存，压栈；方法结束之后，释放分配内存，弹栈\n\n### 类与对象\n\n类描述对象的共同特征\n\n**类描述的是 状态和动作**（属性+方法）\n\n#### 类的定义\n\n类{\n\n状态：属性\n\n动作：方法；\n\n}\n\n```java\n//学生类\npublic class Student{\n\t//属性【描述对象的状态信息】\n\t//属性一般是通过变量的形式完成定义的（int String boolean）\n\t//在类体中，方法体之外定义的变量被称为“成员变量”\n\n\t//学号\n\tint no;\n\t//姓名\n\tString name;\n\t//年龄\n  int age;\n\n\t//方法\n  //方法买哦书的是对象的动作信息\n\n  //唱歌\n\n  //跳舞\n\n}\n```\n\n##### java两种数据类型\n\n1. 基本数据类型\n\n   short\n\n   long\n\n   int\n\n   boolean\n\n   String\n\n   char\n\n2. 引用数据类型\n\n   String.class SUN公司定义\n\n   System.class SUN公司定义\n\n   Student.class 我定义\n\n   MingShen.class 我定义\n\n   ....\n\n   **java中所有的类都为引用数据类型**\n\n#### 对象的创建和使用\n\n```java\npublic class OOtest01{\n  public static void main(String[] args){\n    //int 是基本数据类型\n    //i 是变量名\n    //10 是一个int类型的字面值\n    int i = 10;\n\n    //通过一个类可以实例化N个对象\n\t\t//实例化对象语法 new 类名（）；\n\t\t//new运算符作用是创建对象，在JVM中\n    //new运算符的作用是创建对象，在JVM堆内存中开辟新的内存空间\n    //方法区内存：再类加载的时候，clss字节码代码片段被加载到内存空间当中\n    //栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈\n    //堆内存：new studeng（）；\n\n    //Student 是引用数据类型\n    //s 是变量名\n    //new Student是一个学生对象\n    Student s = new Student();\n\n  }\n}\n```\n\n**当程序执行到new时的内存图如下**\n\n![image-20210527190012042](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527190012042.png)\n\nNon, age, sex, name, addr都是**实例变量**\n\nstudent这个new出来的对象的**内存地址**给了s，s时**局部变量**，s为**引用**\n\n什么是对象？new运算符在堆内存中开辟的内存空间称为对象\n\n什么是引用？引用是一个变量，只不过这个变量中保存了另一个java对象的内存地址\n\njava语言当中程序员只能通过“引用”去访问对内存当中对象内部的实例变量\n\n访问实例变量的内存数据\n\n读取数据：引用.变量名\n\n修改数据：引用.变量名 = 值\n\n```java\n\tint StuNo = s.no;\n\tint StuAge = s.Age；//读取\n  s.no = 10;\n  s.name = \"MingShen\";\n  s.age = 10;//会把堆内存的内存值改了\n  Student stu = new Student();//再次new对象 stu是引用\n```\n\n![image-20210527193017688](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527193017688.png)\n\n局部变量在栈内存中储存\n\n成员变量中的实例变量在堆内存的java对象内部储存\n\n实例变量是一个对象一份，100个对象有100份\n\n```java\nSystem.out.printIn(stu.age);//10\nSystem.out.printIn(student.no);//报错\n```\n\n报错因为no这个实例变量不能直接采用“类名”的方式访问\n\n因为no是实例变量，对象级别的变量，变量储存在Java对象内部，必须先有对象通过对象才能访问no这个实例变量，不能直接通过“类名”\n\n成员变量没有手动赋值，系统赋默认值\n\n| 数据类型                  |               |\n| ------------------------- | ------------- |\n| byte， short， int， long | 0             |\n| float，double             | 0.0           |\n| char                      | \\u000         |\n| 引用数据类型              | null （空值） |\n|                           |               |\n|                           |               |\n\n```java\npublic class Address{\n  String city;\n  String street;\n  String zipcode;\n}\n\n```\n\n```java\npublic class User{\n  //属性【以下都是成员变量之实例变量】\n  int no;//int基本数据类型，no是实例变量\n  String name;//String引用数据类型，name是引用满是实例变量\n  Address addr;//Address引用数据类型，addr是引用\n}\n```\n\n```java\npublic class OOTest02\n{\n  public static void main(String[] args){\n    //创建User对象\n    //u是局部变量\n    //u是一个引用\n    //u保存内存地址指向堆内存的User对象\n    User u = new User()；//（从右往前）\n    u.no = 110;\n    u.name = \"jack\";//字符串比较特殊不用new，jack是一个Java对象，属于String对象\n    u.addr = new Address();//等号右边先执行，Address对象三个none、none、none\n\n    //main方法只有一个引用u\n    //一切只能通过u来访问\n    System.out.println(u.name + \"居住在\" + u.addr.city);\n  }\n}\n```\n\n![image-20210527194926715](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527194926715.png)\n\n![image-20210527195317973](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195317973.png)\n\n**找出所有引用**\n\n![image-20210527195451792](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195451792.png)\n\n空引用访问“实例”相关数据一定会造成空指针异常 NullPointerException\n\n实例相关数据表示访问时必须有对象参与\n\n### 类怎么定义\n\n[修饰符列表]class 类名{\n\n属性；\n\n方法；\n\n}\n\n现实世界当中超市中的商品，发现这所有的商品都要有一些共同的特征，例如，每一个商品都有编号，每一个商品都有单价，所以定义以下的类，来代表所有商品。\n\n```java\npublic class Product{//为什么要写class？因为要做超市的管理系统，超市有商品，商品有共同的特征，想到了编号，单价，所以利用基本数据类型（int double），定义了两个变量。\n\t//编号【数字，整数】\n  int productNo;\n  //productNo是基本数据类型\n  //单价【数字，小数】\n  double price;\n  //price 是基本数据类型\n\n  Student s= null;\n}\nProduct pro = new Product{};//实例变量需要new出来才能引用，引用方式如下\npro.price = 0x1123123;//访问 可以（读一读）（改一改）\n```\n\n**product是实例变量，下面对他进行访问**\n\n```java\npublic class ProductTest{\n  public static void main(string[] args){\n    //创建对象，商品对象\n    //iphoneProMax局部变量\n    //iphoneProMax引用\n    //iphoneProMax变量中保存内存地址指向堆内存当中的商品对象\n    Product iphoneProMax = new Product();\n    //访问实例变量的语法： 引用.变量名\n    System.out.printIn(\"商品编号：\"+iphoneProMax.productNo);\n    iphoneProMax.price = 8000.0；\n    System.out.println(\"商品单价：\"+iphoneProMax.price);\n  }\n\n```\n\n```java\n/*\n\t要求定义一个汽车类\n\t\t*品牌：字符串\n\t\t*颜色：字符串\n\t\t*号牌：字符串\n\t\t*购买总价：浮点型数据\n*/\npublic class Car{\n  //属性【成员变量之：实例变量】\n  //总价\n  基本数据类型\n  double price;\n  //品牌\n  引用数据类型\n  String brand;\n  //颜色\n  //引用数据类型\n  String color;\n  //号牌\n  //引用数据类型\n  String No;\n}\n```\n\n```java\n/*\n\t房屋类(不太行)\n*/\npublic class house{\n  double proportion;\n  String owner;//想知道户主的身份信息，但是不能在下一行定义实例变量ID，会误解为房子的ID\n\n}\n\n```\n\n```java\n/*\n\t房屋类（行）\n*/\npublic class house{\n  double proportion;\n  Person owner ;//new是个地址（其中就是联系电话、就是地址、就是各种信息）\n}\npublic class Person{\n  //名字\n  String name;\n  //身份证号\n  String id;\n  //性别\n  boolean sex;\n  //年龄\n  int age;\n  //妻子\n  Wife wife；\n}\n```\n\n### 封装\n\n1. 对外提供简单的操作入口，照相机原理很复杂，但是操作很简单\n2. 提高安全性\n3. 以后程序可以重服使用\n4. 封装后才形成真正的对象，“独立体”\n\n```java\npublic class User\n  public static void main()\n```\n\n#### 封装的步骤\n\n1. 属性私有化，是用private进行修饰，private表示私有，修饰后的所有数据只能在本类中访问。\n\n2. 对外提供简单的入口\n\n   对外提供两个方法（get，set）\n\n#### 背会\n\nsette and getter方法没有static关键字\n\n有static关键字修饰的方法怎么调用：类 名.方法名（实参）；\n\n没有static关键字修饰的方法：引用.方法名（实参）\n\n```java\npublic class User{\n  private int age;\n  public void setAge(int a){\n  if(a < 0 || a >150 ){\n    System.out.println(\"对不起，您给的年龄不合法\")\n    return;\n  }\n  age = a;\n\t}\n \tpublic int getAge(){\n  return age;\n}\n}\n\n```\n\n封装之后\n\n```java\npublic class UserTest{\n  public static void main(String[] srgs){\n    User user = new User();\n    user.setAge(10);\n    System.out.println(user.getAge());\n  }\n}\n```\n\n#### 构造方法\n\n1. 构造方法又称构造函数，返回值类型不需要指定，加上void int 就变成普通方法了\n\n2. 构造方法的作用：通过方法的调用创建对象。\n\n3. 构造方法的方法名必须和类名保持一致\n\n4. 每个构造方法实际上执行结束之后都有返回值，但是这个return不需要写，返回值就是类本身\n\n5. [修饰符列表]构造方法方法名（形参数）\n\n   {方法体}；\n\n   }\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args){\n        //创建User对象\n        //调用User类的构造方法来完成对象的创建\n        //以下程序创建了4个对象，只要构造函数调用就会查u你感觉爱你对象，并且在“堆内存”开辟内存空间\n\n        User u2 = new User(10);\n        User u3 = new User(\"gujm\");\n        ConstructorTest01.dosome();\n        dosome();\n        ConstructorTest01 t = new ConstructorTest01();\n        t.doOther();\n    }\n    //调用带有static的方法：类名\n    public static void dosome(){\n        System.out.println(\"do some!\");\n    }\n    //调用没有static的方法：引用\n    //doOther方法在ConstructorTest01类中，所以需要创建ConstructorTest01对象\n    //创建ConstructorTest01对象之后，调用无参数构造方法\n    public void  doOther(){\n        System.out.println(\"Do other!\");\n    }\n}\n```\n\n```java\npublic class User{\n\n    public User(int i){\n        System.out.println(\"带有int类型构造器\");\n    }\n    public User(String name){\n        System.out.println(\"带有String类型构造器\");\n    }\n}\n\n```\n\n构造方法作用：创造对象，给实例对象赋值\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args) {\n        Account act1 = new Account();\n        act1.setActno(\"111\");\n        System.out.println(act1.getActno());\n        Account act2 = new Account(\"10\");\n        System.out.println(act2.getActno());\n        System.out.println(act1.getBalance());\n    }\n}\n```\n\n```java\npublic class Account {\n    private String actno;//实例变量，创建对象之后才会有实例变量，实例方法在构造方法过程中完成赋值\n    private double balance;\n    public String getActno() {\n        return actno;\n    }\n\n    public void setActno(String actno) {\n        this.actno = actno;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n    public Account(){\n        System.out.println(\"空参数方法\");\n    };\n    public Account(String s){\n        actno = s;\n    }\n\n}\n```\n\n### 参数传递\n\n传的永远是变量保存的值\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args) {\n        User u = new User(20);\n      //User User = 0x1234\n      //传递u给add方法的时候，实际上传递的是u变量中保存的值，只不过这个值是一个java对象的内存地址\n        add(u);\n        System.out.println(u.age);\n    }\n    public static void add(User u){\n        u.age++;\n        System.out.println(\"add-->\" + u.age);\n    }\n    static class User{\n        int age;\n        public User(int i){\n            age = i;\n        }\n    }\n}\n```\n\n![image-20210620092032503](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210620092032503.png)\n\n第二个例子\n\n```java\nUser u =0x1234;\nUser u1= u;//u传递给了u1，实际上是吧0x1234这个值赋值给了u1，u和u1实际上是两个不同的局部变量\n//但是他们的两个变量指向堆内存中同一个java对象\n```\n\n### this\n\nthis 是一个 关键字，翻译为：这个，用在方法中\n\nthis是一个引用，this是一个变量，this变量中保存内存地址指向了自身，this储存子啊JVM堆内存java对象内部\n\n创建100个java对象，每个对象都有this，也就是说有100个不同的this\n\n**this代表当前正在做（执行实例方法）这个动作的对象**\n\n不能用在static方法中\n\n在static方法中不能“直接”访问实例变量 实例方法\n\n因为实例都需要对象存在\n\n而static中没有this，也就是说，当前对象是不存在的\n\n自然无法访问当前对象的实例方法\n\n**用来区分实例变量和局部变量时 this不能省**\n\n```java\n\n```\n\nthis（）这种语法只能放在构造方法第一行\n\n### static\n\n应该采用类名的方式访问，即使new了对象访问static方法，其本质也用的是类名，与引用指向的对象无关，哪怕（t = null）也不会出现空指针异常\n\n```java\npublic class Chinese{\n private String id;\n private String name;\n //国籍每个对象由于都是Chinese类的实例化，所以每个中国人国籍都是Chinese\n //实例对象在堆内存\n //String country;//所以没必要定义为实例变量,没必要让每一个对象都占内存，改为下一行\n static String country = \"中国\";//类级别特征，变量前加static，静态变量不需要创造对象，内存就开辟了，在方法区内存\n}\n```\n\n![image-20210624165417791](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210624165417791.png)\n\n#### 什么时候成员变量申明为静态变量？\n\n所有的对象都有这个属性，并且所有对象的这个属性值一样\n\n#### 什么时候成员变量申明为静态变量？\n\n所有对象都有这个属性，不同对象值不同或属性值随对象值改变\n\n#### static使用方式\n\n静态变量在类加载的时候u初始化，内存在方法区开辟，访问时不需创造对象，直接**类名.变量名**\n\n#### 使用static定义“静态代码块”\n\n1.语法格式：\n\n​ static {\n\njava语句;\n\n​ }\n\n2.静态代码在类加载时执行，并且只执行一次\n\n3.静态代码块在一个类中可以编写多个，从上往下\n\n4.静态代码块的作用？什么时候用\n\n​ 静态代码时java为程序员准备的一个特殊时刻，在类加载时刻，若需要此刻还在一段特殊程序，可以直接放到静态代码中\n\n#### 静态方法\n\n描述一个动作，所有对象执行这个动作最终产生的影响一样，不再属于某一个对象动作\n\n大多数“工具类”的方法都是静态方法，方便使用\n\n### 继承\n\n继承的基本作用：代码复用，但是继承最重要的作用时：有了继承才有了以后方法的覆盖和多态机制\n\n[修饰符列表]class 类名 extends 父类名{\n\n​ 类体 = 属性 + 方法\n\n}\n\njava语言的继承制支持单继承，一个类不能同时继承很多类，只能继承一个类。\n\nB类继承A类，A称为父类，基类，超类，superclass\n\n​ B称为子类，派生类，subclass\n\n私有不支持继承，构造方法不支持继承\n\n### 方法覆盖\n\n又称方法重写override/Overwrite\n\n父类中的方法满足不了子类中的业务需求，有必要重写方法\n\n就是重新写一遍**完全一样复制**方法，方法区中代码自己改，方法名不变，返回类型不变，参数列表不变，抛出异常不能更低，不能更少，访问权限不能更低可以更高\n\nanimal.move(); cat extend animal;\n\n私有方法不能继承不能覆盖\n\n构造方法不能继承不能覆盖\n\n静态方法不存在覆盖（多态后）\n\n### 多态\n\nanimal/ bird /cat\n\ncat和bird没有任何继承关系\n\n面向对象三大特征：封装 继承 多态\n\n多态中涉及到的几个概念\n\n- 向上转型（upcasting）\n\n  子类型 --> 父类型\n\n  自动类型转换\n\n- 向下转型（downcasting）\n\n  父类型 --> 子类型\n\n  强制类型转换\n\n![image-20210625084016091](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210625084016091.png)\n\n```java\npublic class Animal {\n    public void move(){\n        System.out.println(\"动物在行走\");\n    }\n}\n```\n\n```java\n public class Cat extends Animal{\n    public void move(){\n        System.out.println(\"猫在走猫步\");\n    }\n    public void catchMouse(){\n        System.out.println(\"猫抓老鼠\");\n    }\n}\n```\n\n```java\npublic class Bird extends Animal{\n    public void move(){\n        System.out.println(\"鸟在飞翔\");\n    }\n}\n```\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args) {\n        Animal a = new Animal();\n        a.move();\n\n        Cat b = new Cat();\n        b.move();\n        b.catchMouse();\n\n        Bird c = new Bird();\n        c.move();\n\n        //使用多态\n\n        /*\n        Cat is an Animal\n        父类型引用指向子类型对象\n        new Cat()创建的对象类型为Cat，a2这个引用的数据类型是Animal，可见他们进行了类型转换\n        子类型转换成了父类型，称为向上转型，自动类型转换\n        */\n        Animal a2 = new Cat();\n   /*    java两个阶段 编译阶段· 运行阶段\n\n编译无法通过程序无法运行\n\n编译阶段编译器检查a2这个引用的数据类型为Animal.class,字节码中有move方法，所以编译通过了，这个过程我们称为静态绑定，编译阶段绑定\n\n在程序运行阶段，JVM堆内存当中真实创建的对象是Cat对象啊，那么下面程序在运行阶段一定调用Cat对象的move()方法，此时发生程序动态绑定\n        */\n        a2.move();\n      /*\n      \ta2.catchMouse();\n      \t编译阶段就出错了\n      */\n      Cat c2 = (Cat)a2;\n      c2.catchMouse();\n\n      //以下程序编译没问题\n      //但是运行会出现异常，因为JVM堆内存中真正存在的对象是Bird类型，Bird对象无法转换为Cat对象，因为两种类型之间不存在任何继承关系，此时出现了著名的异常\n      //java.lang.ClassCastException\n      //类型转换异常，向下转型时会发生\n      Animal a3 = new Bird();\n      cat c3 = (Cat)a3;\n      /*\n      以上异常只有在强制类型转换时才会发生，这么说向下转型存在隐患\n      向上转型只要编译通过一定能运行，\n      向下转型，运行可能错误java.lang.ClassCastException\n      */\n    }\n}\n```\n\n#### 什么时候需要向下转型\n\n当调用的属性和方法是在子类型中特有的，父类型中不存在\n\n#### 避免向下转型ClassCastException异常\n\n（引用instanceof 数据类型名）\n\n（a instanceof Animal）\n\ntrue表示：\n\n​ a引用指向的对象是Animal\n\nfalse。。。\n\n```java\nif(a3 instanceof Bird){\n  Bird b2 = (Bird)a3;\n  b2.fly;\n}\nelse if(a3 instanceof Cat){\n  Cat c3 = (Cat)a3;\n  C2.catchMouse();\n}\n```\n\n耦合度低 扩展力强\n\n### final\n\n1最终的、不可变得\n\n2final修饰的类无法**被继承**\n\n3final修饰的方法不能被**覆盖**\n\n4变量赋值后不能**再赋值**\n\n5实例变量加final需要手动赋值 final int age = 0；\n\n6final 修饰的对象无法改变指向别的对象\n\n#### 常量定义语法格式\n\n```java\npublic static final 类型 常量名 = 值；\n//常量名必须大写 单词之间下划线连接\npublic static final String GUO_JI = \"中国\";\npublic static final double PI = 3.14159;\n```\n\n### package && import\n\n在java源程序第一行编写package语句\n\npackage 包名;\n\n包名命名规范：\n\n公司域名倒序 +项目名oa +模块名 +功能名;\n\ncom.bjpowernode.oa.user.service;\n\n包名必须全部小写，也是标识符\n\n一个包对应一个目录\n\nimport com.bjpowernode.oa.user.service；\n\nimport语句用来倒入其他类，同一个包下的类不需要导入\n\nimport 类名;\n\nimport 包名.\\*;\n\nJava.lang.\\* 不需要手动引入，系统自动\n\nimport java.util.\\*\n\n4\n\n### 访问控制权限\n\n> ​ public 表示公开的\n>\n> ​ protected 同包下可以访问，子类可以访问\n>\n> ​ 缺省 同包\n>\n> ​ private 表示私有，只能在本类访问\n\n缺省和protected出了包之后就\n\n### super\n\nsuper关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。x\n\n#### 构造器\n\n子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 **super** 关键字调用父类的构造器并配以适当的参数列表。\n\n如果父类构造器没有参数，则在子类的构造器中不需要使用 **super** 关键字调用父类构造器，系统会自动调用父类的无参构造器\n\n```java\nclass SuperClass {\n  private int n;\n  SuperClass(){\n    System.out.println(\"SuperClass()\");\n  }\n  SuperClass(int n) {\n    System.out.println(\"SuperClass(int n)\");\n    this.n = n;\n  }\n}\n// SubClass 类继承\nclass SubClass extends SuperClass{\n  private int n;\n\n  SubClass(){ // 自动调用父类的无参数构造器\n    System.out.println(\"SubClass\");\n  }\n\n  public SubClass(int n){\n    super(300);  // 调用父类中带有参数的构造器\n    System.out.println(\"SubClass(int n):\"+n);\n    this.n = n;\n  }\n}\n// SubClass2 类继承\nclass SubClass2 extends SuperClass{\n  private int n;\n\n  SubClass2(){\n    super(300);  // 调用父类中带有参数的构造器\n    System.out.println(\"SubClass2\");\n  }\n\n  public SubClass2(int n){ // 自动调用父类的无参数构造器\n    System.out.println(\"SubClass2(int n):\"+n);\n    this.n = n;\n  }\n}\npublic class TestSuperSub{\n  public static void main (String args[]){\n    System.out.println(\"------SubClass 类继承------\");\n    SubClass sc1 = new SubClass();\n    SubClass sc2 = new SubClass(100);\n    System.out.println(\"------SubClass2 类继承------\");\n    SubClass2 sc3 = new SubClass2();\n    SubClass2 sc4 = new SubClass2(200);\n  }\n}\n输出结果为：\n\n------SubClass 类继承------\nSuperClass()\nSubClass\nSuperClass(int n)\nSubClass(int n):100\n------SubClass2 类继承------\nSuperClass(int n)\nSubClass2\nSuperClass()\nSubClass2(int n):200\n```\n\n```java\ndo {\n            str = br.readLine();\n            System.out.println(str);\n        } while (!str.equals(\"end\"));\n    }\n```\n\n除了static内部类,内部类中不允许static静态变量\n\n### 值传递\n\n![image-20210727142922916](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727142922916.png)\n\n![image-20210727144149656](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727144149656.png)\n\n```java\n/**\n * @author Gujm\n * @date 2021/7/27 8:14 下午\n */\npublic class BankTest{\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        bank.addCustomer(\"G\",\"jm\");\n        bank.getCustomer(0).setAccount(new Account(2000));\n        bank.getCustomer(0).getAccount().withdraw(500);\n        double balance = bank.getCustomer(0).getAccount().getBalance();\n        System.out.println(bank.getCustomer(0).getFirstName()+\"账户余额为\"+balance);\n    }\n}\n class Bank {\n    private Customer[] customers;\n    private int numberOfCustomers;//客户个数\n    public Bank(){\n        customers = new Customer[10];\n    }\n    //添加客户\n    public void addCustomer(String f, String l){\n        Customer cust = new Customer(f,l);\n        customers[numberOfCustomers++] = cust;\n    }\n    //获取客户个数\n    public int getNumberOfCustomers(){\n        return numberOfCustomers;\n    }\n    //获取制定位置的客户\n    public Customer getCustomer(int index){\n        if(index >= 0 && index < numberOfCustomers){\n        return customers[index];\n        }else{\n            return null;\n        }\n    }\n}\n class Account{\n    private double balance;\n    public Account(double init_balance){\n        this.balance = init_balance;\n    }\n    public double getBalance() {\n        return balance;\n    }\n    public void deposit(double amt){\n        if(amt > 0){\n            balance += amt;\n            System.out.println(\"存钱成功\");\n        }\n    }\n    public void withdraw(double amt){\n        if (balance >= amt){\n            balance -= amt;\n            System.out.println(\"取钱成功\");\n        }\n        else {\n            System.out.println(\"余额不足\");\n        }\n    }\n}\n class Customer{\n    private String firstName;\n    private String lastName;\n    private Account account;\n    public Customer(String f, String l){\n        this.firstName = f;\n        this.lastName = l;\n    }\n     public String getFirstName() {\n         return firstName;\n     }\n\n     public String getLastName() {\n         return lastName;\n     }\n     public void setAccount(Account account) {\n         this.account = account;\n     }\n     public Account getAccount() {\n         return account;\n     }\n}\n```\n\n### equals()\n\nString、Date 、 File、Io包装都重写了equals()方法, 只比较实体内容是否相等.\n\n### 基本数据类型包装类\n\n```java\nString str1 = \"123\";\n\nint num2 = Integer.parseInt(str1);\n\nSystem.out.println(num2+1);\n\nString str2 = \"true1\";\n\nBoolean b1 = Boolean.parseBoolean(str2);\n\nsout(b1);\n```\n\n### 多线程\n\n```java\npackage java3;\n\n/**\n * @author Gujm\n * @date 2021/8/21 2:15 下午\n */\nclass Clerk {\n    private int productCount = 0;\n\n    //生产\n    public synchronized void produceProduct() {\n        if (productCount < 20) {\n            productCount++;\n            System.out.println(Thread.currentThread().getName() + \"开始生产第\" + productCount);\n        }else{\n            //等待\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    //消费\n    public synchronized void consumeProduct() {\n        if (productCount > 0){\n            System.out.println(Thread.currentThread().getName() + \"开始消费第\" + productCount);\n            productCount--;\n        }else {\n            //等待\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Producer extends Thread {\n    private Clerk clerk;\n\n    public Producer(Clerk clerk) {\n        this.clerk = clerk;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(getName() + \"开始生产。。\");\n        while (true) {\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            clerk.produceProduct();\n        }\n    }\n}\n\nclass Customer extends Thread {\n    private Clerk clerk;\n\n    public Customer(Clerk clerk) {\n        this.clerk = clerk;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(getName() + \"开始消费。。\");\n        while (true) {\n            try {\n                Thread.sleep(20);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            clerk.consumeProduct();\n        }\n    }\n}\n\npublic class ProductTest {\n    public static void main(String[] args) {\n        Clerk clerk = new Clerk();\n        Producer p1 = new Producer(clerk);\n        p1.setName(\"生产者1\");\n        Customer c1 = new Customer(clerk);\n        c1.setName(\"消费者1\");\n        Customer c2 = new Customer(clerk);\n        c2.setName(\"消费者2\");\n        p1.start();\n        c1.start();\n        c2.start();\n    }\n}\n```\n\n### 常用类\n\n#### String\n\n### ArrayList常用方法\n\n```java\n增:add(Object obj)\n\n删:remove(int index) remove(Object obj)\n\n改:set(int index, Object ele)\n\n查:get(int index)\n\n插:add(int index, Object ele)\n\n遍历:1\n\nIterator迭代器方式\n\nIterator iterator = list.iterator();\n\nwhile(iterator.hasNext()){\n\n​\t\tSystem.out.println(\"****\");\n\n}\n\n遍历:2\n\n增强for循环\n\nfor(Object obj : list){\n\n​\t\tSystem.out.println(obj);\n\n}\n\nSystem.out.println(\"***\");\n\n\n\n遍历:3\n\n普通for循环\n\nfor(int i = 0; i < list.size(); i++){\n\n​\t\tSystem.out.println(list.get(i));\n\n}\n\n\n\n没听\n```\n\n![image-20210905000354527](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210905000354527.png)\n","source":"_posts/java菜鸟记.md","raw":"---\ntitle: java菜鸟记\ndate: 2021-01-03 12:00:01\ntags:\n  - java\n  - 菜鸟\n  - 大一\ncategories:\n  - 笔记\n---\n\n## java\n\n三元运算符可以嵌套\n\n### 位运算符\n\n操作的是整形的数据\n\n<<:在一定范围内,每向左移一位,相当于 \\*2\n\n> 最高效计算2\\*8. --> 2 << 3. // 8 << 1;\n\n### 数组\n\n​ equal\n\nfill\n\nsort\n\ntoString\n\nbinarySearch\n\n### 构造器(constructor)\n\n如果没有显示的定义累的构造器的话 系统默认提供一个空参构造器/\n\n### 方法调用时的内存分配\n\n#### 内存何时分配\n\n方法只有被调用时，在JVM中会给该方法分配“运行所属“内存空间。\n\n#### JVM内存划分的三块主要空间\n\n- **方法区内存**（代码片段）\n- 堆内存\n- 栈内存(分配方法运行的所属内存空间)\n\n#### 数据结构——“栈”\n\n- 栈针永远指向栈顶元素\n\n- 异常 需要注意的问题 需 要按照类型的要求输入,很具相应的方法,吐过输入的数据类型月要皮球的数据类型不匹配时没汇报一导致程序\n\n- 栈顶元素处于活跃，其他元素静止\n\n- 术语\n\n  - 入栈/压栈/push\n  - 弹栈/出栈/pop\n\n- **先进后出 后进先出**\n\n  main进->m1进->m2进->m2出->m1出->main出\n\n#### 方法代码片段的存储\n\n1. 方法代码片段属于.class字节码文件的一部分，字节码文件在（classLoader加载器寻找HelloWorld.class）类加载的时候，将其放到了方法去中。所以JVM中的三块主要的内存空间中**方法区内存**最先有数据，存放了代码片段。\n2. 代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每次调用这个方法的时候需要给该方法分配**独立的活动场所**，在栈内存中分配。\n3. 方法调用，给方法分配内存，压栈；方法结束之后，释放分配内存，弹栈\n\n### 类与对象\n\n类描述对象的共同特征\n\n**类描述的是 状态和动作**（属性+方法）\n\n#### 类的定义\n\n类{\n\n状态：属性\n\n动作：方法；\n\n}\n\n```java\n//学生类\npublic class Student{\n\t//属性【描述对象的状态信息】\n\t//属性一般是通过变量的形式完成定义的（int String boolean）\n\t//在类体中，方法体之外定义的变量被称为“成员变量”\n\n\t//学号\n\tint no;\n\t//姓名\n\tString name;\n\t//年龄\n  int age;\n\n\t//方法\n  //方法买哦书的是对象的动作信息\n\n  //唱歌\n\n  //跳舞\n\n}\n```\n\n##### java两种数据类型\n\n1. 基本数据类型\n\n   short\n\n   long\n\n   int\n\n   boolean\n\n   String\n\n   char\n\n2. 引用数据类型\n\n   String.class SUN公司定义\n\n   System.class SUN公司定义\n\n   Student.class 我定义\n\n   MingShen.class 我定义\n\n   ....\n\n   **java中所有的类都为引用数据类型**\n\n#### 对象的创建和使用\n\n```java\npublic class OOtest01{\n  public static void main(String[] args){\n    //int 是基本数据类型\n    //i 是变量名\n    //10 是一个int类型的字面值\n    int i = 10;\n\n    //通过一个类可以实例化N个对象\n\t\t//实例化对象语法 new 类名（）；\n\t\t//new运算符作用是创建对象，在JVM中\n    //new运算符的作用是创建对象，在JVM堆内存中开辟新的内存空间\n    //方法区内存：再类加载的时候，clss字节码代码片段被加载到内存空间当中\n    //栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈\n    //堆内存：new studeng（）；\n\n    //Student 是引用数据类型\n    //s 是变量名\n    //new Student是一个学生对象\n    Student s = new Student();\n\n  }\n}\n```\n\n**当程序执行到new时的内存图如下**\n\n![image-20210527190012042](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527190012042.png)\n\nNon, age, sex, name, addr都是**实例变量**\n\nstudent这个new出来的对象的**内存地址**给了s，s时**局部变量**，s为**引用**\n\n什么是对象？new运算符在堆内存中开辟的内存空间称为对象\n\n什么是引用？引用是一个变量，只不过这个变量中保存了另一个java对象的内存地址\n\njava语言当中程序员只能通过“引用”去访问对内存当中对象内部的实例变量\n\n访问实例变量的内存数据\n\n读取数据：引用.变量名\n\n修改数据：引用.变量名 = 值\n\n```java\n\tint StuNo = s.no;\n\tint StuAge = s.Age；//读取\n  s.no = 10;\n  s.name = \"MingShen\";\n  s.age = 10;//会把堆内存的内存值改了\n  Student stu = new Student();//再次new对象 stu是引用\n```\n\n![image-20210527193017688](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527193017688.png)\n\n局部变量在栈内存中储存\n\n成员变量中的实例变量在堆内存的java对象内部储存\n\n实例变量是一个对象一份，100个对象有100份\n\n```java\nSystem.out.printIn(stu.age);//10\nSystem.out.printIn(student.no);//报错\n```\n\n报错因为no这个实例变量不能直接采用“类名”的方式访问\n\n因为no是实例变量，对象级别的变量，变量储存在Java对象内部，必须先有对象通过对象才能访问no这个实例变量，不能直接通过“类名”\n\n成员变量没有手动赋值，系统赋默认值\n\n| 数据类型                  |               |\n| ------------------------- | ------------- |\n| byte， short， int， long | 0             |\n| float，double             | 0.0           |\n| char                      | \\u000         |\n| 引用数据类型              | null （空值） |\n|                           |               |\n|                           |               |\n\n```java\npublic class Address{\n  String city;\n  String street;\n  String zipcode;\n}\n\n```\n\n```java\npublic class User{\n  //属性【以下都是成员变量之实例变量】\n  int no;//int基本数据类型，no是实例变量\n  String name;//String引用数据类型，name是引用满是实例变量\n  Address addr;//Address引用数据类型，addr是引用\n}\n```\n\n```java\npublic class OOTest02\n{\n  public static void main(String[] args){\n    //创建User对象\n    //u是局部变量\n    //u是一个引用\n    //u保存内存地址指向堆内存的User对象\n    User u = new User()；//（从右往前）\n    u.no = 110;\n    u.name = \"jack\";//字符串比较特殊不用new，jack是一个Java对象，属于String对象\n    u.addr = new Address();//等号右边先执行，Address对象三个none、none、none\n\n    //main方法只有一个引用u\n    //一切只能通过u来访问\n    System.out.println(u.name + \"居住在\" + u.addr.city);\n  }\n}\n```\n\n![image-20210527194926715](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527194926715.png)\n\n![image-20210527195317973](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195317973.png)\n\n**找出所有引用**\n\n![image-20210527195451792](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195451792.png)\n\n空引用访问“实例”相关数据一定会造成空指针异常 NullPointerException\n\n实例相关数据表示访问时必须有对象参与\n\n### 类怎么定义\n\n[修饰符列表]class 类名{\n\n属性；\n\n方法；\n\n}\n\n现实世界当中超市中的商品，发现这所有的商品都要有一些共同的特征，例如，每一个商品都有编号，每一个商品都有单价，所以定义以下的类，来代表所有商品。\n\n```java\npublic class Product{//为什么要写class？因为要做超市的管理系统，超市有商品，商品有共同的特征，想到了编号，单价，所以利用基本数据类型（int double），定义了两个变量。\n\t//编号【数字，整数】\n  int productNo;\n  //productNo是基本数据类型\n  //单价【数字，小数】\n  double price;\n  //price 是基本数据类型\n\n  Student s= null;\n}\nProduct pro = new Product{};//实例变量需要new出来才能引用，引用方式如下\npro.price = 0x1123123;//访问 可以（读一读）（改一改）\n```\n\n**product是实例变量，下面对他进行访问**\n\n```java\npublic class ProductTest{\n  public static void main(string[] args){\n    //创建对象，商品对象\n    //iphoneProMax局部变量\n    //iphoneProMax引用\n    //iphoneProMax变量中保存内存地址指向堆内存当中的商品对象\n    Product iphoneProMax = new Product();\n    //访问实例变量的语法： 引用.变量名\n    System.out.printIn(\"商品编号：\"+iphoneProMax.productNo);\n    iphoneProMax.price = 8000.0；\n    System.out.println(\"商品单价：\"+iphoneProMax.price);\n  }\n\n```\n\n```java\n/*\n\t要求定义一个汽车类\n\t\t*品牌：字符串\n\t\t*颜色：字符串\n\t\t*号牌：字符串\n\t\t*购买总价：浮点型数据\n*/\npublic class Car{\n  //属性【成员变量之：实例变量】\n  //总价\n  基本数据类型\n  double price;\n  //品牌\n  引用数据类型\n  String brand;\n  //颜色\n  //引用数据类型\n  String color;\n  //号牌\n  //引用数据类型\n  String No;\n}\n```\n\n```java\n/*\n\t房屋类(不太行)\n*/\npublic class house{\n  double proportion;\n  String owner;//想知道户主的身份信息，但是不能在下一行定义实例变量ID，会误解为房子的ID\n\n}\n\n```\n\n```java\n/*\n\t房屋类（行）\n*/\npublic class house{\n  double proportion;\n  Person owner ;//new是个地址（其中就是联系电话、就是地址、就是各种信息）\n}\npublic class Person{\n  //名字\n  String name;\n  //身份证号\n  String id;\n  //性别\n  boolean sex;\n  //年龄\n  int age;\n  //妻子\n  Wife wife；\n}\n```\n\n### 封装\n\n1. 对外提供简单的操作入口，照相机原理很复杂，但是操作很简单\n2. 提高安全性\n3. 以后程序可以重服使用\n4. 封装后才形成真正的对象，“独立体”\n\n```java\npublic class User\n  public static void main()\n```\n\n#### 封装的步骤\n\n1. 属性私有化，是用private进行修饰，private表示私有，修饰后的所有数据只能在本类中访问。\n\n2. 对外提供简单的入口\n\n   对外提供两个方法（get，set）\n\n#### 背会\n\nsette and getter方法没有static关键字\n\n有static关键字修饰的方法怎么调用：类 名.方法名（实参）；\n\n没有static关键字修饰的方法：引用.方法名（实参）\n\n```java\npublic class User{\n  private int age;\n  public void setAge(int a){\n  if(a < 0 || a >150 ){\n    System.out.println(\"对不起，您给的年龄不合法\")\n    return;\n  }\n  age = a;\n\t}\n \tpublic int getAge(){\n  return age;\n}\n}\n\n```\n\n封装之后\n\n```java\npublic class UserTest{\n  public static void main(String[] srgs){\n    User user = new User();\n    user.setAge(10);\n    System.out.println(user.getAge());\n  }\n}\n```\n\n#### 构造方法\n\n1. 构造方法又称构造函数，返回值类型不需要指定，加上void int 就变成普通方法了\n\n2. 构造方法的作用：通过方法的调用创建对象。\n\n3. 构造方法的方法名必须和类名保持一致\n\n4. 每个构造方法实际上执行结束之后都有返回值，但是这个return不需要写，返回值就是类本身\n\n5. [修饰符列表]构造方法方法名（形参数）\n\n   {方法体}；\n\n   }\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args){\n        //创建User对象\n        //调用User类的构造方法来完成对象的创建\n        //以下程序创建了4个对象，只要构造函数调用就会查u你感觉爱你对象，并且在“堆内存”开辟内存空间\n\n        User u2 = new User(10);\n        User u3 = new User(\"gujm\");\n        ConstructorTest01.dosome();\n        dosome();\n        ConstructorTest01 t = new ConstructorTest01();\n        t.doOther();\n    }\n    //调用带有static的方法：类名\n    public static void dosome(){\n        System.out.println(\"do some!\");\n    }\n    //调用没有static的方法：引用\n    //doOther方法在ConstructorTest01类中，所以需要创建ConstructorTest01对象\n    //创建ConstructorTest01对象之后，调用无参数构造方法\n    public void  doOther(){\n        System.out.println(\"Do other!\");\n    }\n}\n```\n\n```java\npublic class User{\n\n    public User(int i){\n        System.out.println(\"带有int类型构造器\");\n    }\n    public User(String name){\n        System.out.println(\"带有String类型构造器\");\n    }\n}\n\n```\n\n构造方法作用：创造对象，给实例对象赋值\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args) {\n        Account act1 = new Account();\n        act1.setActno(\"111\");\n        System.out.println(act1.getActno());\n        Account act2 = new Account(\"10\");\n        System.out.println(act2.getActno());\n        System.out.println(act1.getBalance());\n    }\n}\n```\n\n```java\npublic class Account {\n    private String actno;//实例变量，创建对象之后才会有实例变量，实例方法在构造方法过程中完成赋值\n    private double balance;\n    public String getActno() {\n        return actno;\n    }\n\n    public void setActno(String actno) {\n        this.actno = actno;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n    public Account(){\n        System.out.println(\"空参数方法\");\n    };\n    public Account(String s){\n        actno = s;\n    }\n\n}\n```\n\n### 参数传递\n\n传的永远是变量保存的值\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args) {\n        User u = new User(20);\n      //User User = 0x1234\n      //传递u给add方法的时候，实际上传递的是u变量中保存的值，只不过这个值是一个java对象的内存地址\n        add(u);\n        System.out.println(u.age);\n    }\n    public static void add(User u){\n        u.age++;\n        System.out.println(\"add-->\" + u.age);\n    }\n    static class User{\n        int age;\n        public User(int i){\n            age = i;\n        }\n    }\n}\n```\n\n![image-20210620092032503](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210620092032503.png)\n\n第二个例子\n\n```java\nUser u =0x1234;\nUser u1= u;//u传递给了u1，实际上是吧0x1234这个值赋值给了u1，u和u1实际上是两个不同的局部变量\n//但是他们的两个变量指向堆内存中同一个java对象\n```\n\n### this\n\nthis 是一个 关键字，翻译为：这个，用在方法中\n\nthis是一个引用，this是一个变量，this变量中保存内存地址指向了自身，this储存子啊JVM堆内存java对象内部\n\n创建100个java对象，每个对象都有this，也就是说有100个不同的this\n\n**this代表当前正在做（执行实例方法）这个动作的对象**\n\n不能用在static方法中\n\n在static方法中不能“直接”访问实例变量 实例方法\n\n因为实例都需要对象存在\n\n而static中没有this，也就是说，当前对象是不存在的\n\n自然无法访问当前对象的实例方法\n\n**用来区分实例变量和局部变量时 this不能省**\n\n```java\n\n```\n\nthis（）这种语法只能放在构造方法第一行\n\n### static\n\n应该采用类名的方式访问，即使new了对象访问static方法，其本质也用的是类名，与引用指向的对象无关，哪怕（t = null）也不会出现空指针异常\n\n```java\npublic class Chinese{\n private String id;\n private String name;\n //国籍每个对象由于都是Chinese类的实例化，所以每个中国人国籍都是Chinese\n //实例对象在堆内存\n //String country;//所以没必要定义为实例变量,没必要让每一个对象都占内存，改为下一行\n static String country = \"中国\";//类级别特征，变量前加static，静态变量不需要创造对象，内存就开辟了，在方法区内存\n}\n```\n\n![image-20210624165417791](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210624165417791.png)\n\n#### 什么时候成员变量申明为静态变量？\n\n所有的对象都有这个属性，并且所有对象的这个属性值一样\n\n#### 什么时候成员变量申明为静态变量？\n\n所有对象都有这个属性，不同对象值不同或属性值随对象值改变\n\n#### static使用方式\n\n静态变量在类加载的时候u初始化，内存在方法区开辟，访问时不需创造对象，直接**类名.变量名**\n\n#### 使用static定义“静态代码块”\n\n1.语法格式：\n\n​ static {\n\njava语句;\n\n​ }\n\n2.静态代码在类加载时执行，并且只执行一次\n\n3.静态代码块在一个类中可以编写多个，从上往下\n\n4.静态代码块的作用？什么时候用\n\n​ 静态代码时java为程序员准备的一个特殊时刻，在类加载时刻，若需要此刻还在一段特殊程序，可以直接放到静态代码中\n\n#### 静态方法\n\n描述一个动作，所有对象执行这个动作最终产生的影响一样，不再属于某一个对象动作\n\n大多数“工具类”的方法都是静态方法，方便使用\n\n### 继承\n\n继承的基本作用：代码复用，但是继承最重要的作用时：有了继承才有了以后方法的覆盖和多态机制\n\n[修饰符列表]class 类名 extends 父类名{\n\n​ 类体 = 属性 + 方法\n\n}\n\njava语言的继承制支持单继承，一个类不能同时继承很多类，只能继承一个类。\n\nB类继承A类，A称为父类，基类，超类，superclass\n\n​ B称为子类，派生类，subclass\n\n私有不支持继承，构造方法不支持继承\n\n### 方法覆盖\n\n又称方法重写override/Overwrite\n\n父类中的方法满足不了子类中的业务需求，有必要重写方法\n\n就是重新写一遍**完全一样复制**方法，方法区中代码自己改，方法名不变，返回类型不变，参数列表不变，抛出异常不能更低，不能更少，访问权限不能更低可以更高\n\nanimal.move(); cat extend animal;\n\n私有方法不能继承不能覆盖\n\n构造方法不能继承不能覆盖\n\n静态方法不存在覆盖（多态后）\n\n### 多态\n\nanimal/ bird /cat\n\ncat和bird没有任何继承关系\n\n面向对象三大特征：封装 继承 多态\n\n多态中涉及到的几个概念\n\n- 向上转型（upcasting）\n\n  子类型 --> 父类型\n\n  自动类型转换\n\n- 向下转型（downcasting）\n\n  父类型 --> 子类型\n\n  强制类型转换\n\n![image-20210625084016091](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210625084016091.png)\n\n```java\npublic class Animal {\n    public void move(){\n        System.out.println(\"动物在行走\");\n    }\n}\n```\n\n```java\n public class Cat extends Animal{\n    public void move(){\n        System.out.println(\"猫在走猫步\");\n    }\n    public void catchMouse(){\n        System.out.println(\"猫抓老鼠\");\n    }\n}\n```\n\n```java\npublic class Bird extends Animal{\n    public void move(){\n        System.out.println(\"鸟在飞翔\");\n    }\n}\n```\n\n```java\npublic class ConstructorTest01{\n    public static void main(String[] args) {\n        Animal a = new Animal();\n        a.move();\n\n        Cat b = new Cat();\n        b.move();\n        b.catchMouse();\n\n        Bird c = new Bird();\n        c.move();\n\n        //使用多态\n\n        /*\n        Cat is an Animal\n        父类型引用指向子类型对象\n        new Cat()创建的对象类型为Cat，a2这个引用的数据类型是Animal，可见他们进行了类型转换\n        子类型转换成了父类型，称为向上转型，自动类型转换\n        */\n        Animal a2 = new Cat();\n   /*    java两个阶段 编译阶段· 运行阶段\n\n编译无法通过程序无法运行\n\n编译阶段编译器检查a2这个引用的数据类型为Animal.class,字节码中有move方法，所以编译通过了，这个过程我们称为静态绑定，编译阶段绑定\n\n在程序运行阶段，JVM堆内存当中真实创建的对象是Cat对象啊，那么下面程序在运行阶段一定调用Cat对象的move()方法，此时发生程序动态绑定\n        */\n        a2.move();\n      /*\n      \ta2.catchMouse();\n      \t编译阶段就出错了\n      */\n      Cat c2 = (Cat)a2;\n      c2.catchMouse();\n\n      //以下程序编译没问题\n      //但是运行会出现异常，因为JVM堆内存中真正存在的对象是Bird类型，Bird对象无法转换为Cat对象，因为两种类型之间不存在任何继承关系，此时出现了著名的异常\n      //java.lang.ClassCastException\n      //类型转换异常，向下转型时会发生\n      Animal a3 = new Bird();\n      cat c3 = (Cat)a3;\n      /*\n      以上异常只有在强制类型转换时才会发生，这么说向下转型存在隐患\n      向上转型只要编译通过一定能运行，\n      向下转型，运行可能错误java.lang.ClassCastException\n      */\n    }\n}\n```\n\n#### 什么时候需要向下转型\n\n当调用的属性和方法是在子类型中特有的，父类型中不存在\n\n#### 避免向下转型ClassCastException异常\n\n（引用instanceof 数据类型名）\n\n（a instanceof Animal）\n\ntrue表示：\n\n​ a引用指向的对象是Animal\n\nfalse。。。\n\n```java\nif(a3 instanceof Bird){\n  Bird b2 = (Bird)a3;\n  b2.fly;\n}\nelse if(a3 instanceof Cat){\n  Cat c3 = (Cat)a3;\n  C2.catchMouse();\n}\n```\n\n耦合度低 扩展力强\n\n### final\n\n1最终的、不可变得\n\n2final修饰的类无法**被继承**\n\n3final修饰的方法不能被**覆盖**\n\n4变量赋值后不能**再赋值**\n\n5实例变量加final需要手动赋值 final int age = 0；\n\n6final 修饰的对象无法改变指向别的对象\n\n#### 常量定义语法格式\n\n```java\npublic static final 类型 常量名 = 值；\n//常量名必须大写 单词之间下划线连接\npublic static final String GUO_JI = \"中国\";\npublic static final double PI = 3.14159;\n```\n\n### package && import\n\n在java源程序第一行编写package语句\n\npackage 包名;\n\n包名命名规范：\n\n公司域名倒序 +项目名oa +模块名 +功能名;\n\ncom.bjpowernode.oa.user.service;\n\n包名必须全部小写，也是标识符\n\n一个包对应一个目录\n\nimport com.bjpowernode.oa.user.service；\n\nimport语句用来倒入其他类，同一个包下的类不需要导入\n\nimport 类名;\n\nimport 包名.\\*;\n\nJava.lang.\\* 不需要手动引入，系统自动\n\nimport java.util.\\*\n\n4\n\n### 访问控制权限\n\n> ​ public 表示公开的\n>\n> ​ protected 同包下可以访问，子类可以访问\n>\n> ​ 缺省 同包\n>\n> ​ private 表示私有，只能在本类访问\n\n缺省和protected出了包之后就\n\n### super\n\nsuper关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。x\n\n#### 构造器\n\n子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 **super** 关键字调用父类的构造器并配以适当的参数列表。\n\n如果父类构造器没有参数，则在子类的构造器中不需要使用 **super** 关键字调用父类构造器，系统会自动调用父类的无参构造器\n\n```java\nclass SuperClass {\n  private int n;\n  SuperClass(){\n    System.out.println(\"SuperClass()\");\n  }\n  SuperClass(int n) {\n    System.out.println(\"SuperClass(int n)\");\n    this.n = n;\n  }\n}\n// SubClass 类继承\nclass SubClass extends SuperClass{\n  private int n;\n\n  SubClass(){ // 自动调用父类的无参数构造器\n    System.out.println(\"SubClass\");\n  }\n\n  public SubClass(int n){\n    super(300);  // 调用父类中带有参数的构造器\n    System.out.println(\"SubClass(int n):\"+n);\n    this.n = n;\n  }\n}\n// SubClass2 类继承\nclass SubClass2 extends SuperClass{\n  private int n;\n\n  SubClass2(){\n    super(300);  // 调用父类中带有参数的构造器\n    System.out.println(\"SubClass2\");\n  }\n\n  public SubClass2(int n){ // 自动调用父类的无参数构造器\n    System.out.println(\"SubClass2(int n):\"+n);\n    this.n = n;\n  }\n}\npublic class TestSuperSub{\n  public static void main (String args[]){\n    System.out.println(\"------SubClass 类继承------\");\n    SubClass sc1 = new SubClass();\n    SubClass sc2 = new SubClass(100);\n    System.out.println(\"------SubClass2 类继承------\");\n    SubClass2 sc3 = new SubClass2();\n    SubClass2 sc4 = new SubClass2(200);\n  }\n}\n输出结果为：\n\n------SubClass 类继承------\nSuperClass()\nSubClass\nSuperClass(int n)\nSubClass(int n):100\n------SubClass2 类继承------\nSuperClass(int n)\nSubClass2\nSuperClass()\nSubClass2(int n):200\n```\n\n```java\ndo {\n            str = br.readLine();\n            System.out.println(str);\n        } while (!str.equals(\"end\"));\n    }\n```\n\n除了static内部类,内部类中不允许static静态变量\n\n### 值传递\n\n![image-20210727142922916](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727142922916.png)\n\n![image-20210727144149656](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727144149656.png)\n\n```java\n/**\n * @author Gujm\n * @date 2021/7/27 8:14 下午\n */\npublic class BankTest{\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        bank.addCustomer(\"G\",\"jm\");\n        bank.getCustomer(0).setAccount(new Account(2000));\n        bank.getCustomer(0).getAccount().withdraw(500);\n        double balance = bank.getCustomer(0).getAccount().getBalance();\n        System.out.println(bank.getCustomer(0).getFirstName()+\"账户余额为\"+balance);\n    }\n}\n class Bank {\n    private Customer[] customers;\n    private int numberOfCustomers;//客户个数\n    public Bank(){\n        customers = new Customer[10];\n    }\n    //添加客户\n    public void addCustomer(String f, String l){\n        Customer cust = new Customer(f,l);\n        customers[numberOfCustomers++] = cust;\n    }\n    //获取客户个数\n    public int getNumberOfCustomers(){\n        return numberOfCustomers;\n    }\n    //获取制定位置的客户\n    public Customer getCustomer(int index){\n        if(index >= 0 && index < numberOfCustomers){\n        return customers[index];\n        }else{\n            return null;\n        }\n    }\n}\n class Account{\n    private double balance;\n    public Account(double init_balance){\n        this.balance = init_balance;\n    }\n    public double getBalance() {\n        return balance;\n    }\n    public void deposit(double amt){\n        if(amt > 0){\n            balance += amt;\n            System.out.println(\"存钱成功\");\n        }\n    }\n    public void withdraw(double amt){\n        if (balance >= amt){\n            balance -= amt;\n            System.out.println(\"取钱成功\");\n        }\n        else {\n            System.out.println(\"余额不足\");\n        }\n    }\n}\n class Customer{\n    private String firstName;\n    private String lastName;\n    private Account account;\n    public Customer(String f, String l){\n        this.firstName = f;\n        this.lastName = l;\n    }\n     public String getFirstName() {\n         return firstName;\n     }\n\n     public String getLastName() {\n         return lastName;\n     }\n     public void setAccount(Account account) {\n         this.account = account;\n     }\n     public Account getAccount() {\n         return account;\n     }\n}\n```\n\n### equals()\n\nString、Date 、 File、Io包装都重写了equals()方法, 只比较实体内容是否相等.\n\n### 基本数据类型包装类\n\n```java\nString str1 = \"123\";\n\nint num2 = Integer.parseInt(str1);\n\nSystem.out.println(num2+1);\n\nString str2 = \"true1\";\n\nBoolean b1 = Boolean.parseBoolean(str2);\n\nsout(b1);\n```\n\n### 多线程\n\n```java\npackage java3;\n\n/**\n * @author Gujm\n * @date 2021/8/21 2:15 下午\n */\nclass Clerk {\n    private int productCount = 0;\n\n    //生产\n    public synchronized void produceProduct() {\n        if (productCount < 20) {\n            productCount++;\n            System.out.println(Thread.currentThread().getName() + \"开始生产第\" + productCount);\n        }else{\n            //等待\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    //消费\n    public synchronized void consumeProduct() {\n        if (productCount > 0){\n            System.out.println(Thread.currentThread().getName() + \"开始消费第\" + productCount);\n            productCount--;\n        }else {\n            //等待\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Producer extends Thread {\n    private Clerk clerk;\n\n    public Producer(Clerk clerk) {\n        this.clerk = clerk;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(getName() + \"开始生产。。\");\n        while (true) {\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            clerk.produceProduct();\n        }\n    }\n}\n\nclass Customer extends Thread {\n    private Clerk clerk;\n\n    public Customer(Clerk clerk) {\n        this.clerk = clerk;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(getName() + \"开始消费。。\");\n        while (true) {\n            try {\n                Thread.sleep(20);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            clerk.consumeProduct();\n        }\n    }\n}\n\npublic class ProductTest {\n    public static void main(String[] args) {\n        Clerk clerk = new Clerk();\n        Producer p1 = new Producer(clerk);\n        p1.setName(\"生产者1\");\n        Customer c1 = new Customer(clerk);\n        c1.setName(\"消费者1\");\n        Customer c2 = new Customer(clerk);\n        c2.setName(\"消费者2\");\n        p1.start();\n        c1.start();\n        c2.start();\n    }\n}\n```\n\n### 常用类\n\n#### String\n\n### ArrayList常用方法\n\n```java\n增:add(Object obj)\n\n删:remove(int index) remove(Object obj)\n\n改:set(int index, Object ele)\n\n查:get(int index)\n\n插:add(int index, Object ele)\n\n遍历:1\n\nIterator迭代器方式\n\nIterator iterator = list.iterator();\n\nwhile(iterator.hasNext()){\n\n​\t\tSystem.out.println(\"****\");\n\n}\n\n遍历:2\n\n增强for循环\n\nfor(Object obj : list){\n\n​\t\tSystem.out.println(obj);\n\n}\n\nSystem.out.println(\"***\");\n\n\n\n遍历:3\n\n普通for循环\n\nfor(int i = 0; i < list.size(); i++){\n\n​\t\tSystem.out.println(list.get(i));\n\n}\n\n\n\n没听\n```\n\n![image-20210905000354527](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210905000354527.png)\n","slug":"java菜鸟记","published":1,"updated":"2024-01-06T05:01:17.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3v000nq05za7n37drb","content":"<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><p>三元运算符可以嵌套</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>操作的是整形的数据</p>\n<p>&lt;&lt;:在一定范围内,每向左移一位,相当于 *2</p>\n<blockquote>\n<p>最高效计算2*8. –&gt; 2 &lt;&lt; 3. // 8 &lt;&lt; 1;</p>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>​ equal</p>\n<p>fill</p>\n<p>sort</p>\n<p>toString</p>\n<p>binarySearch</p>\n<h3 id=\"构造器-constructor\"><a href=\"#构造器-constructor\" class=\"headerlink\" title=\"构造器(constructor)\"></a>构造器(constructor)</h3><p>如果没有显示的定义累的构造器的话 系统默认提供一个空参构造器/</p>\n<h3 id=\"方法调用时的内存分配\"><a href=\"#方法调用时的内存分配\" class=\"headerlink\" title=\"方法调用时的内存分配\"></a>方法调用时的内存分配</h3><h4 id=\"内存何时分配\"><a href=\"#内存何时分配\" class=\"headerlink\" title=\"内存何时分配\"></a>内存何时分配</h4><p>方法只有被调用时，在JVM中会给该方法分配“运行所属“内存空间。</p>\n<h4 id=\"JVM内存划分的三块主要空间\"><a href=\"#JVM内存划分的三块主要空间\" class=\"headerlink\" title=\"JVM内存划分的三块主要空间\"></a>JVM内存划分的三块主要空间</h4><ul>\n<li><strong>方法区内存</strong>（代码片段）</li>\n<li>堆内存</li>\n<li>栈内存(分配方法运行的所属内存空间)</li>\n</ul>\n<h4 id=\"数据结构——“栈”\"><a href=\"#数据结构——“栈”\" class=\"headerlink\" title=\"数据结构——“栈”\"></a>数据结构——“栈”</h4><ul>\n<li><p>栈针永远指向栈顶元素</p>\n</li>\n<li><p>异常 需要注意的问题 需 要按照类型的要求输入,很具相应的方法,吐过输入的数据类型月要皮球的数据类型不匹配时没汇报一导致程序</p>\n</li>\n<li><p>栈顶元素处于活跃，其他元素静止</p>\n</li>\n<li><p>术语</p>\n<ul>\n<li>入栈/压栈/push</li>\n<li>弹栈/出栈/pop</li>\n</ul>\n</li>\n<li><p><strong>先进后出 后进先出</strong></p>\n<p>main进-&gt;m1进-&gt;m2进-&gt;m2出-&gt;m1出-&gt;main出</p>\n</li>\n</ul>\n<h4 id=\"方法代码片段的存储\"><a href=\"#方法代码片段的存储\" class=\"headerlink\" title=\"方法代码片段的存储\"></a>方法代码片段的存储</h4><ol>\n<li>方法代码片段属于.class字节码文件的一部分，字节码文件在（classLoader加载器寻找HelloWorld.class）类加载的时候，将其放到了方法去中。所以JVM中的三块主要的内存空间中<strong>方法区内存</strong>最先有数据，存放了代码片段。</li>\n<li>代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每次调用这个方法的时候需要给该方法分配<strong>独立的活动场所</strong>，在栈内存中分配。</li>\n<li>方法调用，给方法分配内存，压栈；方法结束之后，释放分配内存，弹栈</li>\n</ol>\n<h3 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h3><p>类描述对象的共同特征</p>\n<p><strong>类描述的是 状态和动作</strong>（属性+方法）</p>\n<h4 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h4><p>类{</p>\n<p>状态：属性</p>\n<p>动作：方法；</p>\n<p>}</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//属性【描述对象的状态信息】</span></span><br><span class=\"line\">\t<span class=\"comment\">//属性一般是通过变量的形式完成定义的（int String boolean）</span></span><br><span class=\"line\">\t<span class=\"comment\">//在类体中，方法体之外定义的变量被称为“成员变量”</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//学号</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> no;</span><br><span class=\"line\">\t<span class=\"comment\">//姓名</span></span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t<span class=\"comment\">//年龄</span></span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方法</span></span><br><span class=\"line\">  <span class=\"comment\">//方法买哦书的是对象的动作信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//唱歌</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//跳舞</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"java两种数据类型\"><a href=\"#java两种数据类型\" class=\"headerlink\" title=\"java两种数据类型\"></a>java两种数据类型</h5><ol>\n<li><p>基本数据类型</p>\n<p>short</p>\n<p>long</p>\n<p>int</p>\n<p>boolean</p>\n<p>String</p>\n<p>char</p>\n</li>\n<li><p>引用数据类型</p>\n<p>String.class SUN公司定义</p>\n<p>System.class SUN公司定义</p>\n<p>Student.class 我定义</p>\n<p>MingShen.class 我定义</p>\n<p>….</p>\n<p><strong>java中所有的类都为引用数据类型</strong></p>\n</li>\n</ol>\n<h4 id=\"对象的创建和使用\"><a href=\"#对象的创建和使用\" class=\"headerlink\" title=\"对象的创建和使用\"></a>对象的创建和使用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OOtest01</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//int 是基本数据类型</span></span><br><span class=\"line\">    <span class=\"comment\">//i 是变量名</span></span><br><span class=\"line\">    <span class=\"comment\">//10 是一个int类型的字面值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过一个类可以实例化N个对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//实例化对象语法 new 类名（）；</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//new运算符作用是创建对象，在JVM中</span></span><br><span class=\"line\">    <span class=\"comment\">//new运算符的作用是创建对象，在JVM堆内存中开辟新的内存空间</span></span><br><span class=\"line\">    <span class=\"comment\">//方法区内存：再类加载的时候，clss字节码代码片段被加载到内存空间当中</span></span><br><span class=\"line\">    <span class=\"comment\">//栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈</span></span><br><span class=\"line\">    <span class=\"comment\">//堆内存：new studeng（）；</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Student 是引用数据类型</span></span><br><span class=\"line\">    <span class=\"comment\">//s 是变量名</span></span><br><span class=\"line\">    <span class=\"comment\">//new Student是一个学生对象</span></span><br><span class=\"line\">    <span class=\"type\">Student</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当程序执行到new时的内存图如下</strong></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527190012042.png\" alt=\"image-20210527190012042\"></p>\n<p>Non, age, sex, name, addr都是<strong>实例变量</strong></p>\n<p>student这个new出来的对象的<strong>内存地址</strong>给了s，s时<strong>局部变量</strong>，s为<strong>引用</strong></p>\n<p>什么是对象？new运算符在堆内存中开辟的内存空间称为对象</p>\n<p>什么是引用？引用是一个变量，只不过这个变量中保存了另一个java对象的内存地址</p>\n<p>java语言当中程序员只能通过“引用”去访问对内存当中对象内部的实例变量</p>\n<p>访问实例变量的内存数据</p>\n<p>读取数据：引用.变量名</p>\n<p>修改数据：引用.变量名 = 值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">StuNo</span> <span class=\"operator\">=</span> s.no;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">StuAge</span> <span class=\"operator\">=</span> s.Age；<span class=\"comment\">//读取</span></span><br><span class=\"line\"> s.no = <span class=\"number\">10</span>;</span><br><span class=\"line\"> s.name = <span class=\"string\">&quot;MingShen&quot;</span>;</span><br><span class=\"line\"> s.age = <span class=\"number\">10</span>;<span class=\"comment\">//会把堆内存的内存值改了</span></span><br><span class=\"line\"> <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();<span class=\"comment\">//再次new对象 stu是引用</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527193017688.png\" alt=\"image-20210527193017688\"></p>\n<p>局部变量在栈内存中储存</p>\n<p>成员变量中的实例变量在堆内存的java对象内部储存</p>\n<p>实例变量是一个对象一份，100个对象有100份</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.printIn(stu.age);<span class=\"comment\">//10</span></span><br><span class=\"line\">System.out.printIn(student.no);<span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<p>报错因为no这个实例变量不能直接采用“类名”的方式访问</p>\n<p>因为no是实例变量，对象级别的变量，变量储存在Java对象内部，必须先有对象通过对象才能访问no这个实例变量，不能直接通过“类名”</p>\n<p>成员变量没有手动赋值，系统赋默认值</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte， short， int， long</td>\n<td>0</td>\n</tr>\n<tr>\n<td>float，double</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>\\u000</td>\n</tr>\n<tr>\n<td>引用数据类型</td>\n<td>null （空值）</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Address</span>&#123;</span><br><span class=\"line\">  String city;</span><br><span class=\"line\">  String street;</span><br><span class=\"line\">  String zipcode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//属性【以下都是成员变量之实例变量】</span></span><br><span class=\"line\">  <span class=\"type\">int</span> no;<span class=\"comment\">//int基本数据类型，no是实例变量</span></span><br><span class=\"line\">  String name;<span class=\"comment\">//String引用数据类型，name是引用满是实例变量</span></span><br><span class=\"line\">  Address addr;<span class=\"comment\">//Address引用数据类型，addr是引用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OOTest02</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建User对象</span></span><br><span class=\"line\">    <span class=\"comment\">//u是局部变量</span></span><br><span class=\"line\">    <span class=\"comment\">//u是一个引用</span></span><br><span class=\"line\">    <span class=\"comment\">//u保存内存地址指向堆内存的User对象</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>()；<span class=\"comment\">//（从右往前）</span></span><br><span class=\"line\">    u.no = <span class=\"number\">110</span>;</span><br><span class=\"line\">    u.name = <span class=\"string\">&quot;jack&quot;</span>;<span class=\"comment\">//字符串比较特殊不用new，jack是一个Java对象，属于String对象</span></span><br><span class=\"line\">    u.addr = <span class=\"keyword\">new</span> <span class=\"title class_\">Address</span>();<span class=\"comment\">//等号右边先执行，Address对象三个none、none、none</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//main方法只有一个引用u</span></span><br><span class=\"line\">    <span class=\"comment\">//一切只能通过u来访问</span></span><br><span class=\"line\">    System.out.println(u.name + <span class=\"string\">&quot;居住在&quot;</span> + u.addr.city);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527194926715.png\" alt=\"image-20210527194926715\"></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195317973.png\" alt=\"image-20210527195317973\"></p>\n<p><strong>找出所有引用</strong></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195451792.png\" alt=\"image-20210527195451792\"></p>\n<p>空引用访问“实例”相关数据一定会造成空指针异常 NullPointerException</p>\n<p>实例相关数据表示访问时必须有对象参与</p>\n<h3 id=\"类怎么定义\"><a href=\"#类怎么定义\" class=\"headerlink\" title=\"类怎么定义\"></a>类怎么定义</h3><p>[修饰符列表]class 类名{</p>\n<p>属性；</p>\n<p>方法；</p>\n<p>}</p>\n<p>现实世界当中超市中的商品，发现这所有的商品都要有一些共同的特征，例如，每一个商品都有编号，每一个商品都有单价，所以定义以下的类，来代表所有商品。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Product</span>&#123;<span class=\"comment\">//为什么要写class？因为要做超市的管理系统，超市有商品，商品有共同的特征，想到了编号，单价，所以利用基本数据类型（int double），定义了两个变量。</span></span><br><span class=\"line\">\t<span class=\"comment\">//编号【数字，整数】</span></span><br><span class=\"line\">  <span class=\"type\">int</span> productNo;</span><br><span class=\"line\">  <span class=\"comment\">//productNo是基本数据类型</span></span><br><span class=\"line\">  <span class=\"comment\">//单价【数字，小数】</span></span><br><span class=\"line\">  <span class=\"type\">double</span> price;</span><br><span class=\"line\">  <span class=\"comment\">//price 是基本数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Student s= <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Product</span> <span class=\"variable\">pro</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>&#123;&#125;;<span class=\"comment\">//实例变量需要new出来才能引用，引用方式如下</span></span><br><span class=\"line\">pro.price = <span class=\"number\">0x1123123</span>;<span class=\"comment\">//访问 可以（读一读）（改一改）</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>product是实例变量，下面对他进行访问</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProductTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(string[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建对象，商品对象</span></span><br><span class=\"line\">    <span class=\"comment\">//iphoneProMax局部变量</span></span><br><span class=\"line\">    <span class=\"comment\">//iphoneProMax引用</span></span><br><span class=\"line\">    <span class=\"comment\">//iphoneProMax变量中保存内存地址指向堆内存当中的商品对象</span></span><br><span class=\"line\">    <span class=\"type\">Product</span> <span class=\"variable\">iphoneProMax</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\">    <span class=\"comment\">//访问实例变量的语法： 引用.变量名</span></span><br><span class=\"line\">    System.out.printIn(<span class=\"string\">&quot;商品编号：&quot;</span>+iphoneProMax.productNo);</span><br><span class=\"line\">    iphoneProMax.price = <span class=\"number\">8000.0</span>；</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;商品单价：&quot;</span>+iphoneProMax.price);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t要求定义一个汽车类</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*品牌：字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*颜色：字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*号牌：字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*购买总价：浮点型数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//属性【成员变量之：实例变量】</span></span><br><span class=\"line\">  <span class=\"comment\">//总价</span></span><br><span class=\"line\">  基本数据类型</span><br><span class=\"line\">  <span class=\"type\">double</span> price;</span><br><span class=\"line\">  <span class=\"comment\">//品牌</span></span><br><span class=\"line\">  引用数据类型</span><br><span class=\"line\">  String brand;</span><br><span class=\"line\">  <span class=\"comment\">//颜色</span></span><br><span class=\"line\">  <span class=\"comment\">//引用数据类型</span></span><br><span class=\"line\">  String color;</span><br><span class=\"line\">  <span class=\"comment\">//号牌</span></span><br><span class=\"line\">  <span class=\"comment\">//引用数据类型</span></span><br><span class=\"line\">  String No;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t房屋类(不太行)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">house</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> proportion;</span><br><span class=\"line\">  String owner;<span class=\"comment\">//想知道户主的身份信息，但是不能在下一行定义实例变量ID，会误解为房子的ID</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t房屋类（行）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">house</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> proportion;</span><br><span class=\"line\">  Person owner ;<span class=\"comment\">//new是个地址（其中就是联系电话、就是地址、就是各种信息）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//名字</span></span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"comment\">//身份证号</span></span><br><span class=\"line\">  String id;</span><br><span class=\"line\">  <span class=\"comment\">//性别</span></span><br><span class=\"line\">  <span class=\"type\">boolean</span> sex;</span><br><span class=\"line\">  <span class=\"comment\">//年龄</span></span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"comment\">//妻子</span></span><br><span class=\"line\">  Wife wife；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><ol>\n<li>对外提供简单的操作入口，照相机原理很复杂，但是操作很简单</li>\n<li>提高安全性</li>\n<li>以后程序可以重服使用</li>\n<li>封装后才形成真正的对象，“独立体”</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"封装的步骤\"><a href=\"#封装的步骤\" class=\"headerlink\" title=\"封装的步骤\"></a>封装的步骤</h4><ol>\n<li><p>属性私有化，是用private进行修饰，private表示私有，修饰后的所有数据只能在本类中访问。</p>\n</li>\n<li><p>对外提供简单的入口</p>\n<p>对外提供两个方法（get，set）</p>\n</li>\n</ol>\n<h4 id=\"背会\"><a href=\"#背会\" class=\"headerlink\" title=\"背会\"></a>背会</h4><p>sette and getter方法没有static关键字</p>\n<p>有static关键字修饰的方法怎么调用：类 名.方法名（实参）；</p>\n<p>没有static关键字修饰的方法：引用.方法名（实参）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a &lt; <span class=\"number\">0</span> || a &gt;<span class=\"number\">150</span> )&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;对不起，您给的年龄不合法&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  age = a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> \t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>封装之后</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] srgs)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    user.setAge(<span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(user.getAge());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><ol>\n<li><p>构造方法又称构造函数，返回值类型不需要指定，加上void int 就变成普通方法了</p>\n</li>\n<li><p>构造方法的作用：通过方法的调用创建对象。</p>\n</li>\n<li><p>构造方法的方法名必须和类名保持一致</p>\n</li>\n<li><p>每个构造方法实际上执行结束之后都有返回值，但是这个return不需要写，返回值就是类本身</p>\n</li>\n<li><p>[修饰符列表]构造方法方法名（形参数）</p>\n<p>{方法体}；</p>\n<p>}</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建User对象</span></span><br><span class=\"line\">        <span class=\"comment\">//调用User类的构造方法来完成对象的创建</span></span><br><span class=\"line\">        <span class=\"comment\">//以下程序创建了4个对象，只要构造函数调用就会查u你感觉爱你对象，并且在“堆内存”开辟内存空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;gujm&quot;</span>);</span><br><span class=\"line\">        ConstructorTest01.dosome();</span><br><span class=\"line\">        dosome();</span><br><span class=\"line\">        <span class=\"type\">ConstructorTest01</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConstructorTest01</span>();</span><br><span class=\"line\">        t.doOther();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用带有static的方法：类名</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dosome</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do some!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用没有static的方法：引用</span></span><br><span class=\"line\">    <span class=\"comment\">//doOther方法在ConstructorTest01类中，所以需要创建ConstructorTest01对象</span></span><br><span class=\"line\">    <span class=\"comment\">//创建ConstructorTest01对象之后，调用无参数构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title function_\">doOther</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Do other!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;带有int类型构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;带有String类型构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>构造方法作用：创造对象，给实例对象赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">act1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>();</span><br><span class=\"line\">        act1.setActno(<span class=\"string\">&quot;111&quot;</span>);</span><br><span class=\"line\">        System.out.println(act1.getActno());</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">act2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"string\">&quot;10&quot;</span>);</span><br><span class=\"line\">        System.out.println(act2.getActno());</span><br><span class=\"line\">        System.out.println(act1.getBalance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Account</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String actno;<span class=\"comment\">//实例变量，创建对象之后才会有实例变量，实例方法在构造方法过程中完成赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getActno</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> actno;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setActno</span><span class=\"params\">(String actno)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.actno = actno;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBalance</span><span class=\"params\">(<span class=\"type\">double</span> balance)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.balance = balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;空参数方法&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(String s)</span>&#123;</span><br><span class=\"line\">        actno = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><p>传的永远是变量保存的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">      <span class=\"comment\">//User User = 0x1234</span></span><br><span class=\"line\">      <span class=\"comment\">//传递u给add方法的时候，实际上传递的是u变量中保存的值，只不过这个值是一个java对象的内存地址</span></span><br><span class=\"line\">        add(u);</span><br><span class=\"line\">        System.out.println(u.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(User u)</span>&#123;</span><br><span class=\"line\">        u.age++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;add--&gt;&quot;</span> + u.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> age;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">            age = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210620092032503.png\" alt=\"image-20210620092032503\"></p>\n<p>第二个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span><span class=\"number\">0x1234</span>;</span><br><span class=\"line\">User u1= u;<span class=\"comment\">//u传递给了u1，实际上是吧0x1234这个值赋值给了u1，u和u1实际上是两个不同的局部变量</span></span><br><span class=\"line\"><span class=\"comment\">//但是他们的两个变量指向堆内存中同一个java对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>this 是一个 关键字，翻译为：这个，用在方法中</p>\n<p>this是一个引用，this是一个变量，this变量中保存内存地址指向了自身，this储存子啊JVM堆内存java对象内部</p>\n<p>创建100个java对象，每个对象都有this，也就是说有100个不同的this</p>\n<p><strong>this代表当前正在做（执行实例方法）这个动作的对象</strong></p>\n<p>不能用在static方法中</p>\n<p>在static方法中不能“直接”访问实例变量 实例方法</p>\n<p>因为实例都需要对象存在</p>\n<p>而static中没有this，也就是说，当前对象是不存在的</p>\n<p>自然无法访问当前对象的实例方法</p>\n<p><strong>用来区分实例变量和局部变量时 this不能省</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>this（）这种语法只能放在构造方法第一行</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>应该采用类名的方式访问，即使new了对象访问static方法，其本质也用的是类名，与引用指向的对象无关，哪怕（t = null）也不会出现空指针异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Chinese</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"> <span class=\"comment\">//国籍每个对象由于都是Chinese类的实例化，所以每个中国人国籍都是Chinese</span></span><br><span class=\"line\"> <span class=\"comment\">//实例对象在堆内存</span></span><br><span class=\"line\"> <span class=\"comment\">//String country;//所以没必要定义为实例变量,没必要让每一个对象都占内存，改为下一行</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;中国&quot;</span>;<span class=\"comment\">//类级别特征，变量前加static，静态变量不需要创造对象，内存就开辟了，在方法区内存</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210624165417791.png\" alt=\"image-20210624165417791\"></p>\n<h4 id=\"什么时候成员变量申明为静态变量？\"><a href=\"#什么时候成员变量申明为静态变量？\" class=\"headerlink\" title=\"什么时候成员变量申明为静态变量？\"></a>什么时候成员变量申明为静态变量？</h4><p>所有的对象都有这个属性，并且所有对象的这个属性值一样</p>\n<h4 id=\"什么时候成员变量申明为静态变量？-1\"><a href=\"#什么时候成员变量申明为静态变量？-1\" class=\"headerlink\" title=\"什么时候成员变量申明为静态变量？\"></a>什么时候成员变量申明为静态变量？</h4><p>所有对象都有这个属性，不同对象值不同或属性值随对象值改变</p>\n<h4 id=\"static使用方式\"><a href=\"#static使用方式\" class=\"headerlink\" title=\"static使用方式\"></a>static使用方式</h4><p>静态变量在类加载的时候u初始化，内存在方法区开辟，访问时不需创造对象，直接<strong>类名.变量名</strong></p>\n<h4 id=\"使用static定义“静态代码块”\"><a href=\"#使用static定义“静态代码块”\" class=\"headerlink\" title=\"使用static定义“静态代码块”\"></a>使用static定义“静态代码块”</h4><p>1.语法格式：</p>\n<p>​ static {</p>\n<p>java语句;</p>\n<p>​ }</p>\n<p>2.静态代码在类加载时执行，并且只执行一次</p>\n<p>3.静态代码块在一个类中可以编写多个，从上往下</p>\n<p>4.静态代码块的作用？什么时候用</p>\n<p>​ 静态代码时java为程序员准备的一个特殊时刻，在类加载时刻，若需要此刻还在一段特殊程序，可以直接放到静态代码中</p>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><p>描述一个动作，所有对象执行这个动作最终产生的影响一样，不再属于某一个对象动作</p>\n<p>大多数“工具类”的方法都是静态方法，方便使用</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>继承的基本作用：代码复用，但是继承最重要的作用时：有了继承才有了以后方法的覆盖和多态机制</p>\n<p>[修饰符列表]class 类名 extends 父类名{</p>\n<p>​ 类体 = 属性 + 方法</p>\n<p>}</p>\n<p>java语言的继承制支持单继承，一个类不能同时继承很多类，只能继承一个类。</p>\n<p>B类继承A类，A称为父类，基类，超类，superclass</p>\n<p>​ B称为子类，派生类，subclass</p>\n<p>私有不支持继承，构造方法不支持继承</p>\n<h3 id=\"方法覆盖\"><a href=\"#方法覆盖\" class=\"headerlink\" title=\"方法覆盖\"></a>方法覆盖</h3><p>又称方法重写override/Overwrite</p>\n<p>父类中的方法满足不了子类中的业务需求，有必要重写方法</p>\n<p>就是重新写一遍<strong>完全一样复制</strong>方法，方法区中代码自己改，方法名不变，返回类型不变，参数列表不变，抛出异常不能更低，不能更少，访问权限不能更低可以更高</p>\n<p>animal.move(); cat extend animal;</p>\n<p>私有方法不能继承不能覆盖</p>\n<p>构造方法不能继承不能覆盖</p>\n<p>静态方法不存在覆盖（多态后）</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>animal/ bird /cat</p>\n<p>cat和bird没有任何继承关系</p>\n<p>面向对象三大特征：封装 继承 多态</p>\n<p>多态中涉及到的几个概念</p>\n<ul>\n<li><p>向上转型（upcasting）</p>\n<p>子类型 –&gt; 父类型</p>\n<p>自动类型转换</p>\n</li>\n<li><p>向下转型（downcasting）</p>\n<p>父类型 –&gt; 子类型</p>\n<p>强制类型转换</p>\n</li>\n</ul>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210625084016091.png\" alt=\"image-20210625084016091\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;动物在行走&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;猫在走猫步&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">catchMouse</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;猫抓老鼠&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸟在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>();</span><br><span class=\"line\">        a.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Cat</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">        b.move();</span><br><span class=\"line\">        b.catchMouse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Bird</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bird</span>();</span><br><span class=\"line\">        c.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用多态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        Cat is an Animal</span></span><br><span class=\"line\"><span class=\"comment\">        父类型引用指向子类型对象</span></span><br><span class=\"line\"><span class=\"comment\">        new Cat()创建的对象类型为Cat，a2这个引用的数据类型是Animal，可见他们进行了类型转换</span></span><br><span class=\"line\"><span class=\"comment\">        子类型转换成了父类型，称为向上转型，自动类型转换</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">   <span class=\"comment\">/*    java两个阶段 编译阶段· 运行阶段</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">编译无法通过程序无法运行</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">编译阶段编译器检查a2这个引用的数据类型为Animal.class,字节码中有move方法，所以编译通过了，这个过程我们称为静态绑定，编译阶段绑定</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">在程序运行阶段，JVM堆内存当中真实创建的对象是Cat对象啊，那么下面程序在运行阶段一定调用Cat对象的move()方法，此时发生程序动态绑定</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        a2.move();</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      \ta2.catchMouse();</span></span><br><span class=\"line\"><span class=\"comment\">      \t编译阶段就出错了</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"type\">Cat</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> (Cat)a2;</span><br><span class=\"line\">      c2.catchMouse();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//以下程序编译没问题</span></span><br><span class=\"line\">      <span class=\"comment\">//但是运行会出现异常，因为JVM堆内存中真正存在的对象是Bird类型，Bird对象无法转换为Cat对象，因为两种类型之间不存在任何继承关系，此时出现了著名的异常</span></span><br><span class=\"line\">      <span class=\"comment\">//java.lang.ClassCastException</span></span><br><span class=\"line\">      <span class=\"comment\">//类型转换异常，向下转型时会发生</span></span><br><span class=\"line\">      <span class=\"type\">Animal</span> <span class=\"variable\">a3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bird</span>();</span><br><span class=\"line\">      <span class=\"type\">cat</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> (Cat)a3;</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      以上异常只有在强制类型转换时才会发生，这么说向下转型存在隐患</span></span><br><span class=\"line\"><span class=\"comment\">      向上转型只要编译通过一定能运行，</span></span><br><span class=\"line\"><span class=\"comment\">      向下转型，运行可能错误java.lang.ClassCastException</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么时候需要向下转型\"><a href=\"#什么时候需要向下转型\" class=\"headerlink\" title=\"什么时候需要向下转型\"></a>什么时候需要向下转型</h4><p>当调用的属性和方法是在子类型中特有的，父类型中不存在</p>\n<h4 id=\"避免向下转型ClassCastException异常\"><a href=\"#避免向下转型ClassCastException异常\" class=\"headerlink\" title=\"避免向下转型ClassCastException异常\"></a>避免向下转型ClassCastException异常</h4><p>（引用instanceof 数据类型名）</p>\n<p>（a instanceof Animal）</p>\n<p>true表示：</p>\n<p>​ a引用指向的对象是Animal</p>\n<p>false。。。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a3 <span class=\"keyword\">instanceof</span> Bird)&#123;</span><br><span class=\"line\">  <span class=\"type\">Bird</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> (Bird)a3;</span><br><span class=\"line\">  b2.fly;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a3 <span class=\"keyword\">instanceof</span> Cat)&#123;</span><br><span class=\"line\">  <span class=\"type\">Cat</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> (Cat)a3;</span><br><span class=\"line\">  C2.catchMouse();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>耦合度低 扩展力强</p>\n<h3 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h3><p>1最终的、不可变得</p>\n<p>2final修饰的类无法<strong>被继承</strong></p>\n<p>3final修饰的方法不能被<strong>覆盖</strong></p>\n<p>4变量赋值后不能<strong>再赋值</strong></p>\n<p>5实例变量加final需要手动赋值 final int age = 0；</p>\n<p>6final 修饰的对象无法改变指向别的对象</p>\n<h4 id=\"常量定义语法格式\"><a href=\"#常量定义语法格式\" class=\"headerlink\" title=\"常量定义语法格式\"></a>常量定义语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> 类型 常量名 = 值；</span><br><span class=\"line\"><span class=\"comment\">//常量名必须大写 单词之间下划线连接</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">GUO_JI</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;中国&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">PI</span> <span class=\"operator\">=</span> <span class=\"number\">3.14159</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-amp-amp-import\"><a href=\"#package-amp-amp-import\" class=\"headerlink\" title=\"package &amp;&amp; import\"></a>package &amp;&amp; import</h3><p>在java源程序第一行编写package语句</p>\n<p>package 包名;</p>\n<p>包名命名规范：</p>\n<p>公司域名倒序 +项目名oa +模块名 +功能名;</p>\n<p>com.bjpowernode.oa.user.service;</p>\n<p>包名必须全部小写，也是标识符</p>\n<p>一个包对应一个目录</p>\n<p>import com.bjpowernode.oa.user.service；</p>\n<p>import语句用来倒入其他类，同一个包下的类不需要导入</p>\n<p>import 类名;</p>\n<p>import 包名.*;</p>\n<p>Java.lang.* 不需要手动引入，系统自动</p>\n<p>import java.util.*</p>\n<p>4</p>\n<h3 id=\"访问控制权限\"><a href=\"#访问控制权限\" class=\"headerlink\" title=\"访问控制权限\"></a>访问控制权限</h3><blockquote>\n<p>​ public 表示公开的</p>\n<p>​ protected 同包下可以访问，子类可以访问</p>\n<p>​ 缺省 同包</p>\n<p>​ private 表示私有，只能在本类访问</p>\n</blockquote>\n<p>缺省和protected出了包之后就</p>\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。x</p>\n<h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p>\n<p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\">  SuperClass()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SuperClass()&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  SuperClass(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SuperClass(int n)&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// SubClass 类继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">  SubClass()&#123; <span class=\"comment\">// 自动调用父类的无参数构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">SubClass</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(<span class=\"number\">300</span>);  <span class=\"comment\">// 调用父类中带有参数的构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass(int n):&quot;</span>+n);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// SubClass2 类继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">  SubClass2()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(<span class=\"number\">300</span>);  <span class=\"comment\">// 调用父类中带有参数的构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass2&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">SubClass2</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123; <span class=\"comment\">// 自动调用父类的无参数构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass2(int n):&quot;</span>+n);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSuperSub</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;------SubClass 类继承------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">SubClass</span> <span class=\"variable\">sc1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br><span class=\"line\">    <span class=\"type\">SubClass</span> <span class=\"variable\">sc2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;------SubClass2 类继承------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">SubClass2</span> <span class=\"variable\">sc3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass2</span>();</span><br><span class=\"line\">    <span class=\"type\">SubClass2</span> <span class=\"variable\">sc4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass2</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">------SubClass 类继承------</span><br><span class=\"line\">SuperClass()</span><br><span class=\"line\">SubClass</span><br><span class=\"line\"><span class=\"title function_\">SuperClass</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">SubClass(<span class=\"type\">int</span> n):<span class=\"number\">100</span></span><br><span class=\"line\">------SubClass2 类继承------</span><br><span class=\"line\">SuperClass(<span class=\"type\">int</span> n)</span><br><span class=\"line\">SubClass2</span><br><span class=\"line\"><span class=\"title function_\">SuperClass</span><span class=\"params\">()</span></span><br><span class=\"line\">SubClass2(<span class=\"type\">int</span> n):<span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            str = br.readLine();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!str.equals(<span class=\"string\">&quot;end&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了static内部类,内部类中不允许static静态变量</p>\n<h3 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h3><p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727142922916.png\" alt=\"image-20210727142922916\"></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727144149656.png\" alt=\"image-20210727144149656\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Gujm</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/7/27 8:14 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BankTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Bank</span> <span class=\"variable\">bank</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bank</span>();</span><br><span class=\"line\">        bank.addCustomer(<span class=\"string\">&quot;G&quot;</span>,<span class=\"string\">&quot;jm&quot;</span>);</span><br><span class=\"line\">        bank.getCustomer(<span class=\"number\">0</span>).setAccount(<span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">2000</span>));</span><br><span class=\"line\">        bank.getCustomer(<span class=\"number\">0</span>).getAccount().withdraw(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">balance</span> <span class=\"operator\">=</span> bank.getCustomer(<span class=\"number\">0</span>).getAccount().getBalance();</span><br><span class=\"line\">        System.out.println(bank.getCustomer(<span class=\"number\">0</span>).getFirstName()+<span class=\"string\">&quot;账户余额为&quot;</span>+balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Bank</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Customer[] customers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> numberOfCustomers;<span class=\"comment\">//客户个数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Bank</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        customers = <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//添加客户</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCustomer</span><span class=\"params\">(String f, String l)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">cust</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(f,l);</span><br><span class=\"line\">        customers[numberOfCustomers++] = cust;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取客户个数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumberOfCustomers</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numberOfCustomers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取制定位置的客户</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Customer <span class=\"title function_\">getCustomer</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; numberOfCustomers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> customers[index];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Account</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(<span class=\"type\">double</span> init_balance)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.balance = init_balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amt)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(amt &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            balance += amt;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;存钱成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amt)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (balance &gt;= amt)&#123;</span><br><span class=\"line\">            balance -= amt;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;取钱成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;余额不足&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Account account;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Customer</span><span class=\"params\">(String f, String l)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.firstName = f;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lastName = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> String <span class=\"title function_\">getFirstName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">public</span> String <span class=\"title function_\">getLastName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAccount</span><span class=\"params\">(Account account)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.account = account;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> Account <span class=\"title function_\">getAccount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> account;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals()\"></a>equals()</h3><p>String、Date 、 File、Io包装都重写了equals()方法, 只比较实体内容是否相等.</p>\n<h3 id=\"基本数据类型包装类\"><a href=\"#基本数据类型包装类\" class=\"headerlink\" title=\"基本数据类型包装类\"></a>基本数据类型包装类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> Integer.parseInt(str1);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(num2+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;true1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> Boolean.parseBoolean(str2);</span><br><span class=\"line\"></span><br><span class=\"line\">sout(b1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Gujm</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/8/21 2:15 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clerk</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">productCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生产</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">produceProduct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (productCount &lt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            productCount++;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;开始生产第&quot;</span> + productCount);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//消费</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">consumeProduct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (productCount &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;开始消费第&quot;</span> + productCount);</span><br><span class=\"line\">            productCount--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Clerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Producer</span><span class=\"params\">(Clerk clerk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clerk = clerk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;开始生产。。&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            clerk.produceProduct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Clerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Customer</span><span class=\"params\">(Clerk clerk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clerk = clerk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;开始消费。。&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            clerk.consumeProduct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProductTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Clerk</span> <span class=\"variable\">clerk</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Clerk</span>();</span><br><span class=\"line\">        <span class=\"type\">Producer</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Producer</span>(clerk);</span><br><span class=\"line\">        p1.setName(<span class=\"string\">&quot;生产者1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(clerk);</span><br><span class=\"line\">        c1.setName(<span class=\"string\">&quot;消费者1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(clerk);</span><br><span class=\"line\">        c2.setName(<span class=\"string\">&quot;消费者2&quot;</span>);</span><br><span class=\"line\">        p1.start();</span><br><span class=\"line\">        c1.start();</span><br><span class=\"line\">        c2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h3><h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><h3 id=\"ArrayList常用方法\"><a href=\"#ArrayList常用方法\" class=\"headerlink\" title=\"ArrayList常用方法\"></a>ArrayList常用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增:add(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\">删:remove(<span class=\"type\">int</span> index) remove(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\">改:set(<span class=\"type\">int</span> index, Object ele)</span><br><span class=\"line\"></span><br><span class=\"line\">查:get(<span class=\"type\">int</span> index)</span><br><span class=\"line\"></span><br><span class=\"line\">插:add(<span class=\"type\">int</span> index, Object ele)</span><br><span class=\"line\"></span><br><span class=\"line\">遍历:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Iterator迭代器方式</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Iterator</span> <span class=\"variable\">iterator</span> <span class=\"operator\">=</span> list.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tSystem.out.println(<span class=\"string\">&quot;****&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">遍历:<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">增强<span class=\"keyword\">for</span>循环</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Object obj : list)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tSystem.out.println(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;***&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">遍历:<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">普通<span class=\"keyword\">for</span>循环</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tSystem.out.println(list.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">没听</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210905000354527.png\" alt=\"image-20210905000354527\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><p>三元运算符可以嵌套</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>操作的是整形的数据</p>\n<p>&lt;&lt;:在一定范围内,每向左移一位,相当于 *2</p>\n<blockquote>\n<p>最高效计算2*8. –&gt; 2 &lt;&lt; 3. // 8 &lt;&lt; 1;</p>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>​ equal</p>\n<p>fill</p>\n<p>sort</p>\n<p>toString</p>\n<p>binarySearch</p>\n<h3 id=\"构造器-constructor\"><a href=\"#构造器-constructor\" class=\"headerlink\" title=\"构造器(constructor)\"></a>构造器(constructor)</h3><p>如果没有显示的定义累的构造器的话 系统默认提供一个空参构造器/</p>\n<h3 id=\"方法调用时的内存分配\"><a href=\"#方法调用时的内存分配\" class=\"headerlink\" title=\"方法调用时的内存分配\"></a>方法调用时的内存分配</h3><h4 id=\"内存何时分配\"><a href=\"#内存何时分配\" class=\"headerlink\" title=\"内存何时分配\"></a>内存何时分配</h4><p>方法只有被调用时，在JVM中会给该方法分配“运行所属“内存空间。</p>\n<h4 id=\"JVM内存划分的三块主要空间\"><a href=\"#JVM内存划分的三块主要空间\" class=\"headerlink\" title=\"JVM内存划分的三块主要空间\"></a>JVM内存划分的三块主要空间</h4><ul>\n<li><strong>方法区内存</strong>（代码片段）</li>\n<li>堆内存</li>\n<li>栈内存(分配方法运行的所属内存空间)</li>\n</ul>\n<h4 id=\"数据结构——“栈”\"><a href=\"#数据结构——“栈”\" class=\"headerlink\" title=\"数据结构——“栈”\"></a>数据结构——“栈”</h4><ul>\n<li><p>栈针永远指向栈顶元素</p>\n</li>\n<li><p>异常 需要注意的问题 需 要按照类型的要求输入,很具相应的方法,吐过输入的数据类型月要皮球的数据类型不匹配时没汇报一导致程序</p>\n</li>\n<li><p>栈顶元素处于活跃，其他元素静止</p>\n</li>\n<li><p>术语</p>\n<ul>\n<li>入栈/压栈/push</li>\n<li>弹栈/出栈/pop</li>\n</ul>\n</li>\n<li><p><strong>先进后出 后进先出</strong></p>\n<p>main进-&gt;m1进-&gt;m2进-&gt;m2出-&gt;m1出-&gt;main出</p>\n</li>\n</ul>\n<h4 id=\"方法代码片段的存储\"><a href=\"#方法代码片段的存储\" class=\"headerlink\" title=\"方法代码片段的存储\"></a>方法代码片段的存储</h4><ol>\n<li>方法代码片段属于.class字节码文件的一部分，字节码文件在（classLoader加载器寻找HelloWorld.class）类加载的时候，将其放到了方法去中。所以JVM中的三块主要的内存空间中<strong>方法区内存</strong>最先有数据，存放了代码片段。</li>\n<li>代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每次调用这个方法的时候需要给该方法分配<strong>独立的活动场所</strong>，在栈内存中分配。</li>\n<li>方法调用，给方法分配内存，压栈；方法结束之后，释放分配内存，弹栈</li>\n</ol>\n<h3 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h3><p>类描述对象的共同特征</p>\n<p><strong>类描述的是 状态和动作</strong>（属性+方法）</p>\n<h4 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h4><p>类{</p>\n<p>状态：属性</p>\n<p>动作：方法；</p>\n<p>}</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//属性【描述对象的状态信息】</span></span><br><span class=\"line\">\t<span class=\"comment\">//属性一般是通过变量的形式完成定义的（int String boolean）</span></span><br><span class=\"line\">\t<span class=\"comment\">//在类体中，方法体之外定义的变量被称为“成员变量”</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//学号</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> no;</span><br><span class=\"line\">\t<span class=\"comment\">//姓名</span></span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t<span class=\"comment\">//年龄</span></span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方法</span></span><br><span class=\"line\">  <span class=\"comment\">//方法买哦书的是对象的动作信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//唱歌</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//跳舞</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"java两种数据类型\"><a href=\"#java两种数据类型\" class=\"headerlink\" title=\"java两种数据类型\"></a>java两种数据类型</h5><ol>\n<li><p>基本数据类型</p>\n<p>short</p>\n<p>long</p>\n<p>int</p>\n<p>boolean</p>\n<p>String</p>\n<p>char</p>\n</li>\n<li><p>引用数据类型</p>\n<p>String.class SUN公司定义</p>\n<p>System.class SUN公司定义</p>\n<p>Student.class 我定义</p>\n<p>MingShen.class 我定义</p>\n<p>….</p>\n<p><strong>java中所有的类都为引用数据类型</strong></p>\n</li>\n</ol>\n<h4 id=\"对象的创建和使用\"><a href=\"#对象的创建和使用\" class=\"headerlink\" title=\"对象的创建和使用\"></a>对象的创建和使用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OOtest01</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//int 是基本数据类型</span></span><br><span class=\"line\">    <span class=\"comment\">//i 是变量名</span></span><br><span class=\"line\">    <span class=\"comment\">//10 是一个int类型的字面值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过一个类可以实例化N个对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//实例化对象语法 new 类名（）；</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//new运算符作用是创建对象，在JVM中</span></span><br><span class=\"line\">    <span class=\"comment\">//new运算符的作用是创建对象，在JVM堆内存中开辟新的内存空间</span></span><br><span class=\"line\">    <span class=\"comment\">//方法区内存：再类加载的时候，clss字节码代码片段被加载到内存空间当中</span></span><br><span class=\"line\">    <span class=\"comment\">//栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈</span></span><br><span class=\"line\">    <span class=\"comment\">//堆内存：new studeng（）；</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Student 是引用数据类型</span></span><br><span class=\"line\">    <span class=\"comment\">//s 是变量名</span></span><br><span class=\"line\">    <span class=\"comment\">//new Student是一个学生对象</span></span><br><span class=\"line\">    <span class=\"type\">Student</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当程序执行到new时的内存图如下</strong></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527190012042.png\" alt=\"image-20210527190012042\"></p>\n<p>Non, age, sex, name, addr都是<strong>实例变量</strong></p>\n<p>student这个new出来的对象的<strong>内存地址</strong>给了s，s时<strong>局部变量</strong>，s为<strong>引用</strong></p>\n<p>什么是对象？new运算符在堆内存中开辟的内存空间称为对象</p>\n<p>什么是引用？引用是一个变量，只不过这个变量中保存了另一个java对象的内存地址</p>\n<p>java语言当中程序员只能通过“引用”去访问对内存当中对象内部的实例变量</p>\n<p>访问实例变量的内存数据</p>\n<p>读取数据：引用.变量名</p>\n<p>修改数据：引用.变量名 = 值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">StuNo</span> <span class=\"operator\">=</span> s.no;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">StuAge</span> <span class=\"operator\">=</span> s.Age；<span class=\"comment\">//读取</span></span><br><span class=\"line\"> s.no = <span class=\"number\">10</span>;</span><br><span class=\"line\"> s.name = <span class=\"string\">&quot;MingShen&quot;</span>;</span><br><span class=\"line\"> s.age = <span class=\"number\">10</span>;<span class=\"comment\">//会把堆内存的内存值改了</span></span><br><span class=\"line\"> <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();<span class=\"comment\">//再次new对象 stu是引用</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527193017688.png\" alt=\"image-20210527193017688\"></p>\n<p>局部变量在栈内存中储存</p>\n<p>成员变量中的实例变量在堆内存的java对象内部储存</p>\n<p>实例变量是一个对象一份，100个对象有100份</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.printIn(stu.age);<span class=\"comment\">//10</span></span><br><span class=\"line\">System.out.printIn(student.no);<span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<p>报错因为no这个实例变量不能直接采用“类名”的方式访问</p>\n<p>因为no是实例变量，对象级别的变量，变量储存在Java对象内部，必须先有对象通过对象才能访问no这个实例变量，不能直接通过“类名”</p>\n<p>成员变量没有手动赋值，系统赋默认值</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte， short， int， long</td>\n<td>0</td>\n</tr>\n<tr>\n<td>float，double</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>\\u000</td>\n</tr>\n<tr>\n<td>引用数据类型</td>\n<td>null （空值）</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Address</span>&#123;</span><br><span class=\"line\">  String city;</span><br><span class=\"line\">  String street;</span><br><span class=\"line\">  String zipcode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//属性【以下都是成员变量之实例变量】</span></span><br><span class=\"line\">  <span class=\"type\">int</span> no;<span class=\"comment\">//int基本数据类型，no是实例变量</span></span><br><span class=\"line\">  String name;<span class=\"comment\">//String引用数据类型，name是引用满是实例变量</span></span><br><span class=\"line\">  Address addr;<span class=\"comment\">//Address引用数据类型，addr是引用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OOTest02</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建User对象</span></span><br><span class=\"line\">    <span class=\"comment\">//u是局部变量</span></span><br><span class=\"line\">    <span class=\"comment\">//u是一个引用</span></span><br><span class=\"line\">    <span class=\"comment\">//u保存内存地址指向堆内存的User对象</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>()；<span class=\"comment\">//（从右往前）</span></span><br><span class=\"line\">    u.no = <span class=\"number\">110</span>;</span><br><span class=\"line\">    u.name = <span class=\"string\">&quot;jack&quot;</span>;<span class=\"comment\">//字符串比较特殊不用new，jack是一个Java对象，属于String对象</span></span><br><span class=\"line\">    u.addr = <span class=\"keyword\">new</span> <span class=\"title class_\">Address</span>();<span class=\"comment\">//等号右边先执行，Address对象三个none、none、none</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//main方法只有一个引用u</span></span><br><span class=\"line\">    <span class=\"comment\">//一切只能通过u来访问</span></span><br><span class=\"line\">    System.out.println(u.name + <span class=\"string\">&quot;居住在&quot;</span> + u.addr.city);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527194926715.png\" alt=\"image-20210527194926715\"></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195317973.png\" alt=\"image-20210527195317973\"></p>\n<p><strong>找出所有引用</strong></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210527195451792.png\" alt=\"image-20210527195451792\"></p>\n<p>空引用访问“实例”相关数据一定会造成空指针异常 NullPointerException</p>\n<p>实例相关数据表示访问时必须有对象参与</p>\n<h3 id=\"类怎么定义\"><a href=\"#类怎么定义\" class=\"headerlink\" title=\"类怎么定义\"></a>类怎么定义</h3><p>[修饰符列表]class 类名{</p>\n<p>属性；</p>\n<p>方法；</p>\n<p>}</p>\n<p>现实世界当中超市中的商品，发现这所有的商品都要有一些共同的特征，例如，每一个商品都有编号，每一个商品都有单价，所以定义以下的类，来代表所有商品。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Product</span>&#123;<span class=\"comment\">//为什么要写class？因为要做超市的管理系统，超市有商品，商品有共同的特征，想到了编号，单价，所以利用基本数据类型（int double），定义了两个变量。</span></span><br><span class=\"line\">\t<span class=\"comment\">//编号【数字，整数】</span></span><br><span class=\"line\">  <span class=\"type\">int</span> productNo;</span><br><span class=\"line\">  <span class=\"comment\">//productNo是基本数据类型</span></span><br><span class=\"line\">  <span class=\"comment\">//单价【数字，小数】</span></span><br><span class=\"line\">  <span class=\"type\">double</span> price;</span><br><span class=\"line\">  <span class=\"comment\">//price 是基本数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Student s= <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Product</span> <span class=\"variable\">pro</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>&#123;&#125;;<span class=\"comment\">//实例变量需要new出来才能引用，引用方式如下</span></span><br><span class=\"line\">pro.price = <span class=\"number\">0x1123123</span>;<span class=\"comment\">//访问 可以（读一读）（改一改）</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>product是实例变量，下面对他进行访问</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProductTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(string[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建对象，商品对象</span></span><br><span class=\"line\">    <span class=\"comment\">//iphoneProMax局部变量</span></span><br><span class=\"line\">    <span class=\"comment\">//iphoneProMax引用</span></span><br><span class=\"line\">    <span class=\"comment\">//iphoneProMax变量中保存内存地址指向堆内存当中的商品对象</span></span><br><span class=\"line\">    <span class=\"type\">Product</span> <span class=\"variable\">iphoneProMax</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\">    <span class=\"comment\">//访问实例变量的语法： 引用.变量名</span></span><br><span class=\"line\">    System.out.printIn(<span class=\"string\">&quot;商品编号：&quot;</span>+iphoneProMax.productNo);</span><br><span class=\"line\">    iphoneProMax.price = <span class=\"number\">8000.0</span>；</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;商品单价：&quot;</span>+iphoneProMax.price);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t要求定义一个汽车类</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*品牌：字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*颜色：字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*号牌：字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*购买总价：浮点型数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//属性【成员变量之：实例变量】</span></span><br><span class=\"line\">  <span class=\"comment\">//总价</span></span><br><span class=\"line\">  基本数据类型</span><br><span class=\"line\">  <span class=\"type\">double</span> price;</span><br><span class=\"line\">  <span class=\"comment\">//品牌</span></span><br><span class=\"line\">  引用数据类型</span><br><span class=\"line\">  String brand;</span><br><span class=\"line\">  <span class=\"comment\">//颜色</span></span><br><span class=\"line\">  <span class=\"comment\">//引用数据类型</span></span><br><span class=\"line\">  String color;</span><br><span class=\"line\">  <span class=\"comment\">//号牌</span></span><br><span class=\"line\">  <span class=\"comment\">//引用数据类型</span></span><br><span class=\"line\">  String No;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t房屋类(不太行)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">house</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> proportion;</span><br><span class=\"line\">  String owner;<span class=\"comment\">//想知道户主的身份信息，但是不能在下一行定义实例变量ID，会误解为房子的ID</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t房屋类（行）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">house</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> proportion;</span><br><span class=\"line\">  Person owner ;<span class=\"comment\">//new是个地址（其中就是联系电话、就是地址、就是各种信息）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//名字</span></span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"comment\">//身份证号</span></span><br><span class=\"line\">  String id;</span><br><span class=\"line\">  <span class=\"comment\">//性别</span></span><br><span class=\"line\">  <span class=\"type\">boolean</span> sex;</span><br><span class=\"line\">  <span class=\"comment\">//年龄</span></span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"comment\">//妻子</span></span><br><span class=\"line\">  Wife wife；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><ol>\n<li>对外提供简单的操作入口，照相机原理很复杂，但是操作很简单</li>\n<li>提高安全性</li>\n<li>以后程序可以重服使用</li>\n<li>封装后才形成真正的对象，“独立体”</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"封装的步骤\"><a href=\"#封装的步骤\" class=\"headerlink\" title=\"封装的步骤\"></a>封装的步骤</h4><ol>\n<li><p>属性私有化，是用private进行修饰，private表示私有，修饰后的所有数据只能在本类中访问。</p>\n</li>\n<li><p>对外提供简单的入口</p>\n<p>对外提供两个方法（get，set）</p>\n</li>\n</ol>\n<h4 id=\"背会\"><a href=\"#背会\" class=\"headerlink\" title=\"背会\"></a>背会</h4><p>sette and getter方法没有static关键字</p>\n<p>有static关键字修饰的方法怎么调用：类 名.方法名（实参）；</p>\n<p>没有static关键字修饰的方法：引用.方法名（实参）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a &lt; <span class=\"number\">0</span> || a &gt;<span class=\"number\">150</span> )&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;对不起，您给的年龄不合法&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  age = a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> \t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>封装之后</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] srgs)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    user.setAge(<span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(user.getAge());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><ol>\n<li><p>构造方法又称构造函数，返回值类型不需要指定，加上void int 就变成普通方法了</p>\n</li>\n<li><p>构造方法的作用：通过方法的调用创建对象。</p>\n</li>\n<li><p>构造方法的方法名必须和类名保持一致</p>\n</li>\n<li><p>每个构造方法实际上执行结束之后都有返回值，但是这个return不需要写，返回值就是类本身</p>\n</li>\n<li><p>[修饰符列表]构造方法方法名（形参数）</p>\n<p>{方法体}；</p>\n<p>}</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建User对象</span></span><br><span class=\"line\">        <span class=\"comment\">//调用User类的构造方法来完成对象的创建</span></span><br><span class=\"line\">        <span class=\"comment\">//以下程序创建了4个对象，只要构造函数调用就会查u你感觉爱你对象，并且在“堆内存”开辟内存空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;gujm&quot;</span>);</span><br><span class=\"line\">        ConstructorTest01.dosome();</span><br><span class=\"line\">        dosome();</span><br><span class=\"line\">        <span class=\"type\">ConstructorTest01</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConstructorTest01</span>();</span><br><span class=\"line\">        t.doOther();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用带有static的方法：类名</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dosome</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do some!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用没有static的方法：引用</span></span><br><span class=\"line\">    <span class=\"comment\">//doOther方法在ConstructorTest01类中，所以需要创建ConstructorTest01对象</span></span><br><span class=\"line\">    <span class=\"comment\">//创建ConstructorTest01对象之后，调用无参数构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title function_\">doOther</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Do other!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;带有int类型构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;带有String类型构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>构造方法作用：创造对象，给实例对象赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">act1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>();</span><br><span class=\"line\">        act1.setActno(<span class=\"string\">&quot;111&quot;</span>);</span><br><span class=\"line\">        System.out.println(act1.getActno());</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">act2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"string\">&quot;10&quot;</span>);</span><br><span class=\"line\">        System.out.println(act2.getActno());</span><br><span class=\"line\">        System.out.println(act1.getBalance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Account</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String actno;<span class=\"comment\">//实例变量，创建对象之后才会有实例变量，实例方法在构造方法过程中完成赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getActno</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> actno;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setActno</span><span class=\"params\">(String actno)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.actno = actno;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBalance</span><span class=\"params\">(<span class=\"type\">double</span> balance)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.balance = balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;空参数方法&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(String s)</span>&#123;</span><br><span class=\"line\">        actno = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><p>传的永远是变量保存的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">      <span class=\"comment\">//User User = 0x1234</span></span><br><span class=\"line\">      <span class=\"comment\">//传递u给add方法的时候，实际上传递的是u变量中保存的值，只不过这个值是一个java对象的内存地址</span></span><br><span class=\"line\">        add(u);</span><br><span class=\"line\">        System.out.println(u.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(User u)</span>&#123;</span><br><span class=\"line\">        u.age++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;add--&gt;&quot;</span> + u.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> age;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">            age = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210620092032503.png\" alt=\"image-20210620092032503\"></p>\n<p>第二个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span><span class=\"number\">0x1234</span>;</span><br><span class=\"line\">User u1= u;<span class=\"comment\">//u传递给了u1，实际上是吧0x1234这个值赋值给了u1，u和u1实际上是两个不同的局部变量</span></span><br><span class=\"line\"><span class=\"comment\">//但是他们的两个变量指向堆内存中同一个java对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>this 是一个 关键字，翻译为：这个，用在方法中</p>\n<p>this是一个引用，this是一个变量，this变量中保存内存地址指向了自身，this储存子啊JVM堆内存java对象内部</p>\n<p>创建100个java对象，每个对象都有this，也就是说有100个不同的this</p>\n<p><strong>this代表当前正在做（执行实例方法）这个动作的对象</strong></p>\n<p>不能用在static方法中</p>\n<p>在static方法中不能“直接”访问实例变量 实例方法</p>\n<p>因为实例都需要对象存在</p>\n<p>而static中没有this，也就是说，当前对象是不存在的</p>\n<p>自然无法访问当前对象的实例方法</p>\n<p><strong>用来区分实例变量和局部变量时 this不能省</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>this（）这种语法只能放在构造方法第一行</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>应该采用类名的方式访问，即使new了对象访问static方法，其本质也用的是类名，与引用指向的对象无关，哪怕（t = null）也不会出现空指针异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Chinese</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"> <span class=\"comment\">//国籍每个对象由于都是Chinese类的实例化，所以每个中国人国籍都是Chinese</span></span><br><span class=\"line\"> <span class=\"comment\">//实例对象在堆内存</span></span><br><span class=\"line\"> <span class=\"comment\">//String country;//所以没必要定义为实例变量,没必要让每一个对象都占内存，改为下一行</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;中国&quot;</span>;<span class=\"comment\">//类级别特征，变量前加static，静态变量不需要创造对象，内存就开辟了，在方法区内存</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210624165417791.png\" alt=\"image-20210624165417791\"></p>\n<h4 id=\"什么时候成员变量申明为静态变量？\"><a href=\"#什么时候成员变量申明为静态变量？\" class=\"headerlink\" title=\"什么时候成员变量申明为静态变量？\"></a>什么时候成员变量申明为静态变量？</h4><p>所有的对象都有这个属性，并且所有对象的这个属性值一样</p>\n<h4 id=\"什么时候成员变量申明为静态变量？-1\"><a href=\"#什么时候成员变量申明为静态变量？-1\" class=\"headerlink\" title=\"什么时候成员变量申明为静态变量？\"></a>什么时候成员变量申明为静态变量？</h4><p>所有对象都有这个属性，不同对象值不同或属性值随对象值改变</p>\n<h4 id=\"static使用方式\"><a href=\"#static使用方式\" class=\"headerlink\" title=\"static使用方式\"></a>static使用方式</h4><p>静态变量在类加载的时候u初始化，内存在方法区开辟，访问时不需创造对象，直接<strong>类名.变量名</strong></p>\n<h4 id=\"使用static定义“静态代码块”\"><a href=\"#使用static定义“静态代码块”\" class=\"headerlink\" title=\"使用static定义“静态代码块”\"></a>使用static定义“静态代码块”</h4><p>1.语法格式：</p>\n<p>​ static {</p>\n<p>java语句;</p>\n<p>​ }</p>\n<p>2.静态代码在类加载时执行，并且只执行一次</p>\n<p>3.静态代码块在一个类中可以编写多个，从上往下</p>\n<p>4.静态代码块的作用？什么时候用</p>\n<p>​ 静态代码时java为程序员准备的一个特殊时刻，在类加载时刻，若需要此刻还在一段特殊程序，可以直接放到静态代码中</p>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><p>描述一个动作，所有对象执行这个动作最终产生的影响一样，不再属于某一个对象动作</p>\n<p>大多数“工具类”的方法都是静态方法，方便使用</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>继承的基本作用：代码复用，但是继承最重要的作用时：有了继承才有了以后方法的覆盖和多态机制</p>\n<p>[修饰符列表]class 类名 extends 父类名{</p>\n<p>​ 类体 = 属性 + 方法</p>\n<p>}</p>\n<p>java语言的继承制支持单继承，一个类不能同时继承很多类，只能继承一个类。</p>\n<p>B类继承A类，A称为父类，基类，超类，superclass</p>\n<p>​ B称为子类，派生类，subclass</p>\n<p>私有不支持继承，构造方法不支持继承</p>\n<h3 id=\"方法覆盖\"><a href=\"#方法覆盖\" class=\"headerlink\" title=\"方法覆盖\"></a>方法覆盖</h3><p>又称方法重写override/Overwrite</p>\n<p>父类中的方法满足不了子类中的业务需求，有必要重写方法</p>\n<p>就是重新写一遍<strong>完全一样复制</strong>方法，方法区中代码自己改，方法名不变，返回类型不变，参数列表不变，抛出异常不能更低，不能更少，访问权限不能更低可以更高</p>\n<p>animal.move(); cat extend animal;</p>\n<p>私有方法不能继承不能覆盖</p>\n<p>构造方法不能继承不能覆盖</p>\n<p>静态方法不存在覆盖（多态后）</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>animal/ bird /cat</p>\n<p>cat和bird没有任何继承关系</p>\n<p>面向对象三大特征：封装 继承 多态</p>\n<p>多态中涉及到的几个概念</p>\n<ul>\n<li><p>向上转型（upcasting）</p>\n<p>子类型 –&gt; 父类型</p>\n<p>自动类型转换</p>\n</li>\n<li><p>向下转型（downcasting）</p>\n<p>父类型 –&gt; 子类型</p>\n<p>强制类型转换</p>\n</li>\n</ul>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210625084016091.png\" alt=\"image-20210625084016091\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;动物在行走&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;猫在走猫步&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">catchMouse</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;猫抓老鼠&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸟在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorTest01</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>();</span><br><span class=\"line\">        a.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Cat</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">        b.move();</span><br><span class=\"line\">        b.catchMouse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Bird</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bird</span>();</span><br><span class=\"line\">        c.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用多态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        Cat is an Animal</span></span><br><span class=\"line\"><span class=\"comment\">        父类型引用指向子类型对象</span></span><br><span class=\"line\"><span class=\"comment\">        new Cat()创建的对象类型为Cat，a2这个引用的数据类型是Animal，可见他们进行了类型转换</span></span><br><span class=\"line\"><span class=\"comment\">        子类型转换成了父类型，称为向上转型，自动类型转换</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">   <span class=\"comment\">/*    java两个阶段 编译阶段· 运行阶段</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">编译无法通过程序无法运行</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">编译阶段编译器检查a2这个引用的数据类型为Animal.class,字节码中有move方法，所以编译通过了，这个过程我们称为静态绑定，编译阶段绑定</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">在程序运行阶段，JVM堆内存当中真实创建的对象是Cat对象啊，那么下面程序在运行阶段一定调用Cat对象的move()方法，此时发生程序动态绑定</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        a2.move();</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      \ta2.catchMouse();</span></span><br><span class=\"line\"><span class=\"comment\">      \t编译阶段就出错了</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"type\">Cat</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> (Cat)a2;</span><br><span class=\"line\">      c2.catchMouse();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//以下程序编译没问题</span></span><br><span class=\"line\">      <span class=\"comment\">//但是运行会出现异常，因为JVM堆内存中真正存在的对象是Bird类型，Bird对象无法转换为Cat对象，因为两种类型之间不存在任何继承关系，此时出现了著名的异常</span></span><br><span class=\"line\">      <span class=\"comment\">//java.lang.ClassCastException</span></span><br><span class=\"line\">      <span class=\"comment\">//类型转换异常，向下转型时会发生</span></span><br><span class=\"line\">      <span class=\"type\">Animal</span> <span class=\"variable\">a3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bird</span>();</span><br><span class=\"line\">      <span class=\"type\">cat</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> (Cat)a3;</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      以上异常只有在强制类型转换时才会发生，这么说向下转型存在隐患</span></span><br><span class=\"line\"><span class=\"comment\">      向上转型只要编译通过一定能运行，</span></span><br><span class=\"line\"><span class=\"comment\">      向下转型，运行可能错误java.lang.ClassCastException</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么时候需要向下转型\"><a href=\"#什么时候需要向下转型\" class=\"headerlink\" title=\"什么时候需要向下转型\"></a>什么时候需要向下转型</h4><p>当调用的属性和方法是在子类型中特有的，父类型中不存在</p>\n<h4 id=\"避免向下转型ClassCastException异常\"><a href=\"#避免向下转型ClassCastException异常\" class=\"headerlink\" title=\"避免向下转型ClassCastException异常\"></a>避免向下转型ClassCastException异常</h4><p>（引用instanceof 数据类型名）</p>\n<p>（a instanceof Animal）</p>\n<p>true表示：</p>\n<p>​ a引用指向的对象是Animal</p>\n<p>false。。。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a3 <span class=\"keyword\">instanceof</span> Bird)&#123;</span><br><span class=\"line\">  <span class=\"type\">Bird</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> (Bird)a3;</span><br><span class=\"line\">  b2.fly;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a3 <span class=\"keyword\">instanceof</span> Cat)&#123;</span><br><span class=\"line\">  <span class=\"type\">Cat</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> (Cat)a3;</span><br><span class=\"line\">  C2.catchMouse();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>耦合度低 扩展力强</p>\n<h3 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h3><p>1最终的、不可变得</p>\n<p>2final修饰的类无法<strong>被继承</strong></p>\n<p>3final修饰的方法不能被<strong>覆盖</strong></p>\n<p>4变量赋值后不能<strong>再赋值</strong></p>\n<p>5实例变量加final需要手动赋值 final int age = 0；</p>\n<p>6final 修饰的对象无法改变指向别的对象</p>\n<h4 id=\"常量定义语法格式\"><a href=\"#常量定义语法格式\" class=\"headerlink\" title=\"常量定义语法格式\"></a>常量定义语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> 类型 常量名 = 值；</span><br><span class=\"line\"><span class=\"comment\">//常量名必须大写 单词之间下划线连接</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">GUO_JI</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;中国&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">PI</span> <span class=\"operator\">=</span> <span class=\"number\">3.14159</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-amp-amp-import\"><a href=\"#package-amp-amp-import\" class=\"headerlink\" title=\"package &amp;&amp; import\"></a>package &amp;&amp; import</h3><p>在java源程序第一行编写package语句</p>\n<p>package 包名;</p>\n<p>包名命名规范：</p>\n<p>公司域名倒序 +项目名oa +模块名 +功能名;</p>\n<p>com.bjpowernode.oa.user.service;</p>\n<p>包名必须全部小写，也是标识符</p>\n<p>一个包对应一个目录</p>\n<p>import com.bjpowernode.oa.user.service；</p>\n<p>import语句用来倒入其他类，同一个包下的类不需要导入</p>\n<p>import 类名;</p>\n<p>import 包名.*;</p>\n<p>Java.lang.* 不需要手动引入，系统自动</p>\n<p>import java.util.*</p>\n<p>4</p>\n<h3 id=\"访问控制权限\"><a href=\"#访问控制权限\" class=\"headerlink\" title=\"访问控制权限\"></a>访问控制权限</h3><blockquote>\n<p>​ public 表示公开的</p>\n<p>​ protected 同包下可以访问，子类可以访问</p>\n<p>​ 缺省 同包</p>\n<p>​ private 表示私有，只能在本类访问</p>\n</blockquote>\n<p>缺省和protected出了包之后就</p>\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。x</p>\n<h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p>\n<p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\">  SuperClass()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SuperClass()&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  SuperClass(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SuperClass(int n)&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// SubClass 类继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">  SubClass()&#123; <span class=\"comment\">// 自动调用父类的无参数构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">SubClass</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(<span class=\"number\">300</span>);  <span class=\"comment\">// 调用父类中带有参数的构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass(int n):&quot;</span>+n);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// SubClass2 类继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">  SubClass2()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(<span class=\"number\">300</span>);  <span class=\"comment\">// 调用父类中带有参数的构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass2&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">SubClass2</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123; <span class=\"comment\">// 自动调用父类的无参数构造器</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;SubClass2(int n):&quot;</span>+n);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSuperSub</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;------SubClass 类继承------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">SubClass</span> <span class=\"variable\">sc1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br><span class=\"line\">    <span class=\"type\">SubClass</span> <span class=\"variable\">sc2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;------SubClass2 类继承------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">SubClass2</span> <span class=\"variable\">sc3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass2</span>();</span><br><span class=\"line\">    <span class=\"type\">SubClass2</span> <span class=\"variable\">sc4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass2</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">------SubClass 类继承------</span><br><span class=\"line\">SuperClass()</span><br><span class=\"line\">SubClass</span><br><span class=\"line\"><span class=\"title function_\">SuperClass</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">SubClass(<span class=\"type\">int</span> n):<span class=\"number\">100</span></span><br><span class=\"line\">------SubClass2 类继承------</span><br><span class=\"line\">SuperClass(<span class=\"type\">int</span> n)</span><br><span class=\"line\">SubClass2</span><br><span class=\"line\"><span class=\"title function_\">SuperClass</span><span class=\"params\">()</span></span><br><span class=\"line\">SubClass2(<span class=\"type\">int</span> n):<span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            str = br.readLine();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!str.equals(<span class=\"string\">&quot;end&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了static内部类,内部类中不允许static静态变量</p>\n<h3 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h3><p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727142922916.png\" alt=\"image-20210727142922916\"></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210727144149656.png\" alt=\"image-20210727144149656\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Gujm</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/7/27 8:14 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BankTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Bank</span> <span class=\"variable\">bank</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bank</span>();</span><br><span class=\"line\">        bank.addCustomer(<span class=\"string\">&quot;G&quot;</span>,<span class=\"string\">&quot;jm&quot;</span>);</span><br><span class=\"line\">        bank.getCustomer(<span class=\"number\">0</span>).setAccount(<span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">2000</span>));</span><br><span class=\"line\">        bank.getCustomer(<span class=\"number\">0</span>).getAccount().withdraw(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">balance</span> <span class=\"operator\">=</span> bank.getCustomer(<span class=\"number\">0</span>).getAccount().getBalance();</span><br><span class=\"line\">        System.out.println(bank.getCustomer(<span class=\"number\">0</span>).getFirstName()+<span class=\"string\">&quot;账户余额为&quot;</span>+balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Bank</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Customer[] customers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> numberOfCustomers;<span class=\"comment\">//客户个数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Bank</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        customers = <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//添加客户</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCustomer</span><span class=\"params\">(String f, String l)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">cust</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(f,l);</span><br><span class=\"line\">        customers[numberOfCustomers++] = cust;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取客户个数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumberOfCustomers</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numberOfCustomers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取制定位置的客户</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Customer <span class=\"title function_\">getCustomer</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; numberOfCustomers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> customers[index];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Account</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(<span class=\"type\">double</span> init_balance)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.balance = init_balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amt)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(amt &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            balance += amt;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;存钱成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amt)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (balance &gt;= amt)&#123;</span><br><span class=\"line\">            balance -= amt;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;取钱成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;余额不足&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Account account;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Customer</span><span class=\"params\">(String f, String l)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.firstName = f;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lastName = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> String <span class=\"title function_\">getFirstName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">public</span> String <span class=\"title function_\">getLastName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAccount</span><span class=\"params\">(Account account)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.account = account;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> Account <span class=\"title function_\">getAccount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> account;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals()\"></a>equals()</h3><p>String、Date 、 File、Io包装都重写了equals()方法, 只比较实体内容是否相等.</p>\n<h3 id=\"基本数据类型包装类\"><a href=\"#基本数据类型包装类\" class=\"headerlink\" title=\"基本数据类型包装类\"></a>基本数据类型包装类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> Integer.parseInt(str1);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(num2+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;true1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> Boolean.parseBoolean(str2);</span><br><span class=\"line\"></span><br><span class=\"line\">sout(b1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Gujm</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/8/21 2:15 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clerk</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">productCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生产</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">produceProduct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (productCount &lt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            productCount++;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;开始生产第&quot;</span> + productCount);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//消费</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">consumeProduct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (productCount &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;开始消费第&quot;</span> + productCount);</span><br><span class=\"line\">            productCount--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Clerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Producer</span><span class=\"params\">(Clerk clerk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clerk = clerk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;开始生产。。&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            clerk.produceProduct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Clerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Customer</span><span class=\"params\">(Clerk clerk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clerk = clerk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;开始消费。。&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            clerk.consumeProduct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProductTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Clerk</span> <span class=\"variable\">clerk</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Clerk</span>();</span><br><span class=\"line\">        <span class=\"type\">Producer</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Producer</span>(clerk);</span><br><span class=\"line\">        p1.setName(<span class=\"string\">&quot;生产者1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(clerk);</span><br><span class=\"line\">        c1.setName(<span class=\"string\">&quot;消费者1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Customer</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(clerk);</span><br><span class=\"line\">        c2.setName(<span class=\"string\">&quot;消费者2&quot;</span>);</span><br><span class=\"line\">        p1.start();</span><br><span class=\"line\">        c1.start();</span><br><span class=\"line\">        c2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h3><h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><h3 id=\"ArrayList常用方法\"><a href=\"#ArrayList常用方法\" class=\"headerlink\" title=\"ArrayList常用方法\"></a>ArrayList常用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增:add(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\">删:remove(<span class=\"type\">int</span> index) remove(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\">改:set(<span class=\"type\">int</span> index, Object ele)</span><br><span class=\"line\"></span><br><span class=\"line\">查:get(<span class=\"type\">int</span> index)</span><br><span class=\"line\"></span><br><span class=\"line\">插:add(<span class=\"type\">int</span> index, Object ele)</span><br><span class=\"line\"></span><br><span class=\"line\">遍历:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Iterator迭代器方式</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Iterator</span> <span class=\"variable\">iterator</span> <span class=\"operator\">=</span> list.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tSystem.out.println(<span class=\"string\">&quot;****&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">遍历:<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">增强<span class=\"keyword\">for</span>循环</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Object obj : list)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tSystem.out.println(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;***&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">遍历:<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">普通<span class=\"keyword\">for</span>循环</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tSystem.out.println(list.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">没听</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/image-20210905000354527.png\" alt=\"image-20210905000354527\"></p>\n"},{"title":"中文学习平台管理平台","date":"2023-02-21T05:54:24.000Z","_content":"\n## 项目问题及总结\n\n中文学习平台的后台完成，对其进行总结\n\n<!-- more -->\n\n### 问题一\n\n项目拆分为较多组件，传参问题\n\n**解决**：想到用redux做状态管理，但是还是较为繁琐，讨论后学习并使用了React-Redux库，实现Redux状态与React组件的无缝集成。\n\n### 问题二\n\n如多个reducer的连接，以及持久化问题\n\n**解决**：最后使用combineReducers函数将两个Reducer函数合并为一个reducer，并通过redux-persist将其持久化。\n\n### 问题三\n\n因为加了权限控制，角色大小等限制，在组件渲染和一些小功能中遇到bug。\n\n**解决**：增设条件，过滤\n\n### 问题四\n\n一些异步问题\n\n**解决**：一部分使用了回调函数，一部分引入async和promise解决\n\n### 问题五\n\n点击取消遇到Form组件不能及时改变问题，\n\n <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n**解决**：对onCancle函数绑定修改某状态为时间戳，传递给Form组件，以此更新Form组件。\n\n用户列表等..\n\n![img1](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台1.jpg)\n\n![img](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台2.jpg)\n","source":"_posts/中文学习平台代码.md","raw":"---\ntitle: 中文学习平台管理平台\ndate: 2023-02-21 13:54:24\ntags:\n  - 前端\n  - React\n  - Javascipt\n  - 组件化编程\n  - combineReducers\n  - redux\n  - 异步数据获取\n  - redux-persist\n  - 样式化组件\n  - 生命周期\n  - 单向数据流\ncategories:\n  - 笔记\n---\n\n## 项目问题及总结\n\n中文学习平台的后台完成，对其进行总结\n\n<!-- more -->\n\n### 问题一\n\n项目拆分为较多组件，传参问题\n\n**解决**：想到用redux做状态管理，但是还是较为繁琐，讨论后学习并使用了React-Redux库，实现Redux状态与React组件的无缝集成。\n\n### 问题二\n\n如多个reducer的连接，以及持久化问题\n\n**解决**：最后使用combineReducers函数将两个Reducer函数合并为一个reducer，并通过redux-persist将其持久化。\n\n### 问题三\n\n因为加了权限控制，角色大小等限制，在组件渲染和一些小功能中遇到bug。\n\n**解决**：增设条件，过滤\n\n### 问题四\n\n一些异步问题\n\n**解决**：一部分使用了回调函数，一部分引入async和promise解决\n\n### 问题五\n\n点击取消遇到Form组件不能及时改变问题，\n\n <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n**解决**：对onCancle函数绑定修改某状态为时间戳，传递给Form组件，以此更新Form组件。\n\n用户列表等..\n\n![img1](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台1.jpg)\n\n![img](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台2.jpg)\n","slug":"中文学习平台代码","published":1,"updated":"2024-01-06T05:01:17.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3x000rq05z8pqd0neg","content":"<h2 id=\"项目问题及总结\"><a href=\"#项目问题及总结\" class=\"headerlink\" title=\"项目问题及总结\"></a>项目问题及总结</h2><p>中文学习平台的后台完成，对其进行总结</p>\n<span id=\"more\"></span>\n\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>项目拆分为较多组件，传参问题</p>\n<p><strong>解决</strong>：想到用redux做状态管理，但是还是较为繁琐，讨论后学习并使用了React-Redux库，实现Redux状态与React组件的无缝集成。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>如多个reducer的连接，以及持久化问题</p>\n<p><strong>解决</strong>：最后使用combineReducers函数将两个Reducer函数合并为一个reducer，并通过redux-persist将其持久化。</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>因为加了权限控制，角色大小等限制，在组件渲染和一些小功能中遇到bug。</p>\n<p><strong>解决</strong>：增设条件，过滤</p>\n<h3 id=\"问题四\"><a href=\"#问题四\" class=\"headerlink\" title=\"问题四\"></a>问题四</h3><p>一些异步问题</p>\n<p><strong>解决</strong>：一部分使用了回调函数，一部分引入async和promise解决</p>\n<h3 id=\"问题五\"><a href=\"#问题五\" class=\"headerlink\" title=\"问题五\"></a>问题五</h3><p>点击取消遇到Form组件不能及时改变问题，</p>\n <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p><strong>解决</strong>：对onCancle函数绑定修改某状态为时间戳，传递给Form组件，以此更新Form组件。</p>\n<p>用户列表等..</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-%E4%B8%AD%E6%96%87%E5%B9%B3%E5%8F%B01.jpg\" alt=\"img1\"></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-%E4%B8%AD%E6%96%87%E5%B9%B3%E5%8F%B02.jpg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"项目问题及总结\"><a href=\"#项目问题及总结\" class=\"headerlink\" title=\"项目问题及总结\"></a>项目问题及总结</h2><p>中文学习平台的后台完成，对其进行总结</p>","more":"<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>项目拆分为较多组件，传参问题</p>\n<p><strong>解决</strong>：想到用redux做状态管理，但是还是较为繁琐，讨论后学习并使用了React-Redux库，实现Redux状态与React组件的无缝集成。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>如多个reducer的连接，以及持久化问题</p>\n<p><strong>解决</strong>：最后使用combineReducers函数将两个Reducer函数合并为一个reducer，并通过redux-persist将其持久化。</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>因为加了权限控制，角色大小等限制，在组件渲染和一些小功能中遇到bug。</p>\n<p><strong>解决</strong>：增设条件，过滤</p>\n<h3 id=\"问题四\"><a href=\"#问题四\" class=\"headerlink\" title=\"问题四\"></a>问题四</h3><p>一些异步问题</p>\n<p><strong>解决</strong>：一部分使用了回调函数，一部分引入async和promise解决</p>\n<h3 id=\"问题五\"><a href=\"#问题五\" class=\"headerlink\" title=\"问题五\"></a>问题五</h3><p>点击取消遇到Form组件不能及时改变问题，</p>\n <img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-中文平台3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p><strong>解决</strong>：对onCancle函数绑定修改某状态为时间戳，传递给Form组件，以此更新Form组件。</p>\n<p>用户列表等..</p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-%E4%B8%AD%E6%96%87%E5%B9%B3%E5%8F%B01.jpg\" alt=\"img1\"></p>\n<p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/img-%E4%B8%AD%E6%96%87%E5%B9%B3%E5%8F%B02.jpg\" alt=\"img\"></p>"},{"title":"allzonehealth前端","date":"2023-04-27T11:50:12.000Z","_content":"\n### 跨域问题\n\n记录一次跨域问题，找了1个小时，原来与BaseUrl有关\n\n<!-- more -->\n\n这是放在src下的`setupProxy.js`文件,该路径下会自动识别\n\n```js\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\nmodule.exports = function (app) {\n  app.use(\n    '/api',\n    createProxyMiddleware({\n      target: 'http://localhost:8888',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '', \n      },\n    })\n  );\n};\n```\n\n那么axios的配置就应该是\n\n```js\naxios.defaults.baseURL = '/api/'\n```\n\n### 邮箱@之前的前缀（不包括@）\n\n```react\n const validateEmail = async (_, value) => {\n   const emailPrefixRegex = /^(?![_.])[a-zA-Z0-9._]+(?<![_.])$/;\n   if (value && emailPrefixRegex.test(value)) {\n      return Promise.resolve(); // 验证通过\n   } else {\n      return Promise.reject('请输入正确的邮箱前缀'); // 验证失败，返回错误信息\n   }\n };\n```\n\n### react开发简洁开发\n\n``` react\nconst onFinish = async (values) => {\n  console.log(values);\n  //对象字典，以便更简洁地构造 userData\n  const userDataBuilders = {\n    mobile: (values) => new URLSearchParams({\n      mobile: values.mobile,\n      code: values.code,\n      password: values.password,\n      autologin: values.remember,\n    }),\n    email: (values) => new URLSearchParams({\n      email: `${values.emailPrefix}${values.emailSuffix}`,\n      code: values.code,\n      password: values.password,\n      autologin: values.remember,\n    }),\n  };\n```\n\n","source":"_posts/全域健康react.md","raw":"---\ntitle: allzonehealth前端\ndate: 2023-04-27 19:50:12\ntags:\n- react\n- 前端\n- 字典\n- 表单格式\n- 正则\n- 跨域\ncategories: \n- 笔记\n---\n\n### 跨域问题\n\n记录一次跨域问题，找了1个小时，原来与BaseUrl有关\n\n<!-- more -->\n\n这是放在src下的`setupProxy.js`文件,该路径下会自动识别\n\n```js\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\nmodule.exports = function (app) {\n  app.use(\n    '/api',\n    createProxyMiddleware({\n      target: 'http://localhost:8888',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '', \n      },\n    })\n  );\n};\n```\n\n那么axios的配置就应该是\n\n```js\naxios.defaults.baseURL = '/api/'\n```\n\n### 邮箱@之前的前缀（不包括@）\n\n```react\n const validateEmail = async (_, value) => {\n   const emailPrefixRegex = /^(?![_.])[a-zA-Z0-9._]+(?<![_.])$/;\n   if (value && emailPrefixRegex.test(value)) {\n      return Promise.resolve(); // 验证通过\n   } else {\n      return Promise.reject('请输入正确的邮箱前缀'); // 验证失败，返回错误信息\n   }\n };\n```\n\n### react开发简洁开发\n\n``` react\nconst onFinish = async (values) => {\n  console.log(values);\n  //对象字典，以便更简洁地构造 userData\n  const userDataBuilders = {\n    mobile: (values) => new URLSearchParams({\n      mobile: values.mobile,\n      code: values.code,\n      password: values.password,\n      autologin: values.remember,\n    }),\n    email: (values) => new URLSearchParams({\n      email: `${values.emailPrefix}${values.emailSuffix}`,\n      code: values.code,\n      password: values.password,\n      autologin: values.remember,\n    }),\n  };\n```\n\n","slug":"全域健康react","published":1,"updated":"2023-12-05T05:26:53.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x3y000sq05z3gyiec0z","content":"<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><p>记录一次跨域问题，找了1个小时，原来与BaseUrl有关</p>\n<span id=\"more\"></span>\n\n<p>这是放在src下的<code>setupProxy.js</code>文件,该路径下会自动识别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; createProxyMiddleware &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">  app.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;/api&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">createProxyMiddleware</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, </span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>那么axios的配置就应该是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">defaults</span>.<span class=\"property\">baseURL</span> = <span class=\"string\">&#x27;/api/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"邮箱-之前的前缀（不包括-）\"><a href=\"#邮箱-之前的前缀（不包括-）\" class=\"headerlink\" title=\"邮箱@之前的前缀（不包括@）\"></a>邮箱@之前的前缀（不包括@）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const validateEmail = async (_, value) =&gt; &#123;</span><br><span class=\"line\">  const emailPrefixRegex = /^(?![_.])[a-zA-Z0-9._]+(?&lt;![_.])$/;</span><br><span class=\"line\">  if (value &amp;&amp; emailPrefixRegex.test(value)) &#123;</span><br><span class=\"line\">     return Promise.resolve(); // 验证通过</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">     return Promise.reject(&#x27;请输入正确的邮箱前缀&#x27;); // 验证失败，返回错误信息</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"react开发简洁开发\"><a href=\"#react开发简洁开发\" class=\"headerlink\" title=\"react开发简洁开发\"></a>react开发简洁开发</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const onFinish = async (values) =&gt; &#123;</span><br><span class=\"line\">  console.log(values);</span><br><span class=\"line\">  //对象字典，以便更简洁地构造 userData</span><br><span class=\"line\">  const userDataBuilders = &#123;</span><br><span class=\"line\">    mobile: (values) =&gt; new URLSearchParams(&#123;</span><br><span class=\"line\">      mobile: values.mobile,</span><br><span class=\"line\">      code: values.code,</span><br><span class=\"line\">      password: values.password,</span><br><span class=\"line\">      autologin: values.remember,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    email: (values) =&gt; new URLSearchParams(&#123;</span><br><span class=\"line\">      email: `$&#123;values.emailPrefix&#125;$&#123;values.emailSuffix&#125;`,</span><br><span class=\"line\">      code: values.code,</span><br><span class=\"line\">      password: values.password,</span><br><span class=\"line\">      autologin: values.remember,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><p>记录一次跨域问题，找了1个小时，原来与BaseUrl有关</p>","more":"<p>这是放在src下的<code>setupProxy.js</code>文件,该路径下会自动识别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; createProxyMiddleware &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">  app.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;/api&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">createProxyMiddleware</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:8888&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, </span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>那么axios的配置就应该是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">defaults</span>.<span class=\"property\">baseURL</span> = <span class=\"string\">&#x27;/api/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"邮箱-之前的前缀（不包括-）\"><a href=\"#邮箱-之前的前缀（不包括-）\" class=\"headerlink\" title=\"邮箱@之前的前缀（不包括@）\"></a>邮箱@之前的前缀（不包括@）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const validateEmail = async (_, value) =&gt; &#123;</span><br><span class=\"line\">  const emailPrefixRegex = /^(?![_.])[a-zA-Z0-9._]+(?&lt;![_.])$/;</span><br><span class=\"line\">  if (value &amp;&amp; emailPrefixRegex.test(value)) &#123;</span><br><span class=\"line\">     return Promise.resolve(); // 验证通过</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">     return Promise.reject(&#x27;请输入正确的邮箱前缀&#x27;); // 验证失败，返回错误信息</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"react开发简洁开发\"><a href=\"#react开发简洁开发\" class=\"headerlink\" title=\"react开发简洁开发\"></a>react开发简洁开发</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const onFinish = async (values) =&gt; &#123;</span><br><span class=\"line\">  console.log(values);</span><br><span class=\"line\">  //对象字典，以便更简洁地构造 userData</span><br><span class=\"line\">  const userDataBuilders = &#123;</span><br><span class=\"line\">    mobile: (values) =&gt; new URLSearchParams(&#123;</span><br><span class=\"line\">      mobile: values.mobile,</span><br><span class=\"line\">      code: values.code,</span><br><span class=\"line\">      password: values.password,</span><br><span class=\"line\">      autologin: values.remember,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    email: (values) =&gt; new URLSearchParams(&#123;</span><br><span class=\"line\">      email: `$&#123;values.emailPrefix&#125;$&#123;values.emailSuffix&#125;`,</span><br><span class=\"line\">      code: values.code,</span><br><span class=\"line\">      password: values.password,</span><br><span class=\"line\">      autologin: values.remember,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>"},{"title":"python批量提取整理单词","date":"2023-03-29T13:18:34.000Z","_content":"\n> **提取单词**\n\n本篇代码笔记介绍了如何从文件中提取单词并按字典序排序。通过使用 Python 的 re 模块和一些字符串处理函数，可以将文件中的单词提取出来，然后去重、排序，最终得到一个按字典序排序的单词列表。本文提供了一个完整的代码示例，可以直接使用或参考。\n<!-- more -->\n```python\nimport re\ndef extract_words_and_sort_from_file(file_path):\n    # 打开并读取文件内容\n    with open(file_path, 'r', encoding='utf-8') as file:\n        content = file.read()\n        words = re.findall(r'^\\s*([a-zA-Z, ]+)$', content, flags=re.MULTILINE)\n        words = ''.join(words)\n        # 将逗号替换为空格，方便后续提取单词\n        words = words.replace(',', ' ')\n        words = re.findall(r'\\b[a-zA-Z]+\\b', words)\n        words = [word.lower() for word in words]\n        # 对单词列表去重并排序\n        words = sorted(set(words))\n        word_count = len(words)\n        # 将单词列表连接为一个字符串\n        return ', '.join(words), word_count\n\nfile_path = '../英语/顽固词汇.md'\nresult, word_count = extract_words_and_sort_from_file(file_path)\nprint(\"Sorted words:\", result)\nprint(\"Word count:\", word_count)\n```\n","source":"_posts/python工具-提取单词.md","raw":"---\ntitle: python批量提取整理单词\ndate: 2023-03-29 21:18:34\ntags:\n- 考研英语\n- python\n- 正则表达式\ncategories: \n- 笔记\n---\n\n> **提取单词**\n\n本篇代码笔记介绍了如何从文件中提取单词并按字典序排序。通过使用 Python 的 re 模块和一些字符串处理函数，可以将文件中的单词提取出来，然后去重、排序，最终得到一个按字典序排序的单词列表。本文提供了一个完整的代码示例，可以直接使用或参考。\n<!-- more -->\n```python\nimport re\ndef extract_words_and_sort_from_file(file_path):\n    # 打开并读取文件内容\n    with open(file_path, 'r', encoding='utf-8') as file:\n        content = file.read()\n        words = re.findall(r'^\\s*([a-zA-Z, ]+)$', content, flags=re.MULTILINE)\n        words = ''.join(words)\n        # 将逗号替换为空格，方便后续提取单词\n        words = words.replace(',', ' ')\n        words = re.findall(r'\\b[a-zA-Z]+\\b', words)\n        words = [word.lower() for word in words]\n        # 对单词列表去重并排序\n        words = sorted(set(words))\n        word_count = len(words)\n        # 将单词列表连接为一个字符串\n        return ', '.join(words), word_count\n\nfile_path = '../英语/顽固词汇.md'\nresult, word_count = extract_words_and_sort_from_file(file_path)\nprint(\"Sorted words:\", result)\nprint(\"Word count:\", word_count)\n```\n","slug":"python工具-提取单词","published":1,"updated":"2023-04-19T10:49:56.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x40000wq05z02rz8bho","content":"<blockquote>\n<p><strong>提取单词</strong></p>\n</blockquote>\n<p>本篇代码笔记介绍了如何从文件中提取单词并按字典序排序。通过使用 Python 的 re 模块和一些字符串处理函数，可以将文件中的单词提取出来，然后去重、排序，最终得到一个按字典序排序的单词列表。本文提供了一个完整的代码示例，可以直接使用或参考。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">extract_words_and_sort_from_file</span>(<span class=\"params\">file_path</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 打开并读取文件内容</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_path, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        content = file.read()</span><br><span class=\"line\">        words = re.findall(<span class=\"string\">r&#x27;^\\s*([a-zA-Z, ]+)$&#x27;</span>, content, flags=re.MULTILINE)</span><br><span class=\"line\">        words = <span class=\"string\">&#x27;&#x27;</span>.join(words)</span><br><span class=\"line\">        <span class=\"comment\"># 将逗号替换为空格，方便后续提取单词</span></span><br><span class=\"line\">        words = words.replace(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        words = re.findall(<span class=\"string\">r&#x27;\\b[a-zA-Z]+\\b&#x27;</span>, words)</span><br><span class=\"line\">        words = [word.lower() <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words]</span><br><span class=\"line\">        <span class=\"comment\"># 对单词列表去重并排序</span></span><br><span class=\"line\">        words = <span class=\"built_in\">sorted</span>(<span class=\"built_in\">set</span>(words))</span><br><span class=\"line\">        word_count = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">        <span class=\"comment\"># 将单词列表连接为一个字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;, &#x27;</span>.join(words), word_count</span><br><span class=\"line\"></span><br><span class=\"line\">file_path = <span class=\"string\">&#x27;../英语/顽固词汇.md&#x27;</span></span><br><span class=\"line\">result, word_count = extract_words_and_sort_from_file(file_path)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Sorted words:&quot;</span>, result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Word count:&quot;</span>, word_count)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><strong>提取单词</strong></p>\n</blockquote>\n<p>本篇代码笔记介绍了如何从文件中提取单词并按字典序排序。通过使用 Python 的 re 模块和一些字符串处理函数，可以将文件中的单词提取出来，然后去重、排序，最终得到一个按字典序排序的单词列表。本文提供了一个完整的代码示例，可以直接使用或参考。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">extract_words_and_sort_from_file</span>(<span class=\"params\">file_path</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 打开并读取文件内容</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_path, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        content = file.read()</span><br><span class=\"line\">        words = re.findall(<span class=\"string\">r&#x27;^\\s*([a-zA-Z, ]+)$&#x27;</span>, content, flags=re.MULTILINE)</span><br><span class=\"line\">        words = <span class=\"string\">&#x27;&#x27;</span>.join(words)</span><br><span class=\"line\">        <span class=\"comment\"># 将逗号替换为空格，方便后续提取单词</span></span><br><span class=\"line\">        words = words.replace(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        words = re.findall(<span class=\"string\">r&#x27;\\b[a-zA-Z]+\\b&#x27;</span>, words)</span><br><span class=\"line\">        words = [word.lower() <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words]</span><br><span class=\"line\">        <span class=\"comment\"># 对单词列表去重并排序</span></span><br><span class=\"line\">        words = <span class=\"built_in\">sorted</span>(<span class=\"built_in\">set</span>(words))</span><br><span class=\"line\">        word_count = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">        <span class=\"comment\"># 将单词列表连接为一个字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;, &#x27;</span>.join(words), word_count</span><br><span class=\"line\"></span><br><span class=\"line\">file_path = <span class=\"string\">&#x27;../英语/顽固词汇.md&#x27;</span></span><br><span class=\"line\">result, word_count = extract_words_and_sort_from_file(file_path)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Sorted words:&quot;</span>, result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Word count:&quot;</span>, word_count)</span><br></pre></td></tr></table></figure>"},{"title":"几天的Three.js 学习记录（第一篇章）","date":"2023-12-05T03:10:12.000Z","_content":"\n### 1. Three.js 文件包下载和目录简介\n\n下载 Three.js 文件包，解压并查看目录结构。示例代码：\n\n```shell\n# 下载 Three.js 文件包\nwget https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\n# 解压文件\nunzip three.min.js\n# 查看目录结构\nls -l\n```\n\n### 2. 学习环境 — 编辑器和本地静态服务\n\n选择合适的代码编辑器（如Visual Studio Code）和本地静态服务器（如Live Server插件）搭建 Three.js 学习环境。\n\n### 3. 开发和学习环境，引入 Three.js 库\n\n在 HTML 文件中引入 Three.js 库，并创建基本的 Three.js 场景。示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Three.js Scene</title>\n  <script src=\"path/to/three.min.js\"></script>\n</head>\n<body>\n  <script>\n    // 创建 Three.js 场景\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n  </script>\n</body>\n</html>\n```\n\n### 4. 第一个 3D 案例 — 创建 3D 场景\n\n创建最简单的 Three.js 3D 场景，包括场景、相机和渲染器，并渲染一个基本几何体。示例代码：\n\n```javascript\n// 创建 Three.js 场景\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// 创建一个立方体并添加到场景中\nconst geometry = new THREE.BoxGeometry();\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\nconst cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n\ncamera.position.z = 5;\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  cube.rotation.x += 0.01;\n  cube.rotation.y += 0.01;\n  renderer.render(scene, camera);\n}\nanimate();\n```\n\n### 5. 第一个 3D 案例 — 透视投影相机\n\n学习如何使用透视投影相机创建 Three.js 场景。示例代码：\n\n```javascript\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n```\n\n### 6. 第一个 3D 案例 — 渲染器\n\n创建 Three.js 渲染器，并将其绑定到 HTML 元素上。示例代码：\n\n\n```javascript\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n\n### 7. Three.js 三维坐标系 — 加强对三维空间的认识\n\n探索 Three.js 的三维坐标系，加深对三维空间的理解。\n\n### 8. 光源对物体表面的影响\n\n学习如何使用光源在 Three.js 中影响物体的表面。\n\n### 9. 相机控件轨道控制器 OrbitControls\n\n引入 OrbitControls，让用户控制相机以便更好地观察场景。\n\n### 10. 平行光与环境光\n\n了解平行光和环境光在 Three.js 中的作用。\n\n### 11. 动画渲染循环\n\n使用 `requestAnimationFrame` 创建 Three.js 动画渲染循环。示例代码：\n\n```javascript\nfunction animate() {\n  requestAnimationFrame(animate);\n  // 在此处更新场景对象或相机\n  cube.rotation.x += 0.01;\n  cube.rotation.y += 0.01;\n  renderer.render(scene, camera);\n}\nanimate();\n```\n\n### 12. Canvas 画布布局和全屏\n\n学习如何设置 Three.js Canvas 画布布局并实现全屏显示效果。示例代码：\n\n```javascript\n// 设置画布尺寸与窗口一致\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\n// 监听窗口大小变化事件\nwindow.addEventListener('resize', function () {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  renderer.setSize(width, height);\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n});\n```\n\n### 13. Stats 查看 Three.js 渲染帧率\n\n使用 Stats.js 监控 Three.js 渲染性能。示例代码：\n\n```javascript\nconst stats = new Stats();\ndocument.body.appendChild(stats.dom);\nfunction animate() {\n  requestAnimationFrame(animate);\n  stats.update();\n  // 其他渲染代码...\n}\nanimate();\n```\n\n### 14. 阵列立方体和相机适配体验\n\n创建多个立方体并调整相机以适配整个场景。示例代码：\n\n```javascript\n// 生成多个立方体\nfor (let i = 0; i < 100; i++) {\n  const geometry = new THREE.BoxGeometry();\n  const material = new THREE.MeshBasicMaterial({ color: Math.random() * 0xffffff });\n  const cube = new THREE.Mesh(geometry, material);\n  cube.position.set(Math.random() * 200 - 100, Math.random() * 200 - 100, Math.random() * 200 - 100);\n  scene.add(cube);\n}\n\n// 调整相机以适配整个场景\nconst box = new THREE.Box3().setFromObject(scene);\nconst center = box.getCenter(new THREE.Vector3());\nconst size = box.getSize(new THREE.Vector3());\ncamera.position.copy(center);\ncamera.position.x += size.x * 1.2;\ncamera.position.y += size.y * 1.2;\ncamera.position.z += size.z * 1.2;\n```\n\n### 15. Three.js 常见简单几何体简介\n\n了解和使用 Three.js 中常见的简单几何体，例如球体、立方体和圆柱体等。示例代码：\n\n```javascript\nconst geometry = new THREE.SphereGeometry(50, 32, 32); // 创建一个球体\nconst material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // 创建材质\nconst sphere = new THREE.Mesh(geometry, material); // 创建网格对象\nscene.add(sphere); // 添加到场景中\n```\n\n### 16. 高光网格材质 MeshPhongMaterial\n\n了解并使用 Three.js 中的高光网格材质 `MeshPhongMaterial`。示例代码：\n\n```\njavascriptCopy code\nconst material = new THREE.MeshPhongMaterial({ color: 0xff0000 }); // 创建高光网格材质\nconst mesh = new THREE.Mesh(geometry, material); // 创建网格对象\nscene.add(mesh); // 添加到场景中\n```\n\n### 17. WebGL 渲染器设置(锯齿模糊、背景颜色)\n\n了解并设置 WebGL 渲染器的属性，如锯齿模糊和背景颜色。示例代码：\n\n```javascript\nrenderer.setPixelRatio(window.devicePixelRatio); // 设置像素比\nrenderer.setClearColor(0xeeeeee, 1); // 设置背景颜色\nrenderer.antialias = true; // 启用抗锯齿\n```\n\n### 18. gui.js 库(可视化改变三维场景)\n\n使用 `dat.GUI` 库创建可视化控制面板，控制 Three.js 场景中的参数。示例代码：\n\n```javascript\nconst gui = new dat.GUI(); // 创建 GUI\nconst params = { color: 0xff0000 }; // 定义参数\ngui.addColor(params, 'color').onChange((value) => {\n  // 当颜色参数变化时执行的操作\n  material.color.set(value);\n});\n```\n","source":"_posts/几天的Three.js学习.md","raw":"---\ntitle: 几天的Three.js 学习记录（第一篇章）\ndate: 2023-12-5 11:10:12\ntags:\n- Three.js\n- JavaScript\ncategories: \n- 学习笔记\n---\n\n### 1. Three.js 文件包下载和目录简介\n\n下载 Three.js 文件包，解压并查看目录结构。示例代码：\n\n```shell\n# 下载 Three.js 文件包\nwget https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\n# 解压文件\nunzip three.min.js\n# 查看目录结构\nls -l\n```\n\n### 2. 学习环境 — 编辑器和本地静态服务\n\n选择合适的代码编辑器（如Visual Studio Code）和本地静态服务器（如Live Server插件）搭建 Three.js 学习环境。\n\n### 3. 开发和学习环境，引入 Three.js 库\n\n在 HTML 文件中引入 Three.js 库，并创建基本的 Three.js 场景。示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Three.js Scene</title>\n  <script src=\"path/to/three.min.js\"></script>\n</head>\n<body>\n  <script>\n    // 创建 Three.js 场景\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n  </script>\n</body>\n</html>\n```\n\n### 4. 第一个 3D 案例 — 创建 3D 场景\n\n创建最简单的 Three.js 3D 场景，包括场景、相机和渲染器，并渲染一个基本几何体。示例代码：\n\n```javascript\n// 创建 Three.js 场景\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// 创建一个立方体并添加到场景中\nconst geometry = new THREE.BoxGeometry();\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\nconst cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n\ncamera.position.z = 5;\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  cube.rotation.x += 0.01;\n  cube.rotation.y += 0.01;\n  renderer.render(scene, camera);\n}\nanimate();\n```\n\n### 5. 第一个 3D 案例 — 透视投影相机\n\n学习如何使用透视投影相机创建 Three.js 场景。示例代码：\n\n```javascript\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n```\n\n### 6. 第一个 3D 案例 — 渲染器\n\n创建 Three.js 渲染器，并将其绑定到 HTML 元素上。示例代码：\n\n\n```javascript\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n\n### 7. Three.js 三维坐标系 — 加强对三维空间的认识\n\n探索 Three.js 的三维坐标系，加深对三维空间的理解。\n\n### 8. 光源对物体表面的影响\n\n学习如何使用光源在 Three.js 中影响物体的表面。\n\n### 9. 相机控件轨道控制器 OrbitControls\n\n引入 OrbitControls，让用户控制相机以便更好地观察场景。\n\n### 10. 平行光与环境光\n\n了解平行光和环境光在 Three.js 中的作用。\n\n### 11. 动画渲染循环\n\n使用 `requestAnimationFrame` 创建 Three.js 动画渲染循环。示例代码：\n\n```javascript\nfunction animate() {\n  requestAnimationFrame(animate);\n  // 在此处更新场景对象或相机\n  cube.rotation.x += 0.01;\n  cube.rotation.y += 0.01;\n  renderer.render(scene, camera);\n}\nanimate();\n```\n\n### 12. Canvas 画布布局和全屏\n\n学习如何设置 Three.js Canvas 画布布局并实现全屏显示效果。示例代码：\n\n```javascript\n// 设置画布尺寸与窗口一致\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\n// 监听窗口大小变化事件\nwindow.addEventListener('resize', function () {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  renderer.setSize(width, height);\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n});\n```\n\n### 13. Stats 查看 Three.js 渲染帧率\n\n使用 Stats.js 监控 Three.js 渲染性能。示例代码：\n\n```javascript\nconst stats = new Stats();\ndocument.body.appendChild(stats.dom);\nfunction animate() {\n  requestAnimationFrame(animate);\n  stats.update();\n  // 其他渲染代码...\n}\nanimate();\n```\n\n### 14. 阵列立方体和相机适配体验\n\n创建多个立方体并调整相机以适配整个场景。示例代码：\n\n```javascript\n// 生成多个立方体\nfor (let i = 0; i < 100; i++) {\n  const geometry = new THREE.BoxGeometry();\n  const material = new THREE.MeshBasicMaterial({ color: Math.random() * 0xffffff });\n  const cube = new THREE.Mesh(geometry, material);\n  cube.position.set(Math.random() * 200 - 100, Math.random() * 200 - 100, Math.random() * 200 - 100);\n  scene.add(cube);\n}\n\n// 调整相机以适配整个场景\nconst box = new THREE.Box3().setFromObject(scene);\nconst center = box.getCenter(new THREE.Vector3());\nconst size = box.getSize(new THREE.Vector3());\ncamera.position.copy(center);\ncamera.position.x += size.x * 1.2;\ncamera.position.y += size.y * 1.2;\ncamera.position.z += size.z * 1.2;\n```\n\n### 15. Three.js 常见简单几何体简介\n\n了解和使用 Three.js 中常见的简单几何体，例如球体、立方体和圆柱体等。示例代码：\n\n```javascript\nconst geometry = new THREE.SphereGeometry(50, 32, 32); // 创建一个球体\nconst material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // 创建材质\nconst sphere = new THREE.Mesh(geometry, material); // 创建网格对象\nscene.add(sphere); // 添加到场景中\n```\n\n### 16. 高光网格材质 MeshPhongMaterial\n\n了解并使用 Three.js 中的高光网格材质 `MeshPhongMaterial`。示例代码：\n\n```\njavascriptCopy code\nconst material = new THREE.MeshPhongMaterial({ color: 0xff0000 }); // 创建高光网格材质\nconst mesh = new THREE.Mesh(geometry, material); // 创建网格对象\nscene.add(mesh); // 添加到场景中\n```\n\n### 17. WebGL 渲染器设置(锯齿模糊、背景颜色)\n\n了解并设置 WebGL 渲染器的属性，如锯齿模糊和背景颜色。示例代码：\n\n```javascript\nrenderer.setPixelRatio(window.devicePixelRatio); // 设置像素比\nrenderer.setClearColor(0xeeeeee, 1); // 设置背景颜色\nrenderer.antialias = true; // 启用抗锯齿\n```\n\n### 18. gui.js 库(可视化改变三维场景)\n\n使用 `dat.GUI` 库创建可视化控制面板，控制 Three.js 场景中的参数。示例代码：\n\n```javascript\nconst gui = new dat.GUI(); // 创建 GUI\nconst params = { color: 0xff0000 }; // 定义参数\ngui.addColor(params, 'color').onChange((value) => {\n  // 当颜色参数变化时执行的操作\n  material.color.set(value);\n});\n```\n","slug":"几天的Three.js学习","published":1,"updated":"2023-12-05T03:23:48.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x41000zq05z1k5d0dyl","content":"<h3 id=\"1-Three-js-文件包下载和目录简介\"><a href=\"#1-Three-js-文件包下载和目录简介\" class=\"headerlink\" title=\"1. Three.js 文件包下载和目录简介\"></a>1. Three.js 文件包下载和目录简介</h3><p>下载 Three.js 文件包，解压并查看目录结构。示例代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载 Three.js 文件包</span></span><br><span class=\"line\">wget https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压文件</span></span><br><span class=\"line\">unzip three.min.js</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看目录结构</span></span><br><span class=\"line\">ls -l</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-学习环境-—-编辑器和本地静态服务\"><a href=\"#2-学习环境-—-编辑器和本地静态服务\" class=\"headerlink\" title=\"2. 学习环境 — 编辑器和本地静态服务\"></a>2. 学习环境 — 编辑器和本地静态服务</h3><p>选择合适的代码编辑器（如Visual Studio Code）和本地静态服务器（如Live Server插件）搭建 Three.js 学习环境。</p>\n<h3 id=\"3-开发和学习环境，引入-Three-js-库\"><a href=\"#3-开发和学习环境，引入-Three-js-库\" class=\"headerlink\" title=\"3. 开发和学习环境，引入 Three.js 库\"></a>3. 开发和学习环境，引入 Three.js 库</h3><p>在 HTML 文件中引入 Three.js 库，并创建基本的 Three.js 场景。示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My Three.js Scene<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;path/to/three.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 创建 Three.js 场景</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-第一个-3D-案例-—-创建-3D-场景\"><a href=\"#4-第一个-3D-案例-—-创建-3D-场景\" class=\"headerlink\" title=\"4. 第一个 3D 案例 — 创建 3D 场景\"></a>4. 第一个 3D 案例 — 创建 3D 场景</h3><p>创建最简单的 Three.js 3D 场景，包括场景、相机和渲染器，并渲染一个基本几何体。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Three.js 场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个立方体并添加到场景中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0x00ff00</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material);</span><br><span class=\"line\">scene.<span class=\"title function_\">add</span>(cube);</span><br><span class=\"line\"></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">z</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">x</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">y</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  renderer.<span class=\"title function_\">render</span>(scene, camera);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">animate</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-第一个-3D-案例-—-透视投影相机\"><a href=\"#5-第一个-3D-案例-—-透视投影相机\" class=\"headerlink\" title=\"5. 第一个 3D 案例 — 透视投影相机\"></a>5. 第一个 3D 案例 — 透视投影相机</h3><p>学习如何使用透视投影相机创建 Three.js 场景。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-第一个-3D-案例-—-渲染器\"><a href=\"#6-第一个-3D-案例-—-渲染器\" class=\"headerlink\" title=\"6. 第一个 3D 案例 — 渲染器\"></a>6. 第一个 3D 案例 — 渲染器</h3><p>创建 Three.js 渲染器，并将其绑定到 HTML 元素上。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Three-js-三维坐标系-—-加强对三维空间的认识\"><a href=\"#7-Three-js-三维坐标系-—-加强对三维空间的认识\" class=\"headerlink\" title=\"7. Three.js 三维坐标系 — 加强对三维空间的认识\"></a>7. Three.js 三维坐标系 — 加强对三维空间的认识</h3><p>探索 Three.js 的三维坐标系，加深对三维空间的理解。</p>\n<h3 id=\"8-光源对物体表面的影响\"><a href=\"#8-光源对物体表面的影响\" class=\"headerlink\" title=\"8. 光源对物体表面的影响\"></a>8. 光源对物体表面的影响</h3><p>学习如何使用光源在 Three.js 中影响物体的表面。</p>\n<h3 id=\"9-相机控件轨道控制器-OrbitControls\"><a href=\"#9-相机控件轨道控制器-OrbitControls\" class=\"headerlink\" title=\"9. 相机控件轨道控制器 OrbitControls\"></a>9. 相机控件轨道控制器 OrbitControls</h3><p>引入 OrbitControls，让用户控制相机以便更好地观察场景。</p>\n<h3 id=\"10-平行光与环境光\"><a href=\"#10-平行光与环境光\" class=\"headerlink\" title=\"10. 平行光与环境光\"></a>10. 平行光与环境光</h3><p>了解平行光和环境光在 Three.js 中的作用。</p>\n<h3 id=\"11-动画渲染循环\"><a href=\"#11-动画渲染循环\" class=\"headerlink\" title=\"11. 动画渲染循环\"></a>11. 动画渲染循环</h3><p>使用 <code>requestAnimationFrame</code> 创建 Three.js 动画渲染循环。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">  <span class=\"comment\">// 在此处更新场景对象或相机</span></span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">x</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">y</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  renderer.<span class=\"title function_\">render</span>(scene, camera);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">animate</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-Canvas-画布布局和全屏\"><a href=\"#12-Canvas-画布布局和全屏\" class=\"headerlink\" title=\"12. Canvas 画布布局和全屏\"></a>12. Canvas 画布布局和全屏</h3><p>学习如何设置 Three.js Canvas 画布布局并实现全屏显示效果。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置画布尺寸与窗口一致</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听窗口大小变化事件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> width = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> height = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\">  renderer.<span class=\"title function_\">setSize</span>(width, height);</span><br><span class=\"line\">  camera.<span class=\"property\">aspect</span> = width / height;</span><br><span class=\"line\">  camera.<span class=\"title function_\">updateProjectionMatrix</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-Stats-查看-Three-js-渲染帧率\"><a href=\"#13-Stats-查看-Three-js-渲染帧率\" class=\"headerlink\" title=\"13. Stats 查看 Three.js 渲染帧率\"></a>13. Stats 查看 Three.js 渲染帧率</h3><p>使用 Stats.js 监控 Three.js 渲染性能。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stats = <span class=\"keyword\">new</span> <span class=\"title class_\">Stats</span>();</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(stats.<span class=\"property\">dom</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">  stats.<span class=\"title function_\">update</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 其他渲染代码...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">animate</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-阵列立方体和相机适配体验\"><a href=\"#14-阵列立方体和相机适配体验\" class=\"headerlink\" title=\"14. 阵列立方体和相机适配体验\"></a>14. 阵列立方体和相机适配体验</h3><p>创建多个立方体并调整相机以适配整个场景。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成多个立方体</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">0xffffff</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material);</span><br><span class=\"line\">  cube.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">200</span> - <span class=\"number\">100</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">200</span> - <span class=\"number\">100</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">200</span> - <span class=\"number\">100</span>);</span><br><span class=\"line\">  scene.<span class=\"title function_\">add</span>(cube);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调整相机以适配整个场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> box = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Box3</span>().<span class=\"title function_\">setFromObject</span>(scene);</span><br><span class=\"line\"><span class=\"keyword\">const</span> center = box.<span class=\"title function_\">getCenter</span>(<span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Vector3</span>());</span><br><span class=\"line\"><span class=\"keyword\">const</span> size = box.<span class=\"title function_\">getSize</span>(<span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Vector3</span>());</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"title function_\">copy</span>(center);</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">x</span> += size.<span class=\"property\">x</span> * <span class=\"number\">1.2</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">y</span> += size.<span class=\"property\">y</span> * <span class=\"number\">1.2</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">z</span> += size.<span class=\"property\">z</span> * <span class=\"number\">1.2</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-Three-js-常见简单几何体简介\"><a href=\"#15-Three-js-常见简单几何体简介\" class=\"headerlink\" title=\"15. Three.js 常见简单几何体简介\"></a>15. Three.js 常见简单几何体简介</h3><p>了解和使用 Three.js 中常见的简单几何体，例如球体、立方体和圆柱体等。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">SphereGeometry</span>(<span class=\"number\">50</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>); <span class=\"comment\">// 创建一个球体</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span> &#125;); <span class=\"comment\">// 创建材质</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sphere = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material); <span class=\"comment\">// 创建网格对象</span></span><br><span class=\"line\">scene.<span class=\"title function_\">add</span>(sphere); <span class=\"comment\">// 添加到场景中</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-高光网格材质-MeshPhongMaterial\"><a href=\"#16-高光网格材质-MeshPhongMaterial\" class=\"headerlink\" title=\"16. 高光网格材质 MeshPhongMaterial\"></a>16. 高光网格材质 MeshPhongMaterial</h3><p>了解并使用 Three.js 中的高光网格材质 <code>MeshPhongMaterial</code>。示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascriptCopy code</span><br><span class=\"line\">const material = new THREE.MeshPhongMaterial(&#123; color: 0xff0000 &#125;); // 创建高光网格材质</span><br><span class=\"line\">const mesh = new THREE.Mesh(geometry, material); // 创建网格对象</span><br><span class=\"line\">scene.add(mesh); // 添加到场景中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-WebGL-渲染器设置-锯齿模糊、背景颜色\"><a href=\"#17-WebGL-渲染器设置-锯齿模糊、背景颜色\" class=\"headerlink\" title=\"17. WebGL 渲染器设置(锯齿模糊、背景颜色)\"></a>17. WebGL 渲染器设置(锯齿模糊、背景颜色)</h3><p>了解并设置 WebGL 渲染器的属性，如锯齿模糊和背景颜色。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderer.<span class=\"title function_\">setPixelRatio</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span>); <span class=\"comment\">// 设置像素比</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">setClearColor</span>(<span class=\"number\">0xeeeeee</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 设置背景颜色</span></span><br><span class=\"line\">renderer.<span class=\"property\">antialias</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 启用抗锯齿</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-gui-js-库-可视化改变三维场景\"><a href=\"#18-gui-js-库-可视化改变三维场景\" class=\"headerlink\" title=\"18. gui.js 库(可视化改变三维场景)\"></a>18. gui.js 库(可视化改变三维场景)</h3><p>使用 <code>dat.GUI</code> 库创建可视化控制面板，控制 Three.js 场景中的参数。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gui = <span class=\"keyword\">new</span> dat.<span class=\"title function_\">GUI</span>(); <span class=\"comment\">// 创建 GUI</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> params = &#123; <span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span> &#125;; <span class=\"comment\">// 定义参数</span></span><br><span class=\"line\">gui.<span class=\"title function_\">addColor</span>(params, <span class=\"string\">&#x27;color&#x27;</span>).<span class=\"title function_\">onChange</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当颜色参数变化时执行的操作</span></span><br><span class=\"line\">  material.<span class=\"property\">color</span>.<span class=\"title function_\">set</span>(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Three-js-文件包下载和目录简介\"><a href=\"#1-Three-js-文件包下载和目录简介\" class=\"headerlink\" title=\"1. Three.js 文件包下载和目录简介\"></a>1. Three.js 文件包下载和目录简介</h3><p>下载 Three.js 文件包，解压并查看目录结构。示例代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载 Three.js 文件包</span></span><br><span class=\"line\">wget https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压文件</span></span><br><span class=\"line\">unzip three.min.js</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看目录结构</span></span><br><span class=\"line\">ls -l</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-学习环境-—-编辑器和本地静态服务\"><a href=\"#2-学习环境-—-编辑器和本地静态服务\" class=\"headerlink\" title=\"2. 学习环境 — 编辑器和本地静态服务\"></a>2. 学习环境 — 编辑器和本地静态服务</h3><p>选择合适的代码编辑器（如Visual Studio Code）和本地静态服务器（如Live Server插件）搭建 Three.js 学习环境。</p>\n<h3 id=\"3-开发和学习环境，引入-Three-js-库\"><a href=\"#3-开发和学习环境，引入-Three-js-库\" class=\"headerlink\" title=\"3. 开发和学习环境，引入 Three.js 库\"></a>3. 开发和学习环境，引入 Three.js 库</h3><p>在 HTML 文件中引入 Three.js 库，并创建基本的 Three.js 场景。示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My Three.js Scene<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;path/to/three.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 创建 Three.js 场景</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-第一个-3D-案例-—-创建-3D-场景\"><a href=\"#4-第一个-3D-案例-—-创建-3D-场景\" class=\"headerlink\" title=\"4. 第一个 3D 案例 — 创建 3D 场景\"></a>4. 第一个 3D 案例 — 创建 3D 场景</h3><p>创建最简单的 Three.js 3D 场景，包括场景、相机和渲染器，并渲染一个基本几何体。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Three.js 场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> scene = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Scene</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个立方体并添加到场景中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0x00ff00</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material);</span><br><span class=\"line\">scene.<span class=\"title function_\">add</span>(cube);</span><br><span class=\"line\"></span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">z</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">x</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">y</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  renderer.<span class=\"title function_\">render</span>(scene, camera);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">animate</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-第一个-3D-案例-—-透视投影相机\"><a href=\"#5-第一个-3D-案例-—-透视投影相机\" class=\"headerlink\" title=\"5. 第一个 3D 案例 — 透视投影相机\"></a>5. 第一个 3D 案例 — 透视投影相机</h3><p>学习如何使用透视投影相机创建 Three.js 场景。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> camera = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">75</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-第一个-3D-案例-—-渲染器\"><a href=\"#6-第一个-3D-案例-—-渲染器\" class=\"headerlink\" title=\"6. 第一个 3D 案例 — 渲染器\"></a>6. 第一个 3D 案例 — 渲染器</h3><p>创建 Three.js 渲染器，并将其绑定到 HTML 元素上。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderer = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">WebGLRenderer</span>();</span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(renderer.<span class=\"property\">domElement</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Three-js-三维坐标系-—-加强对三维空间的认识\"><a href=\"#7-Three-js-三维坐标系-—-加强对三维空间的认识\" class=\"headerlink\" title=\"7. Three.js 三维坐标系 — 加强对三维空间的认识\"></a>7. Three.js 三维坐标系 — 加强对三维空间的认识</h3><p>探索 Three.js 的三维坐标系，加深对三维空间的理解。</p>\n<h3 id=\"8-光源对物体表面的影响\"><a href=\"#8-光源对物体表面的影响\" class=\"headerlink\" title=\"8. 光源对物体表面的影响\"></a>8. 光源对物体表面的影响</h3><p>学习如何使用光源在 Three.js 中影响物体的表面。</p>\n<h3 id=\"9-相机控件轨道控制器-OrbitControls\"><a href=\"#9-相机控件轨道控制器-OrbitControls\" class=\"headerlink\" title=\"9. 相机控件轨道控制器 OrbitControls\"></a>9. 相机控件轨道控制器 OrbitControls</h3><p>引入 OrbitControls，让用户控制相机以便更好地观察场景。</p>\n<h3 id=\"10-平行光与环境光\"><a href=\"#10-平行光与环境光\" class=\"headerlink\" title=\"10. 平行光与环境光\"></a>10. 平行光与环境光</h3><p>了解平行光和环境光在 Three.js 中的作用。</p>\n<h3 id=\"11-动画渲染循环\"><a href=\"#11-动画渲染循环\" class=\"headerlink\" title=\"11. 动画渲染循环\"></a>11. 动画渲染循环</h3><p>使用 <code>requestAnimationFrame</code> 创建 Three.js 动画渲染循环。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">  <span class=\"comment\">// 在此处更新场景对象或相机</span></span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">x</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  cube.<span class=\"property\">rotation</span>.<span class=\"property\">y</span> += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  renderer.<span class=\"title function_\">render</span>(scene, camera);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">animate</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-Canvas-画布布局和全屏\"><a href=\"#12-Canvas-画布布局和全屏\" class=\"headerlink\" title=\"12. Canvas 画布布局和全屏\"></a>12. Canvas 画布布局和全屏</h3><p>学习如何设置 Three.js Canvas 画布布局并实现全屏显示效果。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置画布尺寸与窗口一致</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">setSize</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听窗口大小变化事件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> width = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> height = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\">  renderer.<span class=\"title function_\">setSize</span>(width, height);</span><br><span class=\"line\">  camera.<span class=\"property\">aspect</span> = width / height;</span><br><span class=\"line\">  camera.<span class=\"title function_\">updateProjectionMatrix</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-Stats-查看-Three-js-渲染帧率\"><a href=\"#13-Stats-查看-Three-js-渲染帧率\" class=\"headerlink\" title=\"13. Stats 查看 Three.js 渲染帧率\"></a>13. Stats 查看 Three.js 渲染帧率</h3><p>使用 Stats.js 监控 Three.js 渲染性能。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stats = <span class=\"keyword\">new</span> <span class=\"title class_\">Stats</span>();</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(stats.<span class=\"property\">dom</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">  stats.<span class=\"title function_\">update</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 其他渲染代码...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">animate</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-阵列立方体和相机适配体验\"><a href=\"#14-阵列立方体和相机适配体验\" class=\"headerlink\" title=\"14. 阵列立方体和相机适配体验\"></a>14. 阵列立方体和相机适配体验</h3><p>创建多个立方体并调整相机以适配整个场景。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成多个立方体</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">BoxGeometry</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">0xffffff</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cube = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material);</span><br><span class=\"line\">  cube.<span class=\"property\">position</span>.<span class=\"title function_\">set</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">200</span> - <span class=\"number\">100</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">200</span> - <span class=\"number\">100</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">200</span> - <span class=\"number\">100</span>);</span><br><span class=\"line\">  scene.<span class=\"title function_\">add</span>(cube);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调整相机以适配整个场景</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> box = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Box3</span>().<span class=\"title function_\">setFromObject</span>(scene);</span><br><span class=\"line\"><span class=\"keyword\">const</span> center = box.<span class=\"title function_\">getCenter</span>(<span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Vector3</span>());</span><br><span class=\"line\"><span class=\"keyword\">const</span> size = box.<span class=\"title function_\">getSize</span>(<span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Vector3</span>());</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"title function_\">copy</span>(center);</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">x</span> += size.<span class=\"property\">x</span> * <span class=\"number\">1.2</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">y</span> += size.<span class=\"property\">y</span> * <span class=\"number\">1.2</span>;</span><br><span class=\"line\">camera.<span class=\"property\">position</span>.<span class=\"property\">z</span> += size.<span class=\"property\">z</span> * <span class=\"number\">1.2</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-Three-js-常见简单几何体简介\"><a href=\"#15-Three-js-常见简单几何体简介\" class=\"headerlink\" title=\"15. Three.js 常见简单几何体简介\"></a>15. Three.js 常见简单几何体简介</h3><p>了解和使用 Three.js 中常见的简单几何体，例如球体、立方体和圆柱体等。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> geometry = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">SphereGeometry</span>(<span class=\"number\">50</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>); <span class=\"comment\">// 创建一个球体</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> material = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">MeshBasicMaterial</span>(&#123; <span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span> &#125;); <span class=\"comment\">// 创建材质</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sphere = <span class=\"keyword\">new</span> <span class=\"variable constant_\">THREE</span>.<span class=\"title class_\">Mesh</span>(geometry, material); <span class=\"comment\">// 创建网格对象</span></span><br><span class=\"line\">scene.<span class=\"title function_\">add</span>(sphere); <span class=\"comment\">// 添加到场景中</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-高光网格材质-MeshPhongMaterial\"><a href=\"#16-高光网格材质-MeshPhongMaterial\" class=\"headerlink\" title=\"16. 高光网格材质 MeshPhongMaterial\"></a>16. 高光网格材质 MeshPhongMaterial</h3><p>了解并使用 Three.js 中的高光网格材质 <code>MeshPhongMaterial</code>。示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascriptCopy code</span><br><span class=\"line\">const material = new THREE.MeshPhongMaterial(&#123; color: 0xff0000 &#125;); // 创建高光网格材质</span><br><span class=\"line\">const mesh = new THREE.Mesh(geometry, material); // 创建网格对象</span><br><span class=\"line\">scene.add(mesh); // 添加到场景中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-WebGL-渲染器设置-锯齿模糊、背景颜色\"><a href=\"#17-WebGL-渲染器设置-锯齿模糊、背景颜色\" class=\"headerlink\" title=\"17. WebGL 渲染器设置(锯齿模糊、背景颜色)\"></a>17. WebGL 渲染器设置(锯齿模糊、背景颜色)</h3><p>了解并设置 WebGL 渲染器的属性，如锯齿模糊和背景颜色。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderer.<span class=\"title function_\">setPixelRatio</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span>); <span class=\"comment\">// 设置像素比</span></span><br><span class=\"line\">renderer.<span class=\"title function_\">setClearColor</span>(<span class=\"number\">0xeeeeee</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 设置背景颜色</span></span><br><span class=\"line\">renderer.<span class=\"property\">antialias</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 启用抗锯齿</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-gui-js-库-可视化改变三维场景\"><a href=\"#18-gui-js-库-可视化改变三维场景\" class=\"headerlink\" title=\"18. gui.js 库(可视化改变三维场景)\"></a>18. gui.js 库(可视化改变三维场景)</h3><p>使用 <code>dat.GUI</code> 库创建可视化控制面板，控制 Three.js 场景中的参数。示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gui = <span class=\"keyword\">new</span> dat.<span class=\"title function_\">GUI</span>(); <span class=\"comment\">// 创建 GUI</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> params = &#123; <span class=\"attr\">color</span>: <span class=\"number\">0xff0000</span> &#125;; <span class=\"comment\">// 定义参数</span></span><br><span class=\"line\">gui.<span class=\"title function_\">addColor</span>(params, <span class=\"string\">&#x27;color&#x27;</span>).<span class=\"title function_\">onChange</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当颜色参数变化时执行的操作</span></span><br><span class=\"line\">  material.<span class=\"property\">color</span>.<span class=\"title function_\">set</span>(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"前端学习计划_1","date":"2024-01-02T09:20:44.000Z","_content":"\n<!-- more -->\n\n### js数据类型的问题\n\n1.  基本数据类型8类， 原始数据类型存在栈，引用数据类型在堆\n\n    在数据结构中，栈中数据的存取方式为先进后出。\n    堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n2.  `instanceof` 原理： 等号左边原型链中是否存在等号右边构造函数的 `prototype ` 属性 所以不能判断原始数据类型\n\n    `constructor  ` 就是如果创建一个对象来改变它的原型，`constructor ` 就不能用来判断数据类型了：\n\n    对于constructor的一些尝试\n\n    ```js\n    (2).constructor; // ƒ Number() { [native code] }\n    ```\n\n    对于这个 `native`\n    `console.log((2).constructor)` 打印出的内容是 `ƒ Number() { [native code] }`。这表示 `Number` 是一个函数（以 `ƒ` 开头），并且其内部实现是由本地代码（[native code]）提供的，这意味着它是由JavaScript引擎实现的内建函数，而不是通过JavaScript代码定义的。\n\n    ```js\n    ((2).constructor === Number)(\n      //true\n      function () {}.constructor == Function\n    ); //true\n    ```\n\n    如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了\n\n    ```js\n    function Fn() {}\n    n.prototype = new Array();\n    var f = new Fn();\n    console.log(f.constructor === Fn); // false\n    console.log(f.constructor === Array); // true\n    ```\n\n3.  Object.Prototype.toString.call().slice(8, -1)\n\n    ```b.slice(1, -1)\n    b.slice(1, -1)\n    去掉第0个索引，从第1个索引开始截取到倒数第一个，但不包括倒数第一个\n    ```\n\n    obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n    想一想\n\n4.  判断数组的方式\n\n        - Array.isArray()\n        \n        - Instanceof Array\n        \n        - constructor() === Array\n        \n        - ._proto_ === Array.prototype\n        \n        - Array.isPrototypeOf()\n\n### null 和 undefined\n\n阅读了这篇 https://juejin.cn/post/7051144396615450655 请1月10复读\n\n总的来说 `null` 和 `undefined` 都代表空，主要区别在于 `undefined` 表示尚未初始化的变量的值，而 `null` 表示该变量有意缺少对象指向。\n\n```js\nnull == undefined; // true\nnull === undefined; // false\n```\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n### 为什么 == 和 === 对比会出现 true 和 false ？\n\n很多文章说： `undefined` 的布尔值是 `false` ， `null` 的布尔值也是 `false` ，所以它们在比较时都转化为了 `false` ，所以 `undefined == null` 。\n实际上并不是这样的。\n`ECMA` 在 `11.9.3` 章节中明确写出：\n\n> 1. If _x_ is **null** and _y_ is **undefined**, return **true**.\n> 2. If _x_ is **undefined** and _y_ is **null**, return **true**.\n\n#### 对下面4个代码块有疑惑\n\n```js\nObject.getPrototypeOf(Object.prototype); //null\nObject.getPrototypeOf(a.__proto__); //null\n```\n\n##### 运算问题\n\n```js\nlet a = undefined + 1; // NaN\nlet b = null + 1; // 1\nNumber(undefined); // NaN\nNumber(null); // 0\n```\n\n##### JSON问题\n\n```js\nJSON.stringify({ a: undefined }); // '{}'\nJSON.stringify({ b: null }); // '{b: null}'\nJSON.stringify({ a: undefined, b: null }); // '{b: null}'\n```\n\n##### let undefiend = 'test'\n\n```javascript\nfunction test(n) {\n  let undefined = \"test\";\n  return n === undefined;\n}\n\ntest(); // false\ntest(undefined); // false\ntest(\"test\"); // ture\n\nlet undefined = \"test\"; // Uncaught SyntaxError: Identifier 'undefined' has already been declared\n```\n\n#### 为什么 typeof null 是 object？\n\n`typeof null` 输出为 `'object'` 其实是一个底层的错误，但直到现阶段都无法被修复。\n\n原因是，在 `JavaScript` 初始版本中，值以 `32位` 存储。前 `3位` 表示数据类型的标记，其余位则是值。\n对于所有的对象，它的前 `3位` 都以 `000` 作为类型标记位。在 `JavaScript` 早期版本中， `null` 被认为是一个特殊的值，用来对应 `C` 中的 `空指针` 。但 `JavaScript` 中没有 `C` 中的指针，所以 `null` 意味着什么都没有或者 `void` 并以 `全0(32个)` 表示。\n\n因此每当 `JavaScript` 读取 `null` 时，它前端的 `3位` 将它视为 `对象类型` ，这也是为什么 `typeof null` 返回 `'object'` 的原因。\n\n### Object.getPrototypeOf\n\n返回指定对象的原型\n\nObject.create() 以一个现有对象作为原型，创建一个新对象。\n\n```js\nconst prototype1 = {};\nconst object1 = Object.create(prototype1);\nconsole.log(Object.getPrototypeOf(object1) === prototype1); // ture\n```\n\n### js浮点数二进制问题\n\n关于这些的细节问题 没搞懂 待日后补\n\n### isNaN 和 Number.isNaN 函数的区别\n\n一个会把非数字的其他类型数据也返回true\n\n```js\nisNaN({}) === true;\nNumber.isNaN({}) === false;\n```\n\n**其他值到字符串的转换规则？**\n\n**其他值到数字值的转换规则？**\n\n> 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n>\n> 为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n>\n> 如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n\n### Object.is() 与比较操作符=== 、 ==的区别？\n\n- 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n\n- 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false\n- 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的\n\n### JavaScript 中的包装类型？\n\n基本类型是没有属性和方法的，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象\n\n```js\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n```\n\n在访问'abc'.length时，JavaScript 将'abc'在后台转换成String('abc')，然后再访问其length属性。JavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\n\nvar a = 'abc'\n\nJavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\n\n```js\nvar a = \"abc\";\nObject(a); // String {\"abc\"}\n```\n\n也可以使用valueOf方法将包装类型倒转成基本类型：\n\n```JavaScript\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n```\n\n### 字符串方法\n\nhttps://juejin.cn/post/7240697872160440380\n\n刷了几道算法题\n\n### 箭头函数与普通函数不同\n\n简洁 this指向不能改变 没有自己的this 不能作为构造函数因为第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用 没有自己的 arguments，不能用作Generator函数，不能使用yeild关键字\n\n### 遗留问题\n\n中国剩余定理 唤醒替换 数组翻转\n\n1.5要弄懂\n","source":"_posts/前端学习计划_1.md","raw":"---\ntitle: 前端学习计划_1\ndate: 2024-1-2 17:20:44\ntags:\n  - 前端学习计划\n  - 前端\n  - js\ncategories:\n  - 笔记\n---\n\n<!-- more -->\n\n### js数据类型的问题\n\n1.  基本数据类型8类， 原始数据类型存在栈，引用数据类型在堆\n\n    在数据结构中，栈中数据的存取方式为先进后出。\n    堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n2.  `instanceof` 原理： 等号左边原型链中是否存在等号右边构造函数的 `prototype ` 属性 所以不能判断原始数据类型\n\n    `constructor  ` 就是如果创建一个对象来改变它的原型，`constructor ` 就不能用来判断数据类型了：\n\n    对于constructor的一些尝试\n\n    ```js\n    (2).constructor; // ƒ Number() { [native code] }\n    ```\n\n    对于这个 `native`\n    `console.log((2).constructor)` 打印出的内容是 `ƒ Number() { [native code] }`。这表示 `Number` 是一个函数（以 `ƒ` 开头），并且其内部实现是由本地代码（[native code]）提供的，这意味着它是由JavaScript引擎实现的内建函数，而不是通过JavaScript代码定义的。\n\n    ```js\n    ((2).constructor === Number)(\n      //true\n      function () {}.constructor == Function\n    ); //true\n    ```\n\n    如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了\n\n    ```js\n    function Fn() {}\n    n.prototype = new Array();\n    var f = new Fn();\n    console.log(f.constructor === Fn); // false\n    console.log(f.constructor === Array); // true\n    ```\n\n3.  Object.Prototype.toString.call().slice(8, -1)\n\n    ```b.slice(1, -1)\n    b.slice(1, -1)\n    去掉第0个索引，从第1个索引开始截取到倒数第一个，但不包括倒数第一个\n    ```\n\n    obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n    想一想\n\n4.  判断数组的方式\n\n        - Array.isArray()\n        \n        - Instanceof Array\n        \n        - constructor() === Array\n        \n        - ._proto_ === Array.prototype\n        \n        - Array.isPrototypeOf()\n\n### null 和 undefined\n\n阅读了这篇 https://juejin.cn/post/7051144396615450655 请1月10复读\n\n总的来说 `null` 和 `undefined` 都代表空，主要区别在于 `undefined` 表示尚未初始化的变量的值，而 `null` 表示该变量有意缺少对象指向。\n\n```js\nnull == undefined; // true\nnull === undefined; // false\n```\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n### 为什么 == 和 === 对比会出现 true 和 false ？\n\n很多文章说： `undefined` 的布尔值是 `false` ， `null` 的布尔值也是 `false` ，所以它们在比较时都转化为了 `false` ，所以 `undefined == null` 。\n实际上并不是这样的。\n`ECMA` 在 `11.9.3` 章节中明确写出：\n\n> 1. If _x_ is **null** and _y_ is **undefined**, return **true**.\n> 2. If _x_ is **undefined** and _y_ is **null**, return **true**.\n\n#### 对下面4个代码块有疑惑\n\n```js\nObject.getPrototypeOf(Object.prototype); //null\nObject.getPrototypeOf(a.__proto__); //null\n```\n\n##### 运算问题\n\n```js\nlet a = undefined + 1; // NaN\nlet b = null + 1; // 1\nNumber(undefined); // NaN\nNumber(null); // 0\n```\n\n##### JSON问题\n\n```js\nJSON.stringify({ a: undefined }); // '{}'\nJSON.stringify({ b: null }); // '{b: null}'\nJSON.stringify({ a: undefined, b: null }); // '{b: null}'\n```\n\n##### let undefiend = 'test'\n\n```javascript\nfunction test(n) {\n  let undefined = \"test\";\n  return n === undefined;\n}\n\ntest(); // false\ntest(undefined); // false\ntest(\"test\"); // ture\n\nlet undefined = \"test\"; // Uncaught SyntaxError: Identifier 'undefined' has already been declared\n```\n\n#### 为什么 typeof null 是 object？\n\n`typeof null` 输出为 `'object'` 其实是一个底层的错误，但直到现阶段都无法被修复。\n\n原因是，在 `JavaScript` 初始版本中，值以 `32位` 存储。前 `3位` 表示数据类型的标记，其余位则是值。\n对于所有的对象，它的前 `3位` 都以 `000` 作为类型标记位。在 `JavaScript` 早期版本中， `null` 被认为是一个特殊的值，用来对应 `C` 中的 `空指针` 。但 `JavaScript` 中没有 `C` 中的指针，所以 `null` 意味着什么都没有或者 `void` 并以 `全0(32个)` 表示。\n\n因此每当 `JavaScript` 读取 `null` 时，它前端的 `3位` 将它视为 `对象类型` ，这也是为什么 `typeof null` 返回 `'object'` 的原因。\n\n### Object.getPrototypeOf\n\n返回指定对象的原型\n\nObject.create() 以一个现有对象作为原型，创建一个新对象。\n\n```js\nconst prototype1 = {};\nconst object1 = Object.create(prototype1);\nconsole.log(Object.getPrototypeOf(object1) === prototype1); // ture\n```\n\n### js浮点数二进制问题\n\n关于这些的细节问题 没搞懂 待日后补\n\n### isNaN 和 Number.isNaN 函数的区别\n\n一个会把非数字的其他类型数据也返回true\n\n```js\nisNaN({}) === true;\nNumber.isNaN({}) === false;\n```\n\n**其他值到字符串的转换规则？**\n\n**其他值到数字值的转换规则？**\n\n> 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n>\n> 为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n>\n> 如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n\n### Object.is() 与比较操作符=== 、 ==的区别？\n\n- 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n\n- 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false\n- 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的\n\n### JavaScript 中的包装类型？\n\n基本类型是没有属性和方法的，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象\n\n```js\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n```\n\n在访问'abc'.length时，JavaScript 将'abc'在后台转换成String('abc')，然后再访问其length属性。JavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\n\nvar a = 'abc'\n\nJavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\n\n```js\nvar a = \"abc\";\nObject(a); // String {\"abc\"}\n```\n\n也可以使用valueOf方法将包装类型倒转成基本类型：\n\n```JavaScript\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n```\n\n### 字符串方法\n\nhttps://juejin.cn/post/7240697872160440380\n\n刷了几道算法题\n\n### 箭头函数与普通函数不同\n\n简洁 this指向不能改变 没有自己的this 不能作为构造函数因为第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用 没有自己的 arguments，不能用作Generator函数，不能使用yeild关键字\n\n### 遗留问题\n\n中国剩余定理 唤醒替换 数组翻转\n\n1.5要弄懂\n","slug":"前端学习计划_1","published":1,"updated":"2024-01-06T05:12:25.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x430013q05z248jbokb","content":"<span id=\"more\"></span>\n\n<h3 id=\"js数据类型的问题\"><a href=\"#js数据类型的问题\" class=\"headerlink\" title=\"js数据类型的问题\"></a>js数据类型的问题</h3><ol>\n<li><p>基本数据类型8类， 原始数据类型存在栈，引用数据类型在堆</p>\n<p> 在数据结构中，栈中数据的存取方式为先进后出。<br> 堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</p>\n</li>\n<li><p><code>instanceof</code> 原理： 等号左边原型链中是否存在等号右边构造函数的 <code>prototype </code> 属性 所以不能判断原始数据类型</p>\n<p> <code>constructor  </code> 就是如果创建一个对象来改变它的原型，<code>constructor </code> 就不能用来判断数据类型了：</p>\n<p> 对于constructor的一些尝试</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">2</span>).<span class=\"property\">constructor</span>; <span class=\"comment\">// ƒ Number() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> 对于这个 <code>native</code><br> <code>console.log((2).constructor)</code> 打印出的内容是 <code>ƒ Number() &#123; [native code] &#125;</code>。这表示 <code>Number</code> 是一个函数（以 <code>ƒ</code> 开头），并且其内部实现是由本地代码（[native code]）提供的，这意味着它是由JavaScript引擎实现的内建函数，而不是通过JavaScript代码定义的。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((<span class=\"number\">2</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">Number</span>)(</span><br><span class=\"line\">  <span class=\"comment\">//true</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;.<span class=\"property\">constructor</span> == <span class=\"title class_\">Function</span></span><br><span class=\"line\">); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p> 如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">n.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span> === <span class=\"title class_\">Fn</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Object.Prototype.toString.call().slice(8, -1)</p>\n <figure class=\"highlight plaintext\"><figcaption><span>-1)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.slice(1, -1)</span><br><span class=\"line\">去掉第0个索引，从第1个索引开始截取到倒数第一个，但不包括倒数第一个</span><br></pre></td></tr></table></figure>\n\n<p> obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p>\n<p> 想一想</p>\n</li>\n<li><p>判断数组的方式</p>\n<pre><code> - Array.isArray()\n \n - Instanceof Array\n \n - constructor() === Array\n \n - ._proto_ === Array.prototype\n \n - Array.isPrototypeOf()\n</code></pre>\n</li>\n</ol>\n<h3 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a>null 和 undefined</h3><p>阅读了这篇 <a href=\"https://juejin.cn/post/7051144396615450655\">https://juejin.cn/post/7051144396615450655</a> 请1月10复读</p>\n<p>总的来说 <code>null</code> 和 <code>undefined</code> 都代表空，主要区别在于 <code>undefined</code> 表示尚未初始化的变量的值，而 <code>null</code> 表示该变量有意缺少对象指向。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<h3 id=\"为什么-和-对比会出现-true-和-false-？\"><a href=\"#为什么-和-对比会出现-true-和-false-？\" class=\"headerlink\" title=\"为什么 == 和 === 对比会出现 true 和 false ？\"></a>为什么 == 和 === 对比会出现 true 和 false ？</h3><p>很多文章说： <code>undefined</code> 的布尔值是 <code>false</code> ， <code>null</code> 的布尔值也是 <code>false</code> ，所以它们在比较时都转化为了 <code>false</code> ，所以 <code>undefined == null</code> 。<br>实际上并不是这样的。<br><code>ECMA</code> 在 <code>11.9.3</code> 章节中明确写出：</p>\n<blockquote>\n<ol>\n<li>If <em>x</em> is <strong>null</strong> and <em>y</em> is <strong>undefined</strong>, return <strong>true</strong>.</li>\n<li>If <em>x</em> is <strong>undefined</strong> and <em>y</em> is <strong>null</strong>, return <strong>true</strong>.</li>\n</ol>\n</blockquote>\n<h4 id=\"对下面4个代码块有疑惑\"><a href=\"#对下面4个代码块有疑惑\" class=\"headerlink\" title=\"对下面4个代码块有疑惑\"></a>对下面4个代码块有疑惑</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">//null</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(a.<span class=\"property\">__proto__</span>); <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运算问题\"><a href=\"#运算问题\" class=\"headerlink\" title=\"运算问题\"></a>运算问题</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"literal\">undefined</span> + <span class=\"number\">1</span>; <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"literal\">null</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSON问题\"><a href=\"#JSON问题\" class=\"headerlink\" title=\"JSON问题\"></a>JSON问题</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: <span class=\"literal\">undefined</span> &#125;); <span class=\"comment\">// &#x27;&#123;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">b</span>: <span class=\"literal\">null</span> &#125;); <span class=\"comment\">// &#x27;&#123;b: null&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">b</span>: <span class=\"literal\">null</span> &#125;); <span class=\"comment\">// &#x27;&#123;b: null&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"let-undefiend-‘test’\"><a href=\"#let-undefiend-‘test’\" class=\"headerlink\" title=\"let undefiend = ‘test’\"></a>let undefiend = ‘test’</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"literal\">undefined</span> = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n === <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">// ture</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"literal\">undefined</span> = <span class=\"string\">&quot;test&quot;</span>; <span class=\"comment\">// Uncaught SyntaxError: Identifier &#x27;undefined&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"为什么-typeof-null-是-object？\"><a href=\"#为什么-typeof-null-是-object？\" class=\"headerlink\" title=\"为什么 typeof null 是 object？\"></a>为什么 typeof null 是 object？</h4><p><code>typeof null</code> 输出为 <code>&#39;object&#39;</code> 其实是一个底层的错误，但直到现阶段都无法被修复。</p>\n<p>原因是，在 <code>JavaScript</code> 初始版本中，值以 <code>32位</code> 存储。前 <code>3位</code> 表示数据类型的标记，其余位则是值。<br>对于所有的对象，它的前 <code>3位</code> 都以 <code>000</code> 作为类型标记位。在 <code>JavaScript</code> 早期版本中， <code>null</code> 被认为是一个特殊的值，用来对应 <code>C</code> 中的 <code>空指针</code> 。但 <code>JavaScript</code> 中没有 <code>C</code> 中的指针，所以 <code>null</code> 意味着什么都没有或者 <code>void</code> 并以 <code>全0(32个)</code> 表示。</p>\n<p>因此每当 <code>JavaScript</code> 读取 <code>null</code> 时，它前端的 <code>3位</code> 将它视为 <code>对象类型</code> ，这也是为什么 <code>typeof null</code> 返回 <code>&#39;object&#39;</code> 的原因。</p>\n<h3 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf\"></a>Object.getPrototypeOf</h3><p>返回指定对象的原型</p>\n<p>Object.create() 以一个现有对象作为原型，创建一个新对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> prototype1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> object1 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(prototype1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(object1) === prototype1); <span class=\"comment\">// ture</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js浮点数二进制问题\"><a href=\"#js浮点数二进制问题\" class=\"headerlink\" title=\"js浮点数二进制问题\"></a>js浮点数二进制问题</h3><p>关于这些的细节问题 没搞懂 待日后补</p>\n<h3 id=\"isNaN-和-Number-isNaN-函数的区别\"><a href=\"#isNaN-和-Number-isNaN-函数的区别\" class=\"headerlink\" title=\"isNaN 和 Number.isNaN 函数的区别\"></a>isNaN 和 Number.isNaN 函数的区别</h3><p>一个会把非数字的其他类型数据也返回true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(&#123;&#125;) === <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(&#123;&#125;) === <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>其他值到字符串的转换规则？</strong></p>\n<p><strong>其他值到数字值的转换规则？</strong></p>\n<blockquote>\n<p>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</p>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</p>\n</blockquote>\n<h3 id=\"Object-is-与比较操作符-、-的区别？\"><a href=\"#Object-is-与比较操作符-、-的区别？\" class=\"headerlink\" title=\"Object.is() 与比较操作符=== 、 ==的区别？\"></a>Object.is() 与比较操作符=== 、 ==的区别？</h3><ul>\n<li><p>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</p>\n</li>\n<li><p>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false</p>\n</li>\n<li><p>使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的</p>\n</li>\n</ul>\n<h3 id=\"JavaScript-中的包装类型？\"><a href=\"#JavaScript-中的包装类型？\" class=\"headerlink\" title=\"JavaScript 中的包装类型？\"></a>JavaScript 中的包装类型？</h3><p>基本类型是没有属性和方法的，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">a.<span class=\"property\">length</span>; <span class=\"comment\">// 3</span></span><br><span class=\"line\">a.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// &quot;ABC&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在访问’abc’.length时，JavaScript 将’abc’在后台转换成String(‘abc’)，然后再访问其length属性。JavaScript也可以使用Object函数显式地将基本类型转换为包装类型：</p>\n<p>var a = ‘abc’</p>\n<p>JavaScript也可以使用Object函数显式地将基本类型转换为包装类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>(a); <span class=\"comment\">// String &#123;&quot;abc&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用valueOf方法将包装类型倒转成基本类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"title class_\">Object</span>(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><p><a href=\"https://juejin.cn/post/7240697872160440380\">https://juejin.cn/post/7240697872160440380</a></p>\n<p>刷了几道算法题</p>\n<h3 id=\"箭头函数与普通函数不同\"><a href=\"#箭头函数与普通函数不同\" class=\"headerlink\" title=\"箭头函数与普通函数不同\"></a>箭头函数与普通函数不同</h3><p>简洁 this指向不能改变 没有自己的this 不能作为构造函数因为第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用 没有自己的 arguments，不能用作Generator函数，不能使用yeild关键字</p>\n<h3 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h3><p>中国剩余定理 唤醒替换 数组翻转</p>\n<p>1.5要弄懂</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"js数据类型的问题\"><a href=\"#js数据类型的问题\" class=\"headerlink\" title=\"js数据类型的问题\"></a>js数据类型的问题</h3><ol>\n<li><p>基本数据类型8类， 原始数据类型存在栈，引用数据类型在堆</p>\n<p> 在数据结构中，栈中数据的存取方式为先进后出。<br> 堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</p>\n</li>\n<li><p><code>instanceof</code> 原理： 等号左边原型链中是否存在等号右边构造函数的 <code>prototype </code> 属性 所以不能判断原始数据类型</p>\n<p> <code>constructor  </code> 就是如果创建一个对象来改变它的原型，<code>constructor </code> 就不能用来判断数据类型了：</p>\n<p> 对于constructor的一些尝试</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">2</span>).<span class=\"property\">constructor</span>; <span class=\"comment\">// ƒ Number() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> 对于这个 <code>native</code><br> <code>console.log((2).constructor)</code> 打印出的内容是 <code>ƒ Number() &#123; [native code] &#125;</code>。这表示 <code>Number</code> 是一个函数（以 <code>ƒ</code> 开头），并且其内部实现是由本地代码（[native code]）提供的，这意味着它是由JavaScript引擎实现的内建函数，而不是通过JavaScript代码定义的。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((<span class=\"number\">2</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">Number</span>)(</span><br><span class=\"line\">  <span class=\"comment\">//true</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;.<span class=\"property\">constructor</span> == <span class=\"title class_\">Function</span></span><br><span class=\"line\">); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p> 如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">n.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span> === <span class=\"title class_\">Fn</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Object.Prototype.toString.call().slice(8, -1)</p>\n <figure class=\"highlight plaintext\"><figcaption><span>-1)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.slice(1, -1)</span><br><span class=\"line\">去掉第0个索引，从第1个索引开始截取到倒数第一个，但不包括倒数第一个</span><br></pre></td></tr></table></figure>\n\n<p> obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p>\n<p> 想一想</p>\n</li>\n<li><p>判断数组的方式</p>\n<pre><code> - Array.isArray()\n \n - Instanceof Array\n \n - constructor() === Array\n \n - ._proto_ === Array.prototype\n \n - Array.isPrototypeOf()\n</code></pre>\n</li>\n</ol>\n<h3 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a>null 和 undefined</h3><p>阅读了这篇 <a href=\"https://juejin.cn/post/7051144396615450655\">https://juejin.cn/post/7051144396615450655</a> 请1月10复读</p>\n<p>总的来说 <code>null</code> 和 <code>undefined</code> 都代表空，主要区别在于 <code>undefined</code> 表示尚未初始化的变量的值，而 <code>null</code> 表示该变量有意缺少对象指向。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<h3 id=\"为什么-和-对比会出现-true-和-false-？\"><a href=\"#为什么-和-对比会出现-true-和-false-？\" class=\"headerlink\" title=\"为什么 == 和 === 对比会出现 true 和 false ？\"></a>为什么 == 和 === 对比会出现 true 和 false ？</h3><p>很多文章说： <code>undefined</code> 的布尔值是 <code>false</code> ， <code>null</code> 的布尔值也是 <code>false</code> ，所以它们在比较时都转化为了 <code>false</code> ，所以 <code>undefined == null</code> 。<br>实际上并不是这样的。<br><code>ECMA</code> 在 <code>11.9.3</code> 章节中明确写出：</p>\n<blockquote>\n<ol>\n<li>If <em>x</em> is <strong>null</strong> and <em>y</em> is <strong>undefined</strong>, return <strong>true</strong>.</li>\n<li>If <em>x</em> is <strong>undefined</strong> and <em>y</em> is <strong>null</strong>, return <strong>true</strong>.</li>\n</ol>\n</blockquote>\n<h4 id=\"对下面4个代码块有疑惑\"><a href=\"#对下面4个代码块有疑惑\" class=\"headerlink\" title=\"对下面4个代码块有疑惑\"></a>对下面4个代码块有疑惑</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">//null</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(a.<span class=\"property\">__proto__</span>); <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运算问题\"><a href=\"#运算问题\" class=\"headerlink\" title=\"运算问题\"></a>运算问题</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"literal\">undefined</span> + <span class=\"number\">1</span>; <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"literal\">null</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSON问题\"><a href=\"#JSON问题\" class=\"headerlink\" title=\"JSON问题\"></a>JSON问题</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: <span class=\"literal\">undefined</span> &#125;); <span class=\"comment\">// &#x27;&#123;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">b</span>: <span class=\"literal\">null</span> &#125;); <span class=\"comment\">// &#x27;&#123;b: null&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">b</span>: <span class=\"literal\">null</span> &#125;); <span class=\"comment\">// &#x27;&#123;b: null&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"let-undefiend-‘test’\"><a href=\"#let-undefiend-‘test’\" class=\"headerlink\" title=\"let undefiend = ‘test’\"></a>let undefiend = ‘test’</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"literal\">undefined</span> = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n === <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">// ture</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"literal\">undefined</span> = <span class=\"string\">&quot;test&quot;</span>; <span class=\"comment\">// Uncaught SyntaxError: Identifier &#x27;undefined&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"为什么-typeof-null-是-object？\"><a href=\"#为什么-typeof-null-是-object？\" class=\"headerlink\" title=\"为什么 typeof null 是 object？\"></a>为什么 typeof null 是 object？</h4><p><code>typeof null</code> 输出为 <code>&#39;object&#39;</code> 其实是一个底层的错误，但直到现阶段都无法被修复。</p>\n<p>原因是，在 <code>JavaScript</code> 初始版本中，值以 <code>32位</code> 存储。前 <code>3位</code> 表示数据类型的标记，其余位则是值。<br>对于所有的对象，它的前 <code>3位</code> 都以 <code>000</code> 作为类型标记位。在 <code>JavaScript</code> 早期版本中， <code>null</code> 被认为是一个特殊的值，用来对应 <code>C</code> 中的 <code>空指针</code> 。但 <code>JavaScript</code> 中没有 <code>C</code> 中的指针，所以 <code>null</code> 意味着什么都没有或者 <code>void</code> 并以 <code>全0(32个)</code> 表示。</p>\n<p>因此每当 <code>JavaScript</code> 读取 <code>null</code> 时，它前端的 <code>3位</code> 将它视为 <code>对象类型</code> ，这也是为什么 <code>typeof null</code> 返回 <code>&#39;object&#39;</code> 的原因。</p>\n<h3 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf\"></a>Object.getPrototypeOf</h3><p>返回指定对象的原型</p>\n<p>Object.create() 以一个现有对象作为原型，创建一个新对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> prototype1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> object1 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(prototype1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(object1) === prototype1); <span class=\"comment\">// ture</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js浮点数二进制问题\"><a href=\"#js浮点数二进制问题\" class=\"headerlink\" title=\"js浮点数二进制问题\"></a>js浮点数二进制问题</h3><p>关于这些的细节问题 没搞懂 待日后补</p>\n<h3 id=\"isNaN-和-Number-isNaN-函数的区别\"><a href=\"#isNaN-和-Number-isNaN-函数的区别\" class=\"headerlink\" title=\"isNaN 和 Number.isNaN 函数的区别\"></a>isNaN 和 Number.isNaN 函数的区别</h3><p>一个会把非数字的其他类型数据也返回true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(&#123;&#125;) === <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(&#123;&#125;) === <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>其他值到字符串的转换规则？</strong></p>\n<p><strong>其他值到数字值的转换规则？</strong></p>\n<blockquote>\n<p>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</p>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</p>\n</blockquote>\n<h3 id=\"Object-is-与比较操作符-、-的区别？\"><a href=\"#Object-is-与比较操作符-、-的区别？\" class=\"headerlink\" title=\"Object.is() 与比较操作符=== 、 ==的区别？\"></a>Object.is() 与比较操作符=== 、 ==的区别？</h3><ul>\n<li><p>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</p>\n</li>\n<li><p>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false</p>\n</li>\n<li><p>使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的</p>\n</li>\n</ul>\n<h3 id=\"JavaScript-中的包装类型？\"><a href=\"#JavaScript-中的包装类型？\" class=\"headerlink\" title=\"JavaScript 中的包装类型？\"></a>JavaScript 中的包装类型？</h3><p>基本类型是没有属性和方法的，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">a.<span class=\"property\">length</span>; <span class=\"comment\">// 3</span></span><br><span class=\"line\">a.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// &quot;ABC&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在访问’abc’.length时，JavaScript 将’abc’在后台转换成String(‘abc’)，然后再访问其length属性。JavaScript也可以使用Object函数显式地将基本类型转换为包装类型：</p>\n<p>var a = ‘abc’</p>\n<p>JavaScript也可以使用Object函数显式地将基本类型转换为包装类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>(a); <span class=\"comment\">// String &#123;&quot;abc&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用valueOf方法将包装类型倒转成基本类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"title class_\">Object</span>(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><p><a href=\"https://juejin.cn/post/7240697872160440380\">https://juejin.cn/post/7240697872160440380</a></p>\n<p>刷了几道算法题</p>\n<h3 id=\"箭头函数与普通函数不同\"><a href=\"#箭头函数与普通函数不同\" class=\"headerlink\" title=\"箭头函数与普通函数不同\"></a>箭头函数与普通函数不同</h3><p>简洁 this指向不能改变 没有自己的this 不能作为构造函数因为第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用 没有自己的 arguments，不能用作Generator函数，不能使用yeild关键字</p>\n<h3 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h3><p>中国剩余定理 唤醒替换 数组翻转</p>\n<p>1.5要弄懂</p>"},{"title":"前端学习计划_2","date":"2024-01-04T13:23:34.000Z","_content":"\n\n\n<!-- more -->\n\n### Map WeakMap\n\n`WeakMap `键要是对象 键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内\n\n没有`clear` 和 `size`方法\n\n> WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n\n### JSON\n\n大多数的 js 对象是不符合 JSON 对象的格式的\n\n`JSON.stringify`\n\n`JSON.parse`\n\n\n\n### 类数组对象\n\n常见的类数组对象有`arguments` 和 `Dom` \n\n有数字索引和`length`属性 不具备数组所有属性和方法\n\n``` js\n//几种方法\n[...arrLike\t] \nArray.prototype.slice.call(arrLike) \nArray.prototype.concat.call([], arrLike ) \nArray.from(arrLike)\n```\n\n### this bind apply call\n\n不属于任何对象，非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined\n\n``` js\nvar name = \"windowsName\";\nvar a = {\n    // name: \"Cherry\",\n    fn : function () {\n        console.log(this.name);\n    }\n}\nwindow.a.fn();\n```\n\n**this 永远指向最后调用它的那个对象**, 最后调用 fn 的对象是 a，所以就算 a 中没有 name 这个属性，也不会继续向上一个对象寻找 `this.name`，而是直接输出 `undefined`\n\n``` js\nvar name = \"windowsName\";\nvar a = {\n    name : null,\n    // name: \"Cherry\",\n    fn : function () {\n        console.log(this.name);\n    }\n}\n\nvar f = a.fn;\nf();\n```\n\n``` js\nvar name = \"windowsName\";\n\nfunction fn() {\n    var name = 'Cherry';\n    innerFunction();\n    function innerFunction() {\n        console.log(this.name);      // windowsName\n    }\n}\n\nfn()\n```\n\n```js\n//ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。\n//箭头函数不能作为构造函数使用\n//构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，\nvar name = \"windowsName\";\nvar a = {\n    name : \"Cherry\",\n\n    func1: function () {\n        console.log(this.name)     \n    },\n\n    func2: function () {\n        setTimeout( () => {\n            this.func1()\n        },100);\n    }\n\n};\n\na.func2()     // Cherry\n```\n\n再用4种方式解决上面的调用问题\n\n```js\n1,2,3,4\n```\n\n其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。\n\ncall 的语法为：\n\n```\n复制代码fun.call(thisArg[, arg1[, arg2[, ...]]])\n```\n\n所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。\n\n函数调用问题 https://juejin.cn/post/6844903496253177863\n\n1. 以函数的形式调用时，this永远都是window\n2. 以方法的形式调用时，this就是调用方法的对象\n3. 以构造函数的形式调用时，this就是新创建的对象\n4. 使用call和apply调用时，this就是指定的那个对象\n5. 在全局作用域中this代表window\n\n### sort\n\n按照字典序\n\n(a, b) => a - b 实现正序\n\n### 常见位运算符\n\n| 运算符 | 描述 | 运算规则                                                 |\n| ------ | ---- | -------------------------------------------------------- |\n| &      | 与   | 两个位都为1时，结果才为1                                 |\n| \\|     | 或   | 两个位都为0时，结果才为0                                 |\n| ^      | 异或 | 两个位相同为0，相异为1                                   |\n| ~      | 取反 | 0变1，1变0                                               |\n| <<     | 左移 | 各二进制位全部左移若干位，高位丢弃，低位补0              |\n| >>     | 右移 | 各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃 |\n\n（1）判断奇偶\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((i & 1) == 0)代替if (i % 2 == 0)来判断a是不是偶数。\n\n### 原码补码反码\n\n1. 原码 原码就是一个数的二进制数。\n2. 反码\n\n​\t\t正数的反码与原码相同，如：10 反码为 0000 1010\n\n​\t\t负数的反码为除符号位，按位取反，即0变1，1变0。\n\n3. 补码\n\n   正数的补码与原码相同，如：10 补码为 0000 1010\n\n   负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n### 什么是 DOM 和 BOM？\n`DOM` 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\n`BOM `指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，\n\n并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n\n### src 和 href区别\n\nsrc \n\n- 引用 CSS 文件：`href=\"cssfile.css\"`在链接标记内。\n- 引用 JS 文件：`src=\"myscript.js\"`在 script 标签内。\n  - 引用图像文件：`src=\"mypic.jpg\"`在图像标签内。 浏览器暂停加载，直到获取并加载图像\n- 引用另一个网页：`href=\"http://www.webpage.com\"`在锚标记内。\n\n```HTML\n<script src=\"script.js\"></script> //页面的加载和处理会被暂停 是建议把JS文件放到底部加载的原因\n<link href=\"style.css\" rel=\"stylesheet\" /> //页面解析不会暂停\n```\n\n`script`根据*HTML 5*规范，该元素具有两个全局属性，它们会更改`src`属性的功能：`async`和`defer`。这些改变了脚本（嵌入内联或从外部文件导入）的执行方式。\n\n这意味着可以使用这些属性选择三种可能的模式：\n\n1. 当该`async`属性存在时，脚本将在可用时立即异步执行。\n2. 当该`async`属性不存在但`defer`存在该属性时，则在页面解析完成后执行脚本。\n3. 如果这两个属性都不存在，则在用户代理继续解析页面之前立即获取并执行脚本。\n\n` defer ` 不阻塞html\n\n` async ` 阻塞html，请求完立刻执行\n\n### css选择器\n\nid 100\n\nclass 10\n\n属性 10\n\n伪类\n\n标签选择器\n\n伪元素\n\n相邻兄弟\n\n父子\n\n后代选择\n\n通配符\n\n### 哪些元素会生成BFC\n\n```javascript\n1.根元素\n2.float属性不为none\n3.position为absolute或fixed\n4.display为inline-block\n5.overflow不为visible\n```\n\n### 相对定位绝对定位\n\n图层覆盖顺序由上到下为：相对>绝对>默认，初始状态\n\n相对定位（ 相对于元素在正常文档流中的位置进行定位的，当使用相对定位（Relative positioning）时，元素的定位是相对于其在文档流中原本所占据的位置进行的。换句话说，元素在相对定位下会保留其在文档流中的空间，并且通过使用 `top`、`bottom`、`left`、`right` 属性，可以相对于元素原本位置进行移动，而不会影响其他元素的布局。\n\n举个例子，如果对一个元素使用相对定位，并设置 `top: 10px;`，那么这个元素会相对于它原本在文档流中的位置向下移动 10 个像素，但是其他元素不会受到影响，它们仍然会把这个元素原本所占据的空间保留出来。\n\n相对于其最近的已定位（positioned）祖先元素进行定位的。如果没有已定位的祖先元素，元素会相对于文档的根元素（HTML 元素）\t\n\n\"已定位的祖先元素\"指的是其父元素或更上层的祖先元素中设置了定位属性（如 `position: relative`、`position: absolute`、`position: fixed`）\n\n### less优缺点\n\n1. 可定义变量\n2. 嵌套 清晰\n3. 混合mIxins\n4. 简单的数学运算\n5.  导入 less\n\n### Sass优缺点\n\n+继承 +条件语句\n\n缺点 学习曲线 需要额外的工具和编译步骤 编译时间 依赖问题 增加排查和修复错误的难度 兼容性问题\n\n### js类型检查\n\ntypeof 只能原始数据类型\n\ninstance of \n\nconstructor\n\nObject.prototype.toString.call()\n\n### js异步编程\n\nPromise\n\ngenerator\n\nyield\n\ncallback\n\nasync await \n\n### 实现深拷贝\n\n- 浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以**如果其中一个对象改变了这个地址，就会影响到另一个对象**。\n- 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且**修改新对象不会影响原对象**。\n\n```JS\nconst deepClone = (obj, hash = new WeakMap()) => {\n\tif(obj === null) return obj\n  if (obj instanceof Date) return new Date(obj)\n  if (obj instanceof RegExp) return new RegExp(obj)\n  if (typeof obj !== 'object') return obj\n  let cloneObj = new obj.constructor();\n  if (hash.get(obj)) return hash.get(obj)\n  hash.set(obj, clonedObj)\n  for (let key in obj) {\n    if(obj.hasOwnProperty(key)){\n      cloneObj[key] = deepClone(obj[key])\n    }\n  }\n  return cloneObj;\n}\n```\n\n1. JSON.parse(JSON.stringify()) **方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则**，因为这两者基于JSON.stringify和JSON.parse处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为null）了\n2. lodash的_.cloneDeep\n3. jQuery.extend()\n\n### 如何判断变量是不是数组\n\n5种\n\n### map forEach\n\nmap 会返回新数组 forEach不会\n\nmap支持链式调用 forEach不会\n\nforeach不支持链式调用，而map支持链式调用，可以继续对返回的新数组进行操作。\n\n### http 1 1.1 2 3\n\n### vue 2.3区别 \n\nhttps://juejin.cn/post/7203195123433734203\n\n### Vue3 组件通信\n\n### 对象存储\n\n![image-20240106124402037](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/202401061244087.png)\n","source":"_posts/前端学习计划_2.md","raw":"---\ntitle: 前端学习计划_2\ndate: 2024-1-4 21:23:34\ntags:\n- 前端学习计划\n- 前端\n- js\ncategories: \n- 笔记\n---\n\n\n\n<!-- more -->\n\n### Map WeakMap\n\n`WeakMap `键要是对象 键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内\n\n没有`clear` 和 `size`方法\n\n> WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n\n### JSON\n\n大多数的 js 对象是不符合 JSON 对象的格式的\n\n`JSON.stringify`\n\n`JSON.parse`\n\n\n\n### 类数组对象\n\n常见的类数组对象有`arguments` 和 `Dom` \n\n有数字索引和`length`属性 不具备数组所有属性和方法\n\n``` js\n//几种方法\n[...arrLike\t] \nArray.prototype.slice.call(arrLike) \nArray.prototype.concat.call([], arrLike ) \nArray.from(arrLike)\n```\n\n### this bind apply call\n\n不属于任何对象，非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined\n\n``` js\nvar name = \"windowsName\";\nvar a = {\n    // name: \"Cherry\",\n    fn : function () {\n        console.log(this.name);\n    }\n}\nwindow.a.fn();\n```\n\n**this 永远指向最后调用它的那个对象**, 最后调用 fn 的对象是 a，所以就算 a 中没有 name 这个属性，也不会继续向上一个对象寻找 `this.name`，而是直接输出 `undefined`\n\n``` js\nvar name = \"windowsName\";\nvar a = {\n    name : null,\n    // name: \"Cherry\",\n    fn : function () {\n        console.log(this.name);\n    }\n}\n\nvar f = a.fn;\nf();\n```\n\n``` js\nvar name = \"windowsName\";\n\nfunction fn() {\n    var name = 'Cherry';\n    innerFunction();\n    function innerFunction() {\n        console.log(this.name);      // windowsName\n    }\n}\n\nfn()\n```\n\n```js\n//ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。\n//箭头函数不能作为构造函数使用\n//构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，\nvar name = \"windowsName\";\nvar a = {\n    name : \"Cherry\",\n\n    func1: function () {\n        console.log(this.name)     \n    },\n\n    func2: function () {\n        setTimeout( () => {\n            this.func1()\n        },100);\n    }\n\n};\n\na.func2()     // Cherry\n```\n\n再用4种方式解决上面的调用问题\n\n```js\n1,2,3,4\n```\n\n其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。\n\ncall 的语法为：\n\n```\n复制代码fun.call(thisArg[, arg1[, arg2[, ...]]])\n```\n\n所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。\n\n函数调用问题 https://juejin.cn/post/6844903496253177863\n\n1. 以函数的形式调用时，this永远都是window\n2. 以方法的形式调用时，this就是调用方法的对象\n3. 以构造函数的形式调用时，this就是新创建的对象\n4. 使用call和apply调用时，this就是指定的那个对象\n5. 在全局作用域中this代表window\n\n### sort\n\n按照字典序\n\n(a, b) => a - b 实现正序\n\n### 常见位运算符\n\n| 运算符 | 描述 | 运算规则                                                 |\n| ------ | ---- | -------------------------------------------------------- |\n| &      | 与   | 两个位都为1时，结果才为1                                 |\n| \\|     | 或   | 两个位都为0时，结果才为0                                 |\n| ^      | 异或 | 两个位相同为0，相异为1                                   |\n| ~      | 取反 | 0变1，1变0                                               |\n| <<     | 左移 | 各二进制位全部左移若干位，高位丢弃，低位补0              |\n| >>     | 右移 | 各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃 |\n\n（1）判断奇偶\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((i & 1) == 0)代替if (i % 2 == 0)来判断a是不是偶数。\n\n### 原码补码反码\n\n1. 原码 原码就是一个数的二进制数。\n2. 反码\n\n​\t\t正数的反码与原码相同，如：10 反码为 0000 1010\n\n​\t\t负数的反码为除符号位，按位取反，即0变1，1变0。\n\n3. 补码\n\n   正数的补码与原码相同，如：10 补码为 0000 1010\n\n   负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n### 什么是 DOM 和 BOM？\n`DOM` 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\n`BOM `指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，\n\n并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n\n### src 和 href区别\n\nsrc \n\n- 引用 CSS 文件：`href=\"cssfile.css\"`在链接标记内。\n- 引用 JS 文件：`src=\"myscript.js\"`在 script 标签内。\n  - 引用图像文件：`src=\"mypic.jpg\"`在图像标签内。 浏览器暂停加载，直到获取并加载图像\n- 引用另一个网页：`href=\"http://www.webpage.com\"`在锚标记内。\n\n```HTML\n<script src=\"script.js\"></script> //页面的加载和处理会被暂停 是建议把JS文件放到底部加载的原因\n<link href=\"style.css\" rel=\"stylesheet\" /> //页面解析不会暂停\n```\n\n`script`根据*HTML 5*规范，该元素具有两个全局属性，它们会更改`src`属性的功能：`async`和`defer`。这些改变了脚本（嵌入内联或从外部文件导入）的执行方式。\n\n这意味着可以使用这些属性选择三种可能的模式：\n\n1. 当该`async`属性存在时，脚本将在可用时立即异步执行。\n2. 当该`async`属性不存在但`defer`存在该属性时，则在页面解析完成后执行脚本。\n3. 如果这两个属性都不存在，则在用户代理继续解析页面之前立即获取并执行脚本。\n\n` defer ` 不阻塞html\n\n` async ` 阻塞html，请求完立刻执行\n\n### css选择器\n\nid 100\n\nclass 10\n\n属性 10\n\n伪类\n\n标签选择器\n\n伪元素\n\n相邻兄弟\n\n父子\n\n后代选择\n\n通配符\n\n### 哪些元素会生成BFC\n\n```javascript\n1.根元素\n2.float属性不为none\n3.position为absolute或fixed\n4.display为inline-block\n5.overflow不为visible\n```\n\n### 相对定位绝对定位\n\n图层覆盖顺序由上到下为：相对>绝对>默认，初始状态\n\n相对定位（ 相对于元素在正常文档流中的位置进行定位的，当使用相对定位（Relative positioning）时，元素的定位是相对于其在文档流中原本所占据的位置进行的。换句话说，元素在相对定位下会保留其在文档流中的空间，并且通过使用 `top`、`bottom`、`left`、`right` 属性，可以相对于元素原本位置进行移动，而不会影响其他元素的布局。\n\n举个例子，如果对一个元素使用相对定位，并设置 `top: 10px;`，那么这个元素会相对于它原本在文档流中的位置向下移动 10 个像素，但是其他元素不会受到影响，它们仍然会把这个元素原本所占据的空间保留出来。\n\n相对于其最近的已定位（positioned）祖先元素进行定位的。如果没有已定位的祖先元素，元素会相对于文档的根元素（HTML 元素）\t\n\n\"已定位的祖先元素\"指的是其父元素或更上层的祖先元素中设置了定位属性（如 `position: relative`、`position: absolute`、`position: fixed`）\n\n### less优缺点\n\n1. 可定义变量\n2. 嵌套 清晰\n3. 混合mIxins\n4. 简单的数学运算\n5.  导入 less\n\n### Sass优缺点\n\n+继承 +条件语句\n\n缺点 学习曲线 需要额外的工具和编译步骤 编译时间 依赖问题 增加排查和修复错误的难度 兼容性问题\n\n### js类型检查\n\ntypeof 只能原始数据类型\n\ninstance of \n\nconstructor\n\nObject.prototype.toString.call()\n\n### js异步编程\n\nPromise\n\ngenerator\n\nyield\n\ncallback\n\nasync await \n\n### 实现深拷贝\n\n- 浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以**如果其中一个对象改变了这个地址，就会影响到另一个对象**。\n- 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且**修改新对象不会影响原对象**。\n\n```JS\nconst deepClone = (obj, hash = new WeakMap()) => {\n\tif(obj === null) return obj\n  if (obj instanceof Date) return new Date(obj)\n  if (obj instanceof RegExp) return new RegExp(obj)\n  if (typeof obj !== 'object') return obj\n  let cloneObj = new obj.constructor();\n  if (hash.get(obj)) return hash.get(obj)\n  hash.set(obj, clonedObj)\n  for (let key in obj) {\n    if(obj.hasOwnProperty(key)){\n      cloneObj[key] = deepClone(obj[key])\n    }\n  }\n  return cloneObj;\n}\n```\n\n1. JSON.parse(JSON.stringify()) **方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则**，因为这两者基于JSON.stringify和JSON.parse处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为null）了\n2. lodash的_.cloneDeep\n3. jQuery.extend()\n\n### 如何判断变量是不是数组\n\n5种\n\n### map forEach\n\nmap 会返回新数组 forEach不会\n\nmap支持链式调用 forEach不会\n\nforeach不支持链式调用，而map支持链式调用，可以继续对返回的新数组进行操作。\n\n### http 1 1.1 2 3\n\n### vue 2.3区别 \n\nhttps://juejin.cn/post/7203195123433734203\n\n### Vue3 组件通信\n\n### 对象存储\n\n![image-20240106124402037](https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/202401061244087.png)\n","slug":"前端学习计划_2","published":1,"updated":"2024-01-06T05:15:43.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x440017q05z9tp6c316","content":"<span id=\"more\"></span>\n\n<h3 id=\"Map-WeakMap\"><a href=\"#Map-WeakMap\" class=\"headerlink\" title=\"Map WeakMap\"></a>Map WeakMap</h3><p><code>WeakMap </code>键要是对象 键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内</p>\n<p>没有<code>clear</code> 和 <code>size</code>方法</p>\n<blockquote>\n<p>WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n</blockquote>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><p>大多数的 js 对象是不符合 JSON 对象的格式的</p>\n<p><code>JSON.stringify</code></p>\n<p><code>JSON.parse</code></p>\n<h3 id=\"类数组对象\"><a href=\"#类数组对象\" class=\"headerlink\" title=\"类数组对象\"></a>类数组对象</h3><p>常见的类数组对象有<code>arguments</code> 和 <code>Dom</code> </p>\n<p>有数字索引和<code>length</code>属性 不具备数组所有属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//几种方法</span></span><br><span class=\"line\">[...arrLike\t] </span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrLike) </span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">call</span>([], arrLike ) </span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrLike)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this-bind-apply-call\"><a href=\"#this-bind-apply-call\" class=\"headerlink\" title=\"this bind apply call\"></a>this bind apply call</h3><p>不属于任何对象，非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// name: &quot;Cherry&quot;,</span></span><br><span class=\"line\">    fn : <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">a</span>.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>this 永远指向最后调用它的那个对象</strong>, 最后调用 fn 的对象是 a，所以就算 a 中没有 name 这个属性，也不会继续向上一个对象寻找 <code>this.name</code>，而是直接输出 <code>undefined</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// name: &quot;Cherry&quot;,</span></span><br><span class=\"line\">    fn : <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = a.<span class=\"property\">fn</span>;</span><br><span class=\"line\"><span class=\"title function_\">f</span>();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Cherry&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">innerFunction</span>();</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">innerFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);      <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</span></span><br><span class=\"line\"><span class=\"comment\">//箭头函数不能作为构造函数使用</span></span><br><span class=\"line\"><span class=\"comment\">//构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&quot;Cherry&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">func1</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)     </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">func2</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">func1</span>()</span><br><span class=\"line\">        &#125;,<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">func2</span>()     <span class=\"comment\">// Cherry</span></span><br></pre></td></tr></table></figure>\n\n<p>再用4种方式解决上面的调用问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。</p>\n<p>call 的语法为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>\n\n<p>所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。</p>\n<p>函数调用问题 <a href=\"https://juejin.cn/post/6844903496253177863\">https://juejin.cn/post/6844903496253177863</a></p>\n<ol>\n<li>以函数的形式调用时，this永远都是window</li>\n<li>以方法的形式调用时，this就是调用方法的对象</li>\n<li>以构造函数的形式调用时，this就是新创建的对象</li>\n<li>使用call和apply调用时，this就是指定的那个对象</li>\n<li>在全局作用域中this代表window</li>\n</ol>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>按照字典序</p>\n<p>(a, b) =&gt; a - b 实现正序</p>\n<h3 id=\"常见位运算符\"><a href=\"#常见位运算符\" class=\"headerlink\" title=\"常见位运算符\"></a>常见位运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>与</td>\n<td>两个位都为1时，结果才为1</td>\n</tr>\n<tr>\n<td>|</td>\n<td>或</td>\n<td>两个位都为0时，结果才为0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>两个位相同为0，相异为1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取反</td>\n<td>0变1，1变0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>各二进制位全部左移若干位，高位丢弃，低位补0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃</td>\n</tr>\n</tbody></table>\n<p>（1）判断奇偶<br>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((i &amp; 1) == 0)代替if (i % 2 == 0)来判断a是不是偶数。</p>\n<h3 id=\"原码补码反码\"><a href=\"#原码补码反码\" class=\"headerlink\" title=\"原码补码反码\"></a>原码补码反码</h3><ol>\n<li>原码 原码就是一个数的二进制数。</li>\n<li>反码</li>\n</ol>\n<p>​        正数的反码与原码相同，如：10 反码为 0000 1010</p>\n<p>​        负数的反码为除符号位，按位取反，即0变1，1变0。</p>\n<ol start=\"3\">\n<li><p>补码</p>\n<p>正数的补码与原码相同，如：10 补码为 0000 1010</p>\n<p>负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。</p>\n</li>\n</ol>\n<h3 id=\"什么是-DOM-和-BOM？\"><a href=\"#什么是-DOM-和-BOM？\" class=\"headerlink\" title=\"什么是 DOM 和 BOM？\"></a>什么是 DOM 和 BOM？</h3><p><code>DOM</code> 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。<br><code>BOM </code>指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，</p>\n<p>并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</p>\n<h3 id=\"src-和-href区别\"><a href=\"#src-和-href区别\" class=\"headerlink\" title=\"src 和 href区别\"></a>src 和 href区别</h3><p>src </p>\n<ul>\n<li>引用 CSS 文件：<code>href=&quot;cssfile.css&quot;</code>在链接标记内。</li>\n<li>引用 JS 文件：<code>src=&quot;myscript.js&quot;</code>在 script 标签内。<ul>\n<li>引用图像文件：<code>src=&quot;mypic.jpg&quot;</code>在图像标签内。 浏览器暂停加载，直到获取并加载图像</li>\n</ul>\n</li>\n<li>引用另一个网页：<code>href=&quot;http://www.webpage.com&quot;</code>在锚标记内。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;script.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> //页面的加载和处理会被暂停 是建议把JS文件放到底部加载的原因</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;style.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span> //页面解析不会暂停</span><br></pre></td></tr></table></figure>\n\n<p><code>script</code>根据<em>HTML 5</em>规范，该元素具有两个全局属性，它们会更改<code>src</code>属性的功能：<code>async</code>和<code>defer</code>。这些改变了脚本（嵌入内联或从外部文件导入）的执行方式。</p>\n<p>这意味着可以使用这些属性选择三种可能的模式：</p>\n<ol>\n<li>当该<code>async</code>属性存在时，脚本将在可用时立即异步执行。</li>\n<li>当该<code>async</code>属性不存在但<code>defer</code>存在该属性时，则在页面解析完成后执行脚本。</li>\n<li>如果这两个属性都不存在，则在用户代理继续解析页面之前立即获取并执行脚本。</li>\n</ol>\n<p><code>defer</code> 不阻塞html</p>\n<p><code>async</code> 阻塞html，请求完立刻执行</p>\n<h3 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h3><p>id 100</p>\n<p>class 10</p>\n<p>属性 10</p>\n<p>伪类</p>\n<p>标签选择器</p>\n<p>伪元素</p>\n<p>相邻兄弟</p>\n<p>父子</p>\n<p>后代选择</p>\n<p>通配符</p>\n<h3 id=\"哪些元素会生成BFC\"><a href=\"#哪些元素会生成BFC\" class=\"headerlink\" title=\"哪些元素会生成BFC\"></a>哪些元素会生成BFC</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>根元素</span><br><span class=\"line\"><span class=\"number\">2.</span>float属性不为none</span><br><span class=\"line\"><span class=\"number\">3.</span>position为absolute或fixed</span><br><span class=\"line\"><span class=\"number\">4.</span>display为inline-block</span><br><span class=\"line\"><span class=\"number\">5.</span>overflow不为visible</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相对定位绝对定位\"><a href=\"#相对定位绝对定位\" class=\"headerlink\" title=\"相对定位绝对定位\"></a>相对定位绝对定位</h3><p>图层覆盖顺序由上到下为：相对&gt;绝对&gt;默认，初始状态</p>\n<p>相对定位（ 相对于元素在正常文档流中的位置进行定位的，当使用相对定位（Relative positioning）时，元素的定位是相对于其在文档流中原本所占据的位置进行的。换句话说，元素在相对定位下会保留其在文档流中的空间，并且通过使用 <code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code> 属性，可以相对于元素原本位置进行移动，而不会影响其他元素的布局。</p>\n<p>举个例子，如果对一个元素使用相对定位，并设置 <code>top: 10px;</code>，那么这个元素会相对于它原本在文档流中的位置向下移动 10 个像素，但是其他元素不会受到影响，它们仍然会把这个元素原本所占据的空间保留出来。</p>\n<p>相对于其最近的已定位（positioned）祖先元素进行定位的。如果没有已定位的祖先元素，元素会相对于文档的根元素（HTML 元素）    </p>\n<p>“已定位的祖先元素”指的是其父元素或更上层的祖先元素中设置了定位属性（如 <code>position: relative</code>、<code>position: absolute</code>、<code>position: fixed</code>）</p>\n<h3 id=\"less优缺点\"><a href=\"#less优缺点\" class=\"headerlink\" title=\"less优缺点\"></a>less优缺点</h3><ol>\n<li>可定义变量</li>\n<li>嵌套 清晰</li>\n<li>混合mIxins</li>\n<li>简单的数学运算</li>\n<li> 导入 less</li>\n</ol>\n<h3 id=\"Sass优缺点\"><a href=\"#Sass优缺点\" class=\"headerlink\" title=\"Sass优缺点\"></a>Sass优缺点</h3><p>+继承 +条件语句</p>\n<p>缺点 学习曲线 需要额外的工具和编译步骤 编译时间 依赖问题 增加排查和修复错误的难度 兼容性问题</p>\n<h3 id=\"js类型检查\"><a href=\"#js类型检查\" class=\"headerlink\" title=\"js类型检查\"></a>js类型检查</h3><p>typeof 只能原始数据类型</p>\n<p>instance of </p>\n<p>constructor</p>\n<p>Object.prototype.toString.call()</p>\n<h3 id=\"js异步编程\"><a href=\"#js异步编程\" class=\"headerlink\" title=\"js异步编程\"></a>js异步编程</h3><p>Promise</p>\n<p>generator</p>\n<p>yield</p>\n<p>callback</p>\n<p>async await </p>\n<h3 id=\"实现深拷贝\"><a href=\"#实现深拷贝\" class=\"headerlink\" title=\"实现深拷贝\"></a>实现深拷贝</h3><ul>\n<li>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以<strong>如果其中一个对象改变了这个地址，就会影响到另一个对象</strong>。</li>\n<li>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且<strong>修改新对象不会影响原对象</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deepClone</span> = (<span class=\"params\">obj, hash = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = <span class=\"keyword\">new</span> obj.<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hash.<span class=\"title function_\">get</span>(obj)) <span class=\"keyword\">return</span> hash.<span class=\"title function_\">get</span>(obj)</span><br><span class=\"line\">  hash.<span class=\"title function_\">set</span>(obj, clonedObj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(key))&#123;</span><br><span class=\"line\">      cloneObj[key] = <span class=\"title function_\">deepClone</span>(obj[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>JSON.parse(JSON.stringify()) <strong>方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则</strong>，因为这两者基于JSON.stringify和JSON.parse处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为null）了</li>\n<li>lodash的_.cloneDeep</li>\n<li>jQuery.extend()</li>\n</ol>\n<h3 id=\"如何判断变量是不是数组\"><a href=\"#如何判断变量是不是数组\" class=\"headerlink\" title=\"如何判断变量是不是数组\"></a>如何判断变量是不是数组</h3><p>5种</p>\n<h3 id=\"map-forEach\"><a href=\"#map-forEach\" class=\"headerlink\" title=\"map forEach\"></a>map forEach</h3><p>map 会返回新数组 forEach不会</p>\n<p>map支持链式调用 forEach不会</p>\n<p>foreach不支持链式调用，而map支持链式调用，可以继续对返回的新数组进行操作。</p>\n<h3 id=\"http-1-1-1-2-3\"><a href=\"#http-1-1-1-2-3\" class=\"headerlink\" title=\"http 1 1.1 2 3\"></a>http 1 1.1 2 3</h3><h3 id=\"vue-2-3区别\"><a href=\"#vue-2-3区别\" class=\"headerlink\" title=\"vue 2.3区别\"></a>vue 2.3区别</h3><p><a href=\"https://juejin.cn/post/7203195123433734203\">https://juejin.cn/post/7203195123433734203</a></p>\n<h3 id=\"Vue3-组件通信\"><a href=\"#Vue3-组件通信\" class=\"headerlink\" title=\"Vue3 组件通信\"></a>Vue3 组件通信</h3><h3 id=\"对象存储\"><a href=\"#对象存储\" class=\"headerlink\" title=\"对象存储\"></a>对象存储</h3><p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/202401061244087.png\" alt=\"image-20240106124402037\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Map-WeakMap\"><a href=\"#Map-WeakMap\" class=\"headerlink\" title=\"Map WeakMap\"></a>Map WeakMap</h3><p><code>WeakMap </code>键要是对象 键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内</p>\n<p>没有<code>clear</code> 和 <code>size</code>方法</p>\n<blockquote>\n<p>WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n</blockquote>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><p>大多数的 js 对象是不符合 JSON 对象的格式的</p>\n<p><code>JSON.stringify</code></p>\n<p><code>JSON.parse</code></p>\n<h3 id=\"类数组对象\"><a href=\"#类数组对象\" class=\"headerlink\" title=\"类数组对象\"></a>类数组对象</h3><p>常见的类数组对象有<code>arguments</code> 和 <code>Dom</code> </p>\n<p>有数字索引和<code>length</code>属性 不具备数组所有属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//几种方法</span></span><br><span class=\"line\">[...arrLike\t] </span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrLike) </span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">call</span>([], arrLike ) </span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrLike)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this-bind-apply-call\"><a href=\"#this-bind-apply-call\" class=\"headerlink\" title=\"this bind apply call\"></a>this bind apply call</h3><p>不属于任何对象，非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// name: &quot;Cherry&quot;,</span></span><br><span class=\"line\">    fn : <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">a</span>.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>this 永远指向最后调用它的那个对象</strong>, 最后调用 fn 的对象是 a，所以就算 a 中没有 name 这个属性，也不会继续向上一个对象寻找 <code>this.name</code>，而是直接输出 <code>undefined</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// name: &quot;Cherry&quot;,</span></span><br><span class=\"line\">    fn : <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = a.<span class=\"property\">fn</span>;</span><br><span class=\"line\"><span class=\"title function_\">f</span>();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Cherry&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">innerFunction</span>();</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">innerFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);      <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</span></span><br><span class=\"line\"><span class=\"comment\">//箭头函数不能作为构造函数使用</span></span><br><span class=\"line\"><span class=\"comment\">//构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;windowsName&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&quot;Cherry&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">func1</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)     </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">func2</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">func1</span>()</span><br><span class=\"line\">        &#125;,<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">func2</span>()     <span class=\"comment\">// Cherry</span></span><br></pre></td></tr></table></figure>\n\n<p>再用4种方式解决上面的调用问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。</p>\n<p>call 的语法为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>\n\n<p>所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。</p>\n<p>函数调用问题 <a href=\"https://juejin.cn/post/6844903496253177863\">https://juejin.cn/post/6844903496253177863</a></p>\n<ol>\n<li>以函数的形式调用时，this永远都是window</li>\n<li>以方法的形式调用时，this就是调用方法的对象</li>\n<li>以构造函数的形式调用时，this就是新创建的对象</li>\n<li>使用call和apply调用时，this就是指定的那个对象</li>\n<li>在全局作用域中this代表window</li>\n</ol>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>按照字典序</p>\n<p>(a, b) =&gt; a - b 实现正序</p>\n<h3 id=\"常见位运算符\"><a href=\"#常见位运算符\" class=\"headerlink\" title=\"常见位运算符\"></a>常见位运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>与</td>\n<td>两个位都为1时，结果才为1</td>\n</tr>\n<tr>\n<td>|</td>\n<td>或</td>\n<td>两个位都为0时，结果才为0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>两个位相同为0，相异为1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取反</td>\n<td>0变1，1变0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>各二进制位全部左移若干位，高位丢弃，低位补0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃</td>\n</tr>\n</tbody></table>\n<p>（1）判断奇偶<br>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((i &amp; 1) == 0)代替if (i % 2 == 0)来判断a是不是偶数。</p>\n<h3 id=\"原码补码反码\"><a href=\"#原码补码反码\" class=\"headerlink\" title=\"原码补码反码\"></a>原码补码反码</h3><ol>\n<li>原码 原码就是一个数的二进制数。</li>\n<li>反码</li>\n</ol>\n<p>​        正数的反码与原码相同，如：10 反码为 0000 1010</p>\n<p>​        负数的反码为除符号位，按位取反，即0变1，1变0。</p>\n<ol start=\"3\">\n<li><p>补码</p>\n<p>正数的补码与原码相同，如：10 补码为 0000 1010</p>\n<p>负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。</p>\n</li>\n</ol>\n<h3 id=\"什么是-DOM-和-BOM？\"><a href=\"#什么是-DOM-和-BOM？\" class=\"headerlink\" title=\"什么是 DOM 和 BOM？\"></a>什么是 DOM 和 BOM？</h3><p><code>DOM</code> 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。<br><code>BOM </code>指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，</p>\n<p>并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</p>\n<h3 id=\"src-和-href区别\"><a href=\"#src-和-href区别\" class=\"headerlink\" title=\"src 和 href区别\"></a>src 和 href区别</h3><p>src </p>\n<ul>\n<li>引用 CSS 文件：<code>href=&quot;cssfile.css&quot;</code>在链接标记内。</li>\n<li>引用 JS 文件：<code>src=&quot;myscript.js&quot;</code>在 script 标签内。<ul>\n<li>引用图像文件：<code>src=&quot;mypic.jpg&quot;</code>在图像标签内。 浏览器暂停加载，直到获取并加载图像</li>\n</ul>\n</li>\n<li>引用另一个网页：<code>href=&quot;http://www.webpage.com&quot;</code>在锚标记内。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;script.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> //页面的加载和处理会被暂停 是建议把JS文件放到底部加载的原因</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;style.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span> //页面解析不会暂停</span><br></pre></td></tr></table></figure>\n\n<p><code>script</code>根据<em>HTML 5</em>规范，该元素具有两个全局属性，它们会更改<code>src</code>属性的功能：<code>async</code>和<code>defer</code>。这些改变了脚本（嵌入内联或从外部文件导入）的执行方式。</p>\n<p>这意味着可以使用这些属性选择三种可能的模式：</p>\n<ol>\n<li>当该<code>async</code>属性存在时，脚本将在可用时立即异步执行。</li>\n<li>当该<code>async</code>属性不存在但<code>defer</code>存在该属性时，则在页面解析完成后执行脚本。</li>\n<li>如果这两个属性都不存在，则在用户代理继续解析页面之前立即获取并执行脚本。</li>\n</ol>\n<p><code>defer</code> 不阻塞html</p>\n<p><code>async</code> 阻塞html，请求完立刻执行</p>\n<h3 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h3><p>id 100</p>\n<p>class 10</p>\n<p>属性 10</p>\n<p>伪类</p>\n<p>标签选择器</p>\n<p>伪元素</p>\n<p>相邻兄弟</p>\n<p>父子</p>\n<p>后代选择</p>\n<p>通配符</p>\n<h3 id=\"哪些元素会生成BFC\"><a href=\"#哪些元素会生成BFC\" class=\"headerlink\" title=\"哪些元素会生成BFC\"></a>哪些元素会生成BFC</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>根元素</span><br><span class=\"line\"><span class=\"number\">2.</span>float属性不为none</span><br><span class=\"line\"><span class=\"number\">3.</span>position为absolute或fixed</span><br><span class=\"line\"><span class=\"number\">4.</span>display为inline-block</span><br><span class=\"line\"><span class=\"number\">5.</span>overflow不为visible</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相对定位绝对定位\"><a href=\"#相对定位绝对定位\" class=\"headerlink\" title=\"相对定位绝对定位\"></a>相对定位绝对定位</h3><p>图层覆盖顺序由上到下为：相对&gt;绝对&gt;默认，初始状态</p>\n<p>相对定位（ 相对于元素在正常文档流中的位置进行定位的，当使用相对定位（Relative positioning）时，元素的定位是相对于其在文档流中原本所占据的位置进行的。换句话说，元素在相对定位下会保留其在文档流中的空间，并且通过使用 <code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code> 属性，可以相对于元素原本位置进行移动，而不会影响其他元素的布局。</p>\n<p>举个例子，如果对一个元素使用相对定位，并设置 <code>top: 10px;</code>，那么这个元素会相对于它原本在文档流中的位置向下移动 10 个像素，但是其他元素不会受到影响，它们仍然会把这个元素原本所占据的空间保留出来。</p>\n<p>相对于其最近的已定位（positioned）祖先元素进行定位的。如果没有已定位的祖先元素，元素会相对于文档的根元素（HTML 元素）    </p>\n<p>“已定位的祖先元素”指的是其父元素或更上层的祖先元素中设置了定位属性（如 <code>position: relative</code>、<code>position: absolute</code>、<code>position: fixed</code>）</p>\n<h3 id=\"less优缺点\"><a href=\"#less优缺点\" class=\"headerlink\" title=\"less优缺点\"></a>less优缺点</h3><ol>\n<li>可定义变量</li>\n<li>嵌套 清晰</li>\n<li>混合mIxins</li>\n<li>简单的数学运算</li>\n<li> 导入 less</li>\n</ol>\n<h3 id=\"Sass优缺点\"><a href=\"#Sass优缺点\" class=\"headerlink\" title=\"Sass优缺点\"></a>Sass优缺点</h3><p>+继承 +条件语句</p>\n<p>缺点 学习曲线 需要额外的工具和编译步骤 编译时间 依赖问题 增加排查和修复错误的难度 兼容性问题</p>\n<h3 id=\"js类型检查\"><a href=\"#js类型检查\" class=\"headerlink\" title=\"js类型检查\"></a>js类型检查</h3><p>typeof 只能原始数据类型</p>\n<p>instance of </p>\n<p>constructor</p>\n<p>Object.prototype.toString.call()</p>\n<h3 id=\"js异步编程\"><a href=\"#js异步编程\" class=\"headerlink\" title=\"js异步编程\"></a>js异步编程</h3><p>Promise</p>\n<p>generator</p>\n<p>yield</p>\n<p>callback</p>\n<p>async await </p>\n<h3 id=\"实现深拷贝\"><a href=\"#实现深拷贝\" class=\"headerlink\" title=\"实现深拷贝\"></a>实现深拷贝</h3><ul>\n<li>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以<strong>如果其中一个对象改变了这个地址，就会影响到另一个对象</strong>。</li>\n<li>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且<strong>修改新对象不会影响原对象</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deepClone</span> = (<span class=\"params\">obj, hash = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = <span class=\"keyword\">new</span> obj.<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hash.<span class=\"title function_\">get</span>(obj)) <span class=\"keyword\">return</span> hash.<span class=\"title function_\">get</span>(obj)</span><br><span class=\"line\">  hash.<span class=\"title function_\">set</span>(obj, clonedObj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(key))&#123;</span><br><span class=\"line\">      cloneObj[key] = <span class=\"title function_\">deepClone</span>(obj[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>JSON.parse(JSON.stringify()) <strong>方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则</strong>，因为这两者基于JSON.stringify和JSON.parse处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为null）了</li>\n<li>lodash的_.cloneDeep</li>\n<li>jQuery.extend()</li>\n</ol>\n<h3 id=\"如何判断变量是不是数组\"><a href=\"#如何判断变量是不是数组\" class=\"headerlink\" title=\"如何判断变量是不是数组\"></a>如何判断变量是不是数组</h3><p>5种</p>\n<h3 id=\"map-forEach\"><a href=\"#map-forEach\" class=\"headerlink\" title=\"map forEach\"></a>map forEach</h3><p>map 会返回新数组 forEach不会</p>\n<p>map支持链式调用 forEach不会</p>\n<p>foreach不支持链式调用，而map支持链式调用，可以继续对返回的新数组进行操作。</p>\n<h3 id=\"http-1-1-1-2-3\"><a href=\"#http-1-1-1-2-3\" class=\"headerlink\" title=\"http 1 1.1 2 3\"></a>http 1 1.1 2 3</h3><h3 id=\"vue-2-3区别\"><a href=\"#vue-2-3区别\" class=\"headerlink\" title=\"vue 2.3区别\"></a>vue 2.3区别</h3><p><a href=\"https://juejin.cn/post/7203195123433734203\">https://juejin.cn/post/7203195123433734203</a></p>\n<h3 id=\"Vue3-组件通信\"><a href=\"#Vue3-组件通信\" class=\"headerlink\" title=\"Vue3 组件通信\"></a>Vue3 组件通信</h3><h3 id=\"对象存储\"><a href=\"#对象存储\" class=\"headerlink\" title=\"对象存储\"></a>对象存储</h3><p><img src=\"https://36038098-1323630637.cos.ap-nanjing.myqcloud.com/images/202401061244087.png\" alt=\"image-20240106124402037\"></p>"},{"title":"前端学习计划_3","date":"2024-01-15T15:31:00.000Z","_content":"\n\n\n<!-- more -->\n\n###  说说他们的区别arcgis mapbox cesium\n\n等待解决\n\n### 正则方面\n\n元字符\n\n| 元字符 | 解释                                       | 元字符 | 解释             |\n| ------ | ------------------------------------------ | ------ | ---------------- |\n| \\d     | 数字                                       | \\D     | 非数字           |\n| \\w     | 字母数字下滑线                             | \\W     | 非字母数字下滑线 |\n| \\s     | 空格                                       | \\S     | 非空格           |\n| ·      | 匹配任意除了换行符（回车键）之外的单个字符 |        |                  |\n\n### vue中 computed和watch\n\ncomputed：支持缓存\n\nwatch：数据变化就会触发响应操作\n\n对deep的优化如\n\n```js\nwatch: {\n  obj: {\n    handler(newName, oldName) {\n      console.log('obj.a changed');\n    },\n    immediate: true,\n    deep: true\n  }\n} \n```\n\n``` js\nwatch: {\n  'obj.a': {\n    handler(newName, oldName) {\n      console.log('obj.a changed');\n    },\n    immediate: true,\n    // deep: true\n  }\n} \n```\n\n### vue slot\n\n插槽 三种\n\n匿名插槽（一个组件只有一个） 具名插槽（vm.$slot.xxx） 作用域插槽\n\n### 如何保存页面的当前的状态\n\n1. localstorage 把state JSON.stringyfy()\n\n​\t优点 兼容性好等 缺点 参考JSON深拷贝的缺点 RegExp 和 Date 字符串\n\n2. vue router 路由传参 可以RegExp 和 Date\n\n3. keep-alive\n\n   ``` html\n   <keep-alive>\n   \t<router-view v-if=\"$route.meta.keepAlive\"></router-view>\n   </kepp-alive>\n   ```\n\n   ```js\n   {\n     path: '/',\n     name: 'xxx',\n     component: ()=>import('../src/views/xxx.vue'),\n     meta:{\n       keepAlive: true // 需要被缓存\n     }\n   },\n   ```\n\n### vue常见修饰符\n\nstop = event.stopPropagation\n\nprevent = event.preventDafault\n\nself只有当`event.target` 是当前元素自身时才会触发事件回调函数\n\ncapture 谁写谁先 但是父优先级更大 捕获\n\n once passive capture 这可能需要实操 才能确定性质\n\n### vue的key\n\n不写key的话vue会把index自动作为key，有时候欺骗diff算法，真实dom会出错\n\n若虚拟dom不变，则直接使用之前的真实dom \n\n### vue响应式 递归observer\n\n空了在写下\n\nvue2对数组里的元素没有绑定get setter，只能用vue封装过得可以改变原数组方法，如 push pop shift unshift splice sort reverse \n\n这里的push已经不是数组原型对象的push了 也可以用vm.$set也是响应式  \n\nVue的响应式数组机制是基于两个核心概念：**依赖收集（Dependency Tracking）** 和 **派发更新（Dispatching Updates）**。\n\n1. **依赖收集（Dependency Tracking）**：\n   - 当组件渲染时，Vue会追踪所有访问过的属性（包括数组的每个元素）的依赖关系。\n   - 对于数组，Vue会重写数组的原型方法，如 `push`、`pop`、`shift` 等，以便在调用这些方法时能够通知 Vue 进行依赖收集。\n   - 当访问数组的某个元素时，Vue会将这个访问操作记录下来，并建立一个与该数组元素相关的依赖关系。\n2. **派发更新（Dispatching Updates）**：\n   - 当数组发生变化（调用变异方法）时，Vue能够感知到这个变化，并通知所有依赖于这个数组的地方进行更新。\n   - Vue通过依赖收集建立的依赖关系知道哪些地方依赖于这个数组，然后通过派发更新机制通知相关的地方进行重新渲染。\n\n下面是一个简化的例子，说明Vue是如何拦截数组的变异方法：\n\n```js\njavascriptCopy code\n// 简化版的Vue响应式数组拦截示例\nconst originalArrayProto = Array.prototype;\nconst arrayMethods = Object.create(originalArrayProto);\n\n['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(method => {\n  // 保存原始方法的引用\n  const original = originalArrayProto[method];\n\n  // 重写数组的变异方法\n  arrayMethods[method] = function (...args) {\n    // 调用原始方法\n    const result = original.apply(this, args);\n\n    // 派发更新，通知依赖进行重新渲染\n    // 这里省略了具体的派发更新逻辑\n    // 实际上会遍历依赖列表，通知依赖进行更新\n    console.log(`Array ${method} was called, dispatching updates`);\n\n    return result;\n  };\n});\n\n// 创建拦截的数组\nconst reactiveArray = [];\nreactiveArray.__proto__ = arrayMethods;\n\n// 使用拦截的数组\nreactiveArray.push(1); // 触发派发更新\nreactiveArray.pop();   // 触发派发更新\n```\n\n类似AOP 都涉及'横切关注点'\n\n### Vue set方法\n\nVue.set(vm.student, 'sex', '男')\nvm.$set(vm.student, 'sex', '男')\n\n只能给data中的某个对象添加属性 第一个参数不能是vm\n\nmethod中的this是vm\n\n### v-for\n\nv-for=\"(h,index) in student.hobby\"\n","source":"_posts/前端学习计划_3.md","raw":"---\ntitle: 前端学习计划_3\ndate: 2024-1-15 23:31:00\ntags:\n- 前端学习计划\n- 前端\n- web3D\n- Js\n- Vue\n- 正则\ncategories: \n- 笔记\n---\n\n\n\n<!-- more -->\n\n###  说说他们的区别arcgis mapbox cesium\n\n等待解决\n\n### 正则方面\n\n元字符\n\n| 元字符 | 解释                                       | 元字符 | 解释             |\n| ------ | ------------------------------------------ | ------ | ---------------- |\n| \\d     | 数字                                       | \\D     | 非数字           |\n| \\w     | 字母数字下滑线                             | \\W     | 非字母数字下滑线 |\n| \\s     | 空格                                       | \\S     | 非空格           |\n| ·      | 匹配任意除了换行符（回车键）之外的单个字符 |        |                  |\n\n### vue中 computed和watch\n\ncomputed：支持缓存\n\nwatch：数据变化就会触发响应操作\n\n对deep的优化如\n\n```js\nwatch: {\n  obj: {\n    handler(newName, oldName) {\n      console.log('obj.a changed');\n    },\n    immediate: true,\n    deep: true\n  }\n} \n```\n\n``` js\nwatch: {\n  'obj.a': {\n    handler(newName, oldName) {\n      console.log('obj.a changed');\n    },\n    immediate: true,\n    // deep: true\n  }\n} \n```\n\n### vue slot\n\n插槽 三种\n\n匿名插槽（一个组件只有一个） 具名插槽（vm.$slot.xxx） 作用域插槽\n\n### 如何保存页面的当前的状态\n\n1. localstorage 把state JSON.stringyfy()\n\n​\t优点 兼容性好等 缺点 参考JSON深拷贝的缺点 RegExp 和 Date 字符串\n\n2. vue router 路由传参 可以RegExp 和 Date\n\n3. keep-alive\n\n   ``` html\n   <keep-alive>\n   \t<router-view v-if=\"$route.meta.keepAlive\"></router-view>\n   </kepp-alive>\n   ```\n\n   ```js\n   {\n     path: '/',\n     name: 'xxx',\n     component: ()=>import('../src/views/xxx.vue'),\n     meta:{\n       keepAlive: true // 需要被缓存\n     }\n   },\n   ```\n\n### vue常见修饰符\n\nstop = event.stopPropagation\n\nprevent = event.preventDafault\n\nself只有当`event.target` 是当前元素自身时才会触发事件回调函数\n\ncapture 谁写谁先 但是父优先级更大 捕获\n\n once passive capture 这可能需要实操 才能确定性质\n\n### vue的key\n\n不写key的话vue会把index自动作为key，有时候欺骗diff算法，真实dom会出错\n\n若虚拟dom不变，则直接使用之前的真实dom \n\n### vue响应式 递归observer\n\n空了在写下\n\nvue2对数组里的元素没有绑定get setter，只能用vue封装过得可以改变原数组方法，如 push pop shift unshift splice sort reverse \n\n这里的push已经不是数组原型对象的push了 也可以用vm.$set也是响应式  \n\nVue的响应式数组机制是基于两个核心概念：**依赖收集（Dependency Tracking）** 和 **派发更新（Dispatching Updates）**。\n\n1. **依赖收集（Dependency Tracking）**：\n   - 当组件渲染时，Vue会追踪所有访问过的属性（包括数组的每个元素）的依赖关系。\n   - 对于数组，Vue会重写数组的原型方法，如 `push`、`pop`、`shift` 等，以便在调用这些方法时能够通知 Vue 进行依赖收集。\n   - 当访问数组的某个元素时，Vue会将这个访问操作记录下来，并建立一个与该数组元素相关的依赖关系。\n2. **派发更新（Dispatching Updates）**：\n   - 当数组发生变化（调用变异方法）时，Vue能够感知到这个变化，并通知所有依赖于这个数组的地方进行更新。\n   - Vue通过依赖收集建立的依赖关系知道哪些地方依赖于这个数组，然后通过派发更新机制通知相关的地方进行重新渲染。\n\n下面是一个简化的例子，说明Vue是如何拦截数组的变异方法：\n\n```js\njavascriptCopy code\n// 简化版的Vue响应式数组拦截示例\nconst originalArrayProto = Array.prototype;\nconst arrayMethods = Object.create(originalArrayProto);\n\n['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(method => {\n  // 保存原始方法的引用\n  const original = originalArrayProto[method];\n\n  // 重写数组的变异方法\n  arrayMethods[method] = function (...args) {\n    // 调用原始方法\n    const result = original.apply(this, args);\n\n    // 派发更新，通知依赖进行重新渲染\n    // 这里省略了具体的派发更新逻辑\n    // 实际上会遍历依赖列表，通知依赖进行更新\n    console.log(`Array ${method} was called, dispatching updates`);\n\n    return result;\n  };\n});\n\n// 创建拦截的数组\nconst reactiveArray = [];\nreactiveArray.__proto__ = arrayMethods;\n\n// 使用拦截的数组\nreactiveArray.push(1); // 触发派发更新\nreactiveArray.pop();   // 触发派发更新\n```\n\n类似AOP 都涉及'横切关注点'\n\n### Vue set方法\n\nVue.set(vm.student, 'sex', '男')\nvm.$set(vm.student, 'sex', '男')\n\n只能给data中的某个对象添加属性 第一个参数不能是vm\n\nmethod中的this是vm\n\n### v-for\n\nv-for=\"(h,index) in student.hobby\"\n","slug":"前端学习计划_3","published":1,"updated":"2024-01-15T15:32:08.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x45001bq05zhkz08n10","content":"<span id=\"more\"></span>\n\n<h3 id=\"说说他们的区别arcgis-mapbox-cesium\"><a href=\"#说说他们的区别arcgis-mapbox-cesium\" class=\"headerlink\" title=\"说说他们的区别arcgis mapbox cesium\"></a>说说他们的区别arcgis mapbox cesium</h3><p>等待解决</p>\n<h3 id=\"正则方面\"><a href=\"#正则方面\" class=\"headerlink\" title=\"正则方面\"></a>正则方面</h3><p>元字符</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>解释</th>\n<th>元字符</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\d</td>\n<td>数字</td>\n<td>\\D</td>\n<td>非数字</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>字母数字下滑线</td>\n<td>\\W</td>\n<td>非字母数字下滑线</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空格</td>\n<td>\\S</td>\n<td>非空格</td>\n</tr>\n<tr>\n<td>·</td>\n<td>匹配任意除了换行符（回车键）之外的单个字符</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"vue中-computed和watch\"><a href=\"#vue中-computed和watch\" class=\"headerlink\" title=\"vue中 computed和watch\"></a>vue中 computed和watch</h3><p>computed：支持缓存</p>\n<p>watch：数据变化就会触发响应操作</p>\n<p>对deep的优化如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newName, oldName</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj.a changed&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;obj.a&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newName, oldName</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj.a changed&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// deep: true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-slot\"><a href=\"#vue-slot\" class=\"headerlink\" title=\"vue slot\"></a>vue slot</h3><p>插槽 三种</p>\n<p>匿名插槽（一个组件只有一个） 具名插槽（vm.$slot.xxx） 作用域插槽</p>\n<h3 id=\"如何保存页面的当前的状态\"><a href=\"#如何保存页面的当前的状态\" class=\"headerlink\" title=\"如何保存页面的当前的状态\"></a>如何保存页面的当前的状态</h3><ol>\n<li>localstorage 把state JSON.stringyfy()</li>\n</ol>\n<p>​    优点 兼容性好等 缺点 参考JSON深拷贝的缺点 RegExp 和 Date 字符串</p>\n<ol start=\"2\">\n<li><p>vue router 路由传参 可以RegExp 和 Date</p>\n</li>\n<li><p>keep-alive</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">kepp-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../src/views/xxx.vue&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">meta</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 需要被缓存</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"vue常见修饰符\"><a href=\"#vue常见修饰符\" class=\"headerlink\" title=\"vue常见修饰符\"></a>vue常见修饰符</h3><p>stop = event.stopPropagation</p>\n<p>prevent = event.preventDafault</p>\n<p>self只有当<code>event.target</code> 是当前元素自身时才会触发事件回调函数</p>\n<p>capture 谁写谁先 但是父优先级更大 捕获</p>\n<p> once passive capture 这可能需要实操 才能确定性质</p>\n<h3 id=\"vue的key\"><a href=\"#vue的key\" class=\"headerlink\" title=\"vue的key\"></a>vue的key</h3><p>不写key的话vue会把index自动作为key，有时候欺骗diff算法，真实dom会出错</p>\n<p>若虚拟dom不变，则直接使用之前的真实dom </p>\n<h3 id=\"vue响应式-递归observer\"><a href=\"#vue响应式-递归observer\" class=\"headerlink\" title=\"vue响应式 递归observer\"></a>vue响应式 递归observer</h3><p>空了在写下</p>\n<p>vue2对数组里的元素没有绑定get setter，只能用vue封装过得可以改变原数组方法，如 push pop shift unshift splice sort reverse </p>\n<p>这里的push已经不是数组原型对象的push了 也可以用vm.$set也是响应式  </p>\n<p>Vue的响应式数组机制是基于两个核心概念：<strong>依赖收集（Dependency Tracking）</strong> 和 <strong>派发更新（Dispatching Updates）</strong>。</p>\n<ol>\n<li><strong>依赖收集（Dependency Tracking）</strong>：<ul>\n<li>当组件渲染时，Vue会追踪所有访问过的属性（包括数组的每个元素）的依赖关系。</li>\n<li>对于数组，Vue会重写数组的原型方法，如 <code>push</code>、<code>pop</code>、<code>shift</code> 等，以便在调用这些方法时能够通知 Vue 进行依赖收集。</li>\n<li>当访问数组的某个元素时，Vue会将这个访问操作记录下来，并建立一个与该数组元素相关的依赖关系。</li>\n</ul>\n</li>\n<li><strong>派发更新（Dispatching Updates）</strong>：<ul>\n<li>当数组发生变化（调用变异方法）时，Vue能够感知到这个变化，并通知所有依赖于这个数组的地方进行更新。</li>\n<li>Vue通过依赖收集建立的依赖关系知道哪些地方依赖于这个数组，然后通过派发更新机制通知相关的地方进行重新渲染。</li>\n</ul>\n</li>\n</ol>\n<p>下面是一个简化的例子，说明Vue是如何拦截数组的变异方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascriptCopy code</span><br><span class=\"line\"><span class=\"comment\">// 简化版的Vue响应式数组拦截示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalArrayProto = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayMethods = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(originalArrayProto);</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;push&#x27;</span>, <span class=\"string\">&#x27;pop&#x27;</span>, <span class=\"string\">&#x27;shift&#x27;</span>, <span class=\"string\">&#x27;unshift&#x27;</span>, <span class=\"string\">&#x27;splice&#x27;</span>, <span class=\"string\">&#x27;sort&#x27;</span>, <span class=\"string\">&#x27;reverse&#x27;</span>].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保存原始方法的引用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = originalArrayProto[method];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重写数组的变异方法</span></span><br><span class=\"line\">  arrayMethods[method] = <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 派发更新，通知依赖进行重新渲染</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里省略了具体的派发更新逻辑</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际上会遍历依赖列表，通知依赖进行更新</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Array <span class=\"subst\">$&#123;method&#125;</span> was called, dispatching updates`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建拦截的数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reactiveArray = [];</span><br><span class=\"line\">reactiveArray.<span class=\"property\">__proto__</span> = arrayMethods;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用拦截的数组</span></span><br><span class=\"line\">reactiveArray.<span class=\"title function_\">push</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 触发派发更新</span></span><br><span class=\"line\">reactiveArray.<span class=\"title function_\">pop</span>();   <span class=\"comment\">// 触发派发更新</span></span><br></pre></td></tr></table></figure>\n\n<p>类似AOP 都涉及’横切关注点’</p>\n<h3 id=\"Vue-set方法\"><a href=\"#Vue-set方法\" class=\"headerlink\" title=\"Vue set方法\"></a>Vue set方法</h3><p>Vue.set(vm.student, ‘sex’, ‘男’)<br>vm.$set(vm.student, ‘sex’, ‘男’)</p>\n<p>只能给data中的某个对象添加属性 第一个参数不能是vm</p>\n<p>method中的this是vm</p>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p>v-for=”(h,index) in student.hobby”</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"说说他们的区别arcgis-mapbox-cesium\"><a href=\"#说说他们的区别arcgis-mapbox-cesium\" class=\"headerlink\" title=\"说说他们的区别arcgis mapbox cesium\"></a>说说他们的区别arcgis mapbox cesium</h3><p>等待解决</p>\n<h3 id=\"正则方面\"><a href=\"#正则方面\" class=\"headerlink\" title=\"正则方面\"></a>正则方面</h3><p>元字符</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>解释</th>\n<th>元字符</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\d</td>\n<td>数字</td>\n<td>\\D</td>\n<td>非数字</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>字母数字下滑线</td>\n<td>\\W</td>\n<td>非字母数字下滑线</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空格</td>\n<td>\\S</td>\n<td>非空格</td>\n</tr>\n<tr>\n<td>·</td>\n<td>匹配任意除了换行符（回车键）之外的单个字符</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"vue中-computed和watch\"><a href=\"#vue中-computed和watch\" class=\"headerlink\" title=\"vue中 computed和watch\"></a>vue中 computed和watch</h3><p>computed：支持缓存</p>\n<p>watch：数据变化就会触发响应操作</p>\n<p>对deep的优化如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newName, oldName</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj.a changed&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;obj.a&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newName, oldName</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj.a changed&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// deep: true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-slot\"><a href=\"#vue-slot\" class=\"headerlink\" title=\"vue slot\"></a>vue slot</h3><p>插槽 三种</p>\n<p>匿名插槽（一个组件只有一个） 具名插槽（vm.$slot.xxx） 作用域插槽</p>\n<h3 id=\"如何保存页面的当前的状态\"><a href=\"#如何保存页面的当前的状态\" class=\"headerlink\" title=\"如何保存页面的当前的状态\"></a>如何保存页面的当前的状态</h3><ol>\n<li>localstorage 把state JSON.stringyfy()</li>\n</ol>\n<p>​    优点 兼容性好等 缺点 参考JSON深拷贝的缺点 RegExp 和 Date 字符串</p>\n<ol start=\"2\">\n<li><p>vue router 路由传参 可以RegExp 和 Date</p>\n</li>\n<li><p>keep-alive</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">kepp-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../src/views/xxx.vue&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">meta</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 需要被缓存</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"vue常见修饰符\"><a href=\"#vue常见修饰符\" class=\"headerlink\" title=\"vue常见修饰符\"></a>vue常见修饰符</h3><p>stop = event.stopPropagation</p>\n<p>prevent = event.preventDafault</p>\n<p>self只有当<code>event.target</code> 是当前元素自身时才会触发事件回调函数</p>\n<p>capture 谁写谁先 但是父优先级更大 捕获</p>\n<p> once passive capture 这可能需要实操 才能确定性质</p>\n<h3 id=\"vue的key\"><a href=\"#vue的key\" class=\"headerlink\" title=\"vue的key\"></a>vue的key</h3><p>不写key的话vue会把index自动作为key，有时候欺骗diff算法，真实dom会出错</p>\n<p>若虚拟dom不变，则直接使用之前的真实dom </p>\n<h3 id=\"vue响应式-递归observer\"><a href=\"#vue响应式-递归observer\" class=\"headerlink\" title=\"vue响应式 递归observer\"></a>vue响应式 递归observer</h3><p>空了在写下</p>\n<p>vue2对数组里的元素没有绑定get setter，只能用vue封装过得可以改变原数组方法，如 push pop shift unshift splice sort reverse </p>\n<p>这里的push已经不是数组原型对象的push了 也可以用vm.$set也是响应式  </p>\n<p>Vue的响应式数组机制是基于两个核心概念：<strong>依赖收集（Dependency Tracking）</strong> 和 <strong>派发更新（Dispatching Updates）</strong>。</p>\n<ol>\n<li><strong>依赖收集（Dependency Tracking）</strong>：<ul>\n<li>当组件渲染时，Vue会追踪所有访问过的属性（包括数组的每个元素）的依赖关系。</li>\n<li>对于数组，Vue会重写数组的原型方法，如 <code>push</code>、<code>pop</code>、<code>shift</code> 等，以便在调用这些方法时能够通知 Vue 进行依赖收集。</li>\n<li>当访问数组的某个元素时，Vue会将这个访问操作记录下来，并建立一个与该数组元素相关的依赖关系。</li>\n</ul>\n</li>\n<li><strong>派发更新（Dispatching Updates）</strong>：<ul>\n<li>当数组发生变化（调用变异方法）时，Vue能够感知到这个变化，并通知所有依赖于这个数组的地方进行更新。</li>\n<li>Vue通过依赖收集建立的依赖关系知道哪些地方依赖于这个数组，然后通过派发更新机制通知相关的地方进行重新渲染。</li>\n</ul>\n</li>\n</ol>\n<p>下面是一个简化的例子，说明Vue是如何拦截数组的变异方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascriptCopy code</span><br><span class=\"line\"><span class=\"comment\">// 简化版的Vue响应式数组拦截示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalArrayProto = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayMethods = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(originalArrayProto);</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;push&#x27;</span>, <span class=\"string\">&#x27;pop&#x27;</span>, <span class=\"string\">&#x27;shift&#x27;</span>, <span class=\"string\">&#x27;unshift&#x27;</span>, <span class=\"string\">&#x27;splice&#x27;</span>, <span class=\"string\">&#x27;sort&#x27;</span>, <span class=\"string\">&#x27;reverse&#x27;</span>].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保存原始方法的引用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = originalArrayProto[method];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重写数组的变异方法</span></span><br><span class=\"line\">  arrayMethods[method] = <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 派发更新，通知依赖进行重新渲染</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里省略了具体的派发更新逻辑</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际上会遍历依赖列表，通知依赖进行更新</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Array <span class=\"subst\">$&#123;method&#125;</span> was called, dispatching updates`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建拦截的数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reactiveArray = [];</span><br><span class=\"line\">reactiveArray.<span class=\"property\">__proto__</span> = arrayMethods;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用拦截的数组</span></span><br><span class=\"line\">reactiveArray.<span class=\"title function_\">push</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 触发派发更新</span></span><br><span class=\"line\">reactiveArray.<span class=\"title function_\">pop</span>();   <span class=\"comment\">// 触发派发更新</span></span><br></pre></td></tr></table></figure>\n\n<p>类似AOP 都涉及’横切关注点’</p>\n<h3 id=\"Vue-set方法\"><a href=\"#Vue-set方法\" class=\"headerlink\" title=\"Vue set方法\"></a>Vue set方法</h3><p>Vue.set(vm.student, ‘sex’, ‘男’)<br>vm.$set(vm.student, ‘sex’, ‘男’)</p>\n<p>只能给data中的某个对象添加属性 第一个参数不能是vm</p>\n<p>method中的this是vm</p>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p>v-for=”(h,index) in student.hobby”</p>"},{"title":"前端学习链接","date":"2023-10-09T00:52:47.000Z","_content":"\nhttps://q.shanyue.tech/\nhttps://f2e.tech/matrix\nhttps://www.html5iq.com/frontend/index\nhttps://es6.ruanyifeng.com/\n\n<!-- more -->\n\n### 前端学习url\n\n赶紧学吧 明年春招一定要上岸 不然G \n\n\n\n","source":"_posts/前端学习链接.md","raw":"---\ntitle: 前端学习链接\ndate: 2023-10-9 8:52:47\ntags:\n- react\n- 前端\n- js\n- webpack\n- vue\ncategories: \n- 笔记\n---\n\nhttps://q.shanyue.tech/\nhttps://f2e.tech/matrix\nhttps://www.html5iq.com/frontend/index\nhttps://es6.ruanyifeng.com/\n\n<!-- more -->\n\n### 前端学习url\n\n赶紧学吧 明年春招一定要上岸 不然G \n\n\n\n","slug":"前端学习链接","published":1,"updated":"2023-12-07T08:30:39.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x47001eq05z6u85775s","content":"<p><a href=\"https://q.shanyue.tech/\">https://q.shanyue.tech/</a><br><a href=\"https://f2e.tech/matrix\">https://f2e.tech/matrix</a><br><a href=\"https://www.html5iq.com/frontend/index\">https://www.html5iq.com/frontend/index</a><br><a href=\"https://es6.ruanyifeng.com/\">https://es6.ruanyifeng.com/</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"前端学习url\"><a href=\"#前端学习url\" class=\"headerlink\" title=\"前端学习url\"></a>前端学习url</h3><p>赶紧学吧 明年春招一定要上岸 不然G </p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://q.shanyue.tech/\">https://q.shanyue.tech/</a><br><a href=\"https://f2e.tech/matrix\">https://f2e.tech/matrix</a><br><a href=\"https://www.html5iq.com/frontend/index\">https://www.html5iq.com/frontend/index</a><br><a href=\"https://es6.ruanyifeng.com/\">https://es6.ruanyifeng.com/</a></p>","more":"<h3 id=\"前端学习url\"><a href=\"#前端学习url\" class=\"headerlink\" title=\"前端学习url\"></a>前端学习url</h3><p>赶紧学吧 明年春招一定要上岸 不然G </p>"},{"title":"大三寒假学C++&lc","date":"2022-02-22T05:21:01.000Z","_content":"\n### C++\n\n### 大三上暑假苦苦学c++肝lc，记录一下每天的笔记\n\n<!-- more -->\n\n### 1.1\n\n> 两数之和(1) count = 1;\n\nc++ map\n\n``` c++\n第一种：用insert函数插入pair数据：\nmap<int,string> my_map;\nmy_map.insert(pair<int,string>(1,\"first\"));\nmy_map.insert(pair<int,string>(2,\"second\"));\n\n第二种：用insert函数插入value_type数据：\nmap<int,string> my_map;\nmy_map.insert(map<int,string>::value_type(1,\"first\"));\nmy_map.insert(map<int,string>::value_type(2,\"second\"));\n\nmap<int,string>::iterator it;           //迭代器遍历\nfor(it=my_map.begin();it!=my_map.end();it++)\n    cout<<it->first<<it->second<<endl;\n\n第三种：用数组的方式直接赋值：\nmap<int,string> my_map;\nmy_map[1]=\"first\";\nmy_map[2]=\"second\";\n\nmap<int,string>::iterator it;\nfor(it=my_map.begin();it!=my_map.end();it++)\n    cout<<it->first<<it->second<<endl;\n\n```\n\n### 1.2\n\n``` c++\n#include <algorithm>\nclass Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        map<int,int> m1;\n        map<int,int> m2;\n        vector<int> a;\n        for(int i = 0; i < nums1.size(); i++){\n            m1[nums1[i]]++;\n        }\n        for(int i = 0; i < nums2.size(); i++){\n            m2[nums2[i]]++;\n        }\n        map<int, int>::iterator iter;\n          for (iter = m1.begin(); iter != m1.end(); iter++) {\n            int minT = min<int>(m2[iter->first],iter -> second);\n            if( minT> 0){\n                for(int j = 0; j < minT; j++){\n                    a.push_back(iter -> first);\n                }         \n            }\n        }\n        return a;\n    }\n};\n```\n\n### 1.3\n\n> 最大子数组和 = 2\n>\n> 用两个栈实现队列 = 1\t\n\n\n\n``` c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int max = nums[0];\n        int lSize = nums.size();\n        for(int i = 1; i < lSize; i++){\n            if(nums[i - 1] > 0){\n                nums[i] += nums[i - 1];\n            }\n            if(nums[i] > max){\n                max = nums[i];\n            }\n        }\n        return max;\n    }\n};\n```\n\n``` c++\nclass CQueue {\n    stack<int> s1,s2;\npublic:\n    CQueue() {\n        \n    }\n    \n    void appendTail(int value) {\n        s1.push(value);\n    }\n    \n    int deleteHead() {\n        if(!s2.empty())\n        {\n            int a=s2.top();\n            s2.pop();\n            return a;\n        }\n        if(s1.empty())  return -1;\n        while(!s1.empty())\n          {\n                s2.push(s1.top());\n                s1.pop();\n                \n          }\n          int b = s2.top();\n          s2.pop();\n          return b;\n    }\n};\n```\n\nStack操作\n\n```c++\nstack<int> q;\t//以int型为例\nint x;\nq.push(x);\t\t//将x压入栈顶\nq.top();\t\t//返回栈顶的元素\nq.pop();\t\t//删除栈顶的元素\nq.size();\t\t//返回栈中元素的个数\nq.empty();\t\t//检查栈是否为空,若为空返回true,否则返回false\n```\n\n### 1.4\n\n```c++\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if(head == nullptr) return nullptr;\n        Node* cur = head;\n        unordered_map<Node*, Node*> map;\n        // 3. 复制各节点，并建立 “原节点 -> 新节点” 的 Map 映射\n        while(cur != nullptr) {\n            map[cur] = new Node(cur->val);\n            cur = cur->next;\n        }\n        cur = head;\n        // 4. 构建新链表的 next 和 random 指向\n        while(cur != nullptr) {\n            map[cur]->next = map[cur->next];\n            map[cur]->random = map[cur->random];\n            cur = cur->next;\n        }\n        // 5. 返回新链表的头节点\n        return map[head];\n    }\n};\n\n```\n\n### 1.16\n\nqueue\n\n```c++\npush() 在队尾插入一个元素\npop() 删除队列第一个元素\nsize() 返回队列中元素个数\nempty() 如果队列空则返回true\nfront() 返回队列中的第一个元素\nback() 返回队列中最后一个元素\n```\n\n### 1.17\n\n二叉树镜像 辅助栈做法未学\n\n### 1.18\n\n斐波那契数列的矩阵幂算法\n\n```c++\nclass Solution {\npublic:\n    const int MOD = 1000000007;\n\n    int fib(int n) {\n        if (n < 2) {\n            return n;\n        }\n        vector<vector<long>> q{{1, 1}, {1, 0}};\n        vector<vector<long>> res = pow(q, n - 1);\n        return res[0][0];\n    }\n\n    vector<vector<long>> pow(vector<vector<long>>& a, int n) {\n        vector<vector<long>> ret{{1, 0}, {0, 1}};\n        while (n > 0) {\n            if (n & 1) {\n                ret = multiply(ret, a);\n            }\n            n >>= 1;\n            a = multiply(a, a);\n        }\n        return ret;\n    }\n\n    vector<vector<long>> multiply(vector<vector<long>>& a, vector<vector<long>>& b) {\n        vector<vector<long>> c{{0, 0}, {0, 0}};\n        for (int i = 0; i < 2; i++) {\n            for (int j = 0; j < 2; j++) {\n                c[i][j] = (a[i][0] * b[0][j] + a[i][1] * b[1][j]) % MOD;\n            }\n        }\n        return c;\n    }\n};\n\n```\n\n### 1.20\n\n循环条件有可能不经意间 因为变量改变 ——寻找bug\n\n```c++\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode *res = new ListNode(0), *p = res;\n        while(l1 && l2 ){\n            l1->val < l2->val ? (p->next = l1,l1 = l1->next) : (p->next = l2, l2 = l2->next);\n            p = p->next;              \n        }\n        p->next = l1 ? l1 : l2;\n        return res->next;\n    }\n};\n```\n\n### 1.23\n\n判断条件最好不要用相加后的结果，应该用target - nums[i] 跟 nums[j]比较，这样保证不会溢出。\n\n同样的例子还有二分查找，(left + right) / 2 可以用left + ((rigth - left) >> 1))代替\n\n### 1.26\n\n回溯时\n\n``` c++\npath.pop_back();\n```\n\n功力\n\n### 1.28\n\n```c++\nvoid quickSort(vector<int>& arr, int l, int r){\n    if(l >= r) return;\n    int i = l, j = r;\n    while(i < j){\n      while(i < j && arr[j] >= arr[l]){j--;};\n      while(i < j && arr[i] <= arr[l]){i++;};\n      swap(arr[i], arr[j]);\n    }\n    swap(arr[i], arr[l]);\n    quickSort(arr, l, i - 1);\n    quickSort(arr, i + 1, r);\n}\n```\n\n","source":"_posts/大三寒假学C++&lc.md","raw":"---\ntitle: 大三寒假学C++&lc\ndate:  2022-02-22 13:21:01 \ntags:\n- C++\n- leetcode\n- 算法\n- 一个月\ncategories: \n- 笔记\n---\n\n### C++\n\n### 大三上暑假苦苦学c++肝lc，记录一下每天的笔记\n\n<!-- more -->\n\n### 1.1\n\n> 两数之和(1) count = 1;\n\nc++ map\n\n``` c++\n第一种：用insert函数插入pair数据：\nmap<int,string> my_map;\nmy_map.insert(pair<int,string>(1,\"first\"));\nmy_map.insert(pair<int,string>(2,\"second\"));\n\n第二种：用insert函数插入value_type数据：\nmap<int,string> my_map;\nmy_map.insert(map<int,string>::value_type(1,\"first\"));\nmy_map.insert(map<int,string>::value_type(2,\"second\"));\n\nmap<int,string>::iterator it;           //迭代器遍历\nfor(it=my_map.begin();it!=my_map.end();it++)\n    cout<<it->first<<it->second<<endl;\n\n第三种：用数组的方式直接赋值：\nmap<int,string> my_map;\nmy_map[1]=\"first\";\nmy_map[2]=\"second\";\n\nmap<int,string>::iterator it;\nfor(it=my_map.begin();it!=my_map.end();it++)\n    cout<<it->first<<it->second<<endl;\n\n```\n\n### 1.2\n\n``` c++\n#include <algorithm>\nclass Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        map<int,int> m1;\n        map<int,int> m2;\n        vector<int> a;\n        for(int i = 0; i < nums1.size(); i++){\n            m1[nums1[i]]++;\n        }\n        for(int i = 0; i < nums2.size(); i++){\n            m2[nums2[i]]++;\n        }\n        map<int, int>::iterator iter;\n          for (iter = m1.begin(); iter != m1.end(); iter++) {\n            int minT = min<int>(m2[iter->first],iter -> second);\n            if( minT> 0){\n                for(int j = 0; j < minT; j++){\n                    a.push_back(iter -> first);\n                }         \n            }\n        }\n        return a;\n    }\n};\n```\n\n### 1.3\n\n> 最大子数组和 = 2\n>\n> 用两个栈实现队列 = 1\t\n\n\n\n``` c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int max = nums[0];\n        int lSize = nums.size();\n        for(int i = 1; i < lSize; i++){\n            if(nums[i - 1] > 0){\n                nums[i] += nums[i - 1];\n            }\n            if(nums[i] > max){\n                max = nums[i];\n            }\n        }\n        return max;\n    }\n};\n```\n\n``` c++\nclass CQueue {\n    stack<int> s1,s2;\npublic:\n    CQueue() {\n        \n    }\n    \n    void appendTail(int value) {\n        s1.push(value);\n    }\n    \n    int deleteHead() {\n        if(!s2.empty())\n        {\n            int a=s2.top();\n            s2.pop();\n            return a;\n        }\n        if(s1.empty())  return -1;\n        while(!s1.empty())\n          {\n                s2.push(s1.top());\n                s1.pop();\n                \n          }\n          int b = s2.top();\n          s2.pop();\n          return b;\n    }\n};\n```\n\nStack操作\n\n```c++\nstack<int> q;\t//以int型为例\nint x;\nq.push(x);\t\t//将x压入栈顶\nq.top();\t\t//返回栈顶的元素\nq.pop();\t\t//删除栈顶的元素\nq.size();\t\t//返回栈中元素的个数\nq.empty();\t\t//检查栈是否为空,若为空返回true,否则返回false\n```\n\n### 1.4\n\n```c++\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if(head == nullptr) return nullptr;\n        Node* cur = head;\n        unordered_map<Node*, Node*> map;\n        // 3. 复制各节点，并建立 “原节点 -> 新节点” 的 Map 映射\n        while(cur != nullptr) {\n            map[cur] = new Node(cur->val);\n            cur = cur->next;\n        }\n        cur = head;\n        // 4. 构建新链表的 next 和 random 指向\n        while(cur != nullptr) {\n            map[cur]->next = map[cur->next];\n            map[cur]->random = map[cur->random];\n            cur = cur->next;\n        }\n        // 5. 返回新链表的头节点\n        return map[head];\n    }\n};\n\n```\n\n### 1.16\n\nqueue\n\n```c++\npush() 在队尾插入一个元素\npop() 删除队列第一个元素\nsize() 返回队列中元素个数\nempty() 如果队列空则返回true\nfront() 返回队列中的第一个元素\nback() 返回队列中最后一个元素\n```\n\n### 1.17\n\n二叉树镜像 辅助栈做法未学\n\n### 1.18\n\n斐波那契数列的矩阵幂算法\n\n```c++\nclass Solution {\npublic:\n    const int MOD = 1000000007;\n\n    int fib(int n) {\n        if (n < 2) {\n            return n;\n        }\n        vector<vector<long>> q{{1, 1}, {1, 0}};\n        vector<vector<long>> res = pow(q, n - 1);\n        return res[0][0];\n    }\n\n    vector<vector<long>> pow(vector<vector<long>>& a, int n) {\n        vector<vector<long>> ret{{1, 0}, {0, 1}};\n        while (n > 0) {\n            if (n & 1) {\n                ret = multiply(ret, a);\n            }\n            n >>= 1;\n            a = multiply(a, a);\n        }\n        return ret;\n    }\n\n    vector<vector<long>> multiply(vector<vector<long>>& a, vector<vector<long>>& b) {\n        vector<vector<long>> c{{0, 0}, {0, 0}};\n        for (int i = 0; i < 2; i++) {\n            for (int j = 0; j < 2; j++) {\n                c[i][j] = (a[i][0] * b[0][j] + a[i][1] * b[1][j]) % MOD;\n            }\n        }\n        return c;\n    }\n};\n\n```\n\n### 1.20\n\n循环条件有可能不经意间 因为变量改变 ——寻找bug\n\n```c++\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode *res = new ListNode(0), *p = res;\n        while(l1 && l2 ){\n            l1->val < l2->val ? (p->next = l1,l1 = l1->next) : (p->next = l2, l2 = l2->next);\n            p = p->next;              \n        }\n        p->next = l1 ? l1 : l2;\n        return res->next;\n    }\n};\n```\n\n### 1.23\n\n判断条件最好不要用相加后的结果，应该用target - nums[i] 跟 nums[j]比较，这样保证不会溢出。\n\n同样的例子还有二分查找，(left + right) / 2 可以用left + ((rigth - left) >> 1))代替\n\n### 1.26\n\n回溯时\n\n``` c++\npath.pop_back();\n```\n\n功力\n\n### 1.28\n\n```c++\nvoid quickSort(vector<int>& arr, int l, int r){\n    if(l >= r) return;\n    int i = l, j = r;\n    while(i < j){\n      while(i < j && arr[j] >= arr[l]){j--;};\n      while(i < j && arr[i] <= arr[l]){i++;};\n      swap(arr[i], arr[j]);\n    }\n    swap(arr[i], arr[l]);\n    quickSort(arr, l, i - 1);\n    quickSort(arr, i + 1, r);\n}\n```\n\n","slug":"大三寒假学C++&lc","published":1,"updated":"2023-04-20T03:02:23.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x48001hq05z5yqq3gkx","content":"<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><h3 id=\"大三上暑假苦苦学c-肝lc，记录一下每天的笔记\"><a href=\"#大三上暑假苦苦学c-肝lc，记录一下每天的笔记\" class=\"headerlink\" title=\"大三上暑假苦苦学c++肝lc，记录一下每天的笔记\"></a>大三上暑假苦苦学c++肝lc，记录一下每天的笔记</h3><span id=\"more\"></span>\n\n<h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h3><blockquote>\n<p>两数之和(1) count = 1;</p>\n</blockquote>\n<p>c++ map</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：用insert函数插入pair数据：</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt; my_map;</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>,string&gt;(<span class=\"number\">1</span>,<span class=\"string\">&quot;first&quot;</span>));</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>,string&gt;(<span class=\"number\">2</span>,<span class=\"string\">&quot;second&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">第二种：用insert函数插入value_type数据：</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt; my_map;</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(map&lt;<span class=\"type\">int</span>,string&gt;::<span class=\"built_in\">value_type</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;first&quot;</span>));</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(map&lt;<span class=\"type\">int</span>,string&gt;::<span class=\"built_in\">value_type</span>(<span class=\"number\">2</span>,<span class=\"string\">&quot;second&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt;::iterator it;           <span class=\"comment\">//迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(it=my_map.<span class=\"built_in\">begin</span>();it!=my_map.<span class=\"built_in\">end</span>();it++)</span><br><span class=\"line\">    cout&lt;&lt;it-&gt;first&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">第三种：用数组的方式直接赋值：</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt; my_map;</span><br><span class=\"line\">my_map[<span class=\"number\">1</span>]=<span class=\"string\">&quot;first&quot;</span>;</span><br><span class=\"line\">my_map[<span class=\"number\">2</span>]=<span class=\"string\">&quot;second&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt;::iterator it;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(it=my_map.<span class=\"built_in\">begin</span>();it!=my_map.<span class=\"built_in\">end</span>();it++)</span><br><span class=\"line\">    cout&lt;&lt;it-&gt;first&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2\"></a>1.2</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersect</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; m1;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; m2;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums1.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            m1[nums1[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums2.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            m2[nums2[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::iterator iter;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (iter = m1.<span class=\"built_in\">begin</span>(); iter != m1.<span class=\"built_in\">end</span>(); iter++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> minT = <span class=\"built_in\">min</span>&lt;<span class=\"type\">int</span>&gt;(m2[iter-&gt;first],iter -&gt; second);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( minT&gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; minT; j++)&#123;</span><br><span class=\"line\">                    a.<span class=\"built_in\">push_back</span>(iter -&gt; first);</span><br><span class=\"line\">                &#125;         </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3\"><a href=\"#1-3\" class=\"headerlink\" title=\"1.3\"></a>1.3</h3><blockquote>\n<p>最大子数组和 = 2</p>\n<p>用两个栈实现队列 = 1    </p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> lSize = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; lSize; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                nums[i] += nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] &gt; max)&#123;</span><br><span class=\"line\">                max = nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CQueue</span> &#123;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; s1,s2;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CQueue</span>() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">appendTail</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        s1.<span class=\"built_in\">push</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">deleteHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!s2.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a=s2.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1.<span class=\"built_in\">empty</span>())  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s1.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">                s2.<span class=\"built_in\">push</span>(s1.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                s1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                </span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"type\">int</span> b = s2.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">          s2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">          <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Stack操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; q;\t<span class=\"comment\">//以int型为例</span></span><br><span class=\"line\"><span class=\"type\">int</span> x;</span><br><span class=\"line\">q.<span class=\"built_in\">push</span>(x);\t\t<span class=\"comment\">//将x压入栈顶</span></span><br><span class=\"line\">q.<span class=\"built_in\">top</span>();\t\t<span class=\"comment\">//返回栈顶的元素</span></span><br><span class=\"line\">q.<span class=\"built_in\">pop</span>();\t\t<span class=\"comment\">//删除栈顶的元素</span></span><br><span class=\"line\">q.<span class=\"built_in\">size</span>();\t\t<span class=\"comment\">//返回栈中元素的个数</span></span><br><span class=\"line\">q.<span class=\"built_in\">empty</span>();\t\t<span class=\"comment\">//检查栈是否为空,若为空返回true,否则返回false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4\"><a href=\"#1-4\" class=\"headerlink\" title=\"1.4\"></a>1.4</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">copyRandomList</span><span class=\"params\">(Node* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        Node* cur = head;</span><br><span class=\"line\">        unordered_map&lt;Node*, Node*&gt; map;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 复制各节点，并建立 “原节点 -&gt; 新节点” 的 Map 映射</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            map[cur] = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(cur-&gt;val);</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = head;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 构建新链表的 next 和 random 指向</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            map[cur]-&gt;next = map[cur-&gt;next];</span><br><span class=\"line\">            map[cur]-&gt;random = map[cur-&gt;random];</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 5. 返回新链表的头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map[head];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-16\"><a href=\"#1-16\" class=\"headerlink\" title=\"1.16\"></a>1.16</h3><p>queue</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">push</span>() 在队尾插入一个元素</span><br><span class=\"line\"><span class=\"built_in\">pop</span>() 删除队列第一个元素</span><br><span class=\"line\"><span class=\"built_in\">size</span>() 返回队列中元素个数</span><br><span class=\"line\"><span class=\"built_in\">empty</span>() 如果队列空则返回<span class=\"function\"><span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">front</span><span class=\"params\">()</span> 返回队列中的第一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">back</span><span class=\"params\">()</span> 返回队列中最后一个元素</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-17\"><a href=\"#1-17\" class=\"headerlink\" title=\"1.17\"></a>1.17</h3><p>二叉树镜像 辅助栈做法未学</p>\n<h3 id=\"1-18\"><a href=\"#1-18\" class=\"headerlink\" title=\"1.18\"></a>1.18</h3><p>斐波那契数列的矩阵幂算法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; q&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; res = <span class=\"built_in\">pow</span>(q, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; <span class=\"built_in\">pow</span>(vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt;&amp; a, <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; ret&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ret = <span class=\"built_in\">multiply</span>(ret, a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            a = <span class=\"built_in\">multiply</span>(a, a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; <span class=\"built_in\">multiply</span>(vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt;&amp; a, vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt;&amp; b) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; c&#123;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">                c[i][j] = (a[i][<span class=\"number\">0</span>] * b[<span class=\"number\">0</span>][j] + a[i][<span class=\"number\">1</span>] * b[<span class=\"number\">1</span>][j]) % MOD;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-20\"><a href=\"#1-20\" class=\"headerlink\" title=\"1.20\"></a>1.20</h3><p>循环条件有可能不经意间 因为变量改变 ——寻找bug</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>), *p = res;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l1 &amp;&amp; l2 )&#123;</span><br><span class=\"line\">            l1-&gt;val &lt; l2-&gt;val ? (p-&gt;next = l1,l1 = l1-&gt;next) : (p-&gt;next = l2, l2 = l2-&gt;next);</span><br><span class=\"line\">            p = p-&gt;next;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p-&gt;next = l1 ? l1 : l2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-23\"><a href=\"#1-23\" class=\"headerlink\" title=\"1.23\"></a>1.23</h3><p>判断条件最好不要用相加后的结果，应该用target - nums[i] 跟 nums[j]比较，这样保证不会溢出。</p>\n<p>同样的例子还有二分查找，(left + right) / 2 可以用left + ((rigth - left) &gt;&gt; 1))代替</p>\n<h3 id=\"1-26\"><a href=\"#1-26\" class=\"headerlink\" title=\"1.26\"></a>1.26</h3><p>回溯时</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"built_in\">pop_back</span>();</span><br></pre></td></tr></table></figure>\n\n<p>功力</p>\n<h3 id=\"1-28\"><a href=\"#1-28\" class=\"headerlink\" title=\"1.28\"></a>1.28</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l, j = r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; arr[j] &gt;= arr[l])&#123;j--;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= arr[l])&#123;i++;&#125;;</span><br><span class=\"line\">      <span class=\"built_in\">swap</span>(arr[i], arr[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(arr[i], arr[l]);</span><br><span class=\"line\">    <span class=\"built_in\">quickSort</span>(arr, l, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">quickSort</span>(arr, i + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><h3 id=\"大三上暑假苦苦学c-肝lc，记录一下每天的笔记\"><a href=\"#大三上暑假苦苦学c-肝lc，记录一下每天的笔记\" class=\"headerlink\" title=\"大三上暑假苦苦学c++肝lc，记录一下每天的笔记\"></a>大三上暑假苦苦学c++肝lc，记录一下每天的笔记</h3>","more":"<h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h3><blockquote>\n<p>两数之和(1) count = 1;</p>\n</blockquote>\n<p>c++ map</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：用insert函数插入pair数据：</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt; my_map;</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>,string&gt;(<span class=\"number\">1</span>,<span class=\"string\">&quot;first&quot;</span>));</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>,string&gt;(<span class=\"number\">2</span>,<span class=\"string\">&quot;second&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">第二种：用insert函数插入value_type数据：</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt; my_map;</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(map&lt;<span class=\"type\">int</span>,string&gt;::<span class=\"built_in\">value_type</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;first&quot;</span>));</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(map&lt;<span class=\"type\">int</span>,string&gt;::<span class=\"built_in\">value_type</span>(<span class=\"number\">2</span>,<span class=\"string\">&quot;second&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt;::iterator it;           <span class=\"comment\">//迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(it=my_map.<span class=\"built_in\">begin</span>();it!=my_map.<span class=\"built_in\">end</span>();it++)</span><br><span class=\"line\">    cout&lt;&lt;it-&gt;first&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">第三种：用数组的方式直接赋值：</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt; my_map;</span><br><span class=\"line\">my_map[<span class=\"number\">1</span>]=<span class=\"string\">&quot;first&quot;</span>;</span><br><span class=\"line\">my_map[<span class=\"number\">2</span>]=<span class=\"string\">&quot;second&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,string&gt;::iterator it;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(it=my_map.<span class=\"built_in\">begin</span>();it!=my_map.<span class=\"built_in\">end</span>();it++)</span><br><span class=\"line\">    cout&lt;&lt;it-&gt;first&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2\"></a>1.2</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersect</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; m1;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; m2;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums1.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            m1[nums1[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums2.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            m2[nums2[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::iterator iter;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (iter = m1.<span class=\"built_in\">begin</span>(); iter != m1.<span class=\"built_in\">end</span>(); iter++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> minT = <span class=\"built_in\">min</span>&lt;<span class=\"type\">int</span>&gt;(m2[iter-&gt;first],iter -&gt; second);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( minT&gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; minT; j++)&#123;</span><br><span class=\"line\">                    a.<span class=\"built_in\">push_back</span>(iter -&gt; first);</span><br><span class=\"line\">                &#125;         </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3\"><a href=\"#1-3\" class=\"headerlink\" title=\"1.3\"></a>1.3</h3><blockquote>\n<p>最大子数组和 = 2</p>\n<p>用两个栈实现队列 = 1    </p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> lSize = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; lSize; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                nums[i] += nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] &gt; max)&#123;</span><br><span class=\"line\">                max = nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CQueue</span> &#123;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; s1,s2;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CQueue</span>() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">appendTail</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        s1.<span class=\"built_in\">push</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">deleteHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!s2.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a=s2.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1.<span class=\"built_in\">empty</span>())  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s1.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">                s2.<span class=\"built_in\">push</span>(s1.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                s1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                </span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"type\">int</span> b = s2.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">          s2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">          <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Stack操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; q;\t<span class=\"comment\">//以int型为例</span></span><br><span class=\"line\"><span class=\"type\">int</span> x;</span><br><span class=\"line\">q.<span class=\"built_in\">push</span>(x);\t\t<span class=\"comment\">//将x压入栈顶</span></span><br><span class=\"line\">q.<span class=\"built_in\">top</span>();\t\t<span class=\"comment\">//返回栈顶的元素</span></span><br><span class=\"line\">q.<span class=\"built_in\">pop</span>();\t\t<span class=\"comment\">//删除栈顶的元素</span></span><br><span class=\"line\">q.<span class=\"built_in\">size</span>();\t\t<span class=\"comment\">//返回栈中元素的个数</span></span><br><span class=\"line\">q.<span class=\"built_in\">empty</span>();\t\t<span class=\"comment\">//检查栈是否为空,若为空返回true,否则返回false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4\"><a href=\"#1-4\" class=\"headerlink\" title=\"1.4\"></a>1.4</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">copyRandomList</span><span class=\"params\">(Node* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        Node* cur = head;</span><br><span class=\"line\">        unordered_map&lt;Node*, Node*&gt; map;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 复制各节点，并建立 “原节点 -&gt; 新节点” 的 Map 映射</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            map[cur] = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(cur-&gt;val);</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = head;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 构建新链表的 next 和 random 指向</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            map[cur]-&gt;next = map[cur-&gt;next];</span><br><span class=\"line\">            map[cur]-&gt;random = map[cur-&gt;random];</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 5. 返回新链表的头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map[head];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-16\"><a href=\"#1-16\" class=\"headerlink\" title=\"1.16\"></a>1.16</h3><p>queue</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">push</span>() 在队尾插入一个元素</span><br><span class=\"line\"><span class=\"built_in\">pop</span>() 删除队列第一个元素</span><br><span class=\"line\"><span class=\"built_in\">size</span>() 返回队列中元素个数</span><br><span class=\"line\"><span class=\"built_in\">empty</span>() 如果队列空则返回<span class=\"function\"><span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">front</span><span class=\"params\">()</span> 返回队列中的第一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">back</span><span class=\"params\">()</span> 返回队列中最后一个元素</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-17\"><a href=\"#1-17\" class=\"headerlink\" title=\"1.17\"></a>1.17</h3><p>二叉树镜像 辅助栈做法未学</p>\n<h3 id=\"1-18\"><a href=\"#1-18\" class=\"headerlink\" title=\"1.18\"></a>1.18</h3><p>斐波那契数列的矩阵幂算法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; q&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; res = <span class=\"built_in\">pow</span>(q, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; <span class=\"built_in\">pow</span>(vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt;&amp; a, <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; ret&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ret = <span class=\"built_in\">multiply</span>(ret, a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            a = <span class=\"built_in\">multiply</span>(a, a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; <span class=\"built_in\">multiply</span>(vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt;&amp; a, vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt;&amp; b) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">long</span>&gt;&gt; c&#123;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">                c[i][j] = (a[i][<span class=\"number\">0</span>] * b[<span class=\"number\">0</span>][j] + a[i][<span class=\"number\">1</span>] * b[<span class=\"number\">1</span>][j]) % MOD;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-20\"><a href=\"#1-20\" class=\"headerlink\" title=\"1.20\"></a>1.20</h3><p>循环条件有可能不经意间 因为变量改变 ——寻找bug</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode *res = <span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>), *p = res;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l1 &amp;&amp; l2 )&#123;</span><br><span class=\"line\">            l1-&gt;val &lt; l2-&gt;val ? (p-&gt;next = l1,l1 = l1-&gt;next) : (p-&gt;next = l2, l2 = l2-&gt;next);</span><br><span class=\"line\">            p = p-&gt;next;              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p-&gt;next = l1 ? l1 : l2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-23\"><a href=\"#1-23\" class=\"headerlink\" title=\"1.23\"></a>1.23</h3><p>判断条件最好不要用相加后的结果，应该用target - nums[i] 跟 nums[j]比较，这样保证不会溢出。</p>\n<p>同样的例子还有二分查找，(left + right) / 2 可以用left + ((rigth - left) &gt;&gt; 1))代替</p>\n<h3 id=\"1-26\"><a href=\"#1-26\" class=\"headerlink\" title=\"1.26\"></a>1.26</h3><p>回溯时</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"built_in\">pop_back</span>();</span><br></pre></td></tr></table></figure>\n\n<p>功力</p>\n<h3 id=\"1-28\"><a href=\"#1-28\" class=\"headerlink\" title=\"1.28\"></a>1.28</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l, j = r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; arr[j] &gt;= arr[l])&#123;j--;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= arr[l])&#123;i++;&#125;;</span><br><span class=\"line\">      <span class=\"built_in\">swap</span>(arr[i], arr[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(arr[i], arr[l]);</span><br><span class=\"line\">    <span class=\"built_in\">quickSort</span>(arr, l, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">quickSort</span>(arr, i + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"kotlin开发","date":"2023-04-10T03:18:34.000Z","_content":"\n## 安卓拓展\n\n该程序两个主要类：`MainActivity`和`DownloadService`。\n\n**MainActivity 类**\n\n`MainActivity`主要活动，它包含了以下部分：\n\n1. `REQUEST_WRITE_STORAGE`常量：用于标识请求写入外部存储权限的请求代码。\n2. `onCreate()`方法：请求存储权限以及初始化“下载”按钮的点击事件。\n3. `requestStoragePermission()`方法：用于请求写入外部存储的权限。\n4. `onRequestPermissionsResult()`方法：用于处理用户授予或拒绝权限请求的结果。\n\n当用户点击“下载”按钮时，`MainActivity`从两个文本编辑框（`et_resource_url`和`et_target_file`）中获取输入的URL和目标文件名。然后，它创建一个新的`Intent`，并将这些数据作为额外信息传递给`DownloadService`。\n\n**DownloadService 类**\n\n`DownloadService`是一个扩展了`IntentService`的类，用于处理下载任务。它包含以下部分：\n\n1. `ACTION_DOWNLOAD_COMPLETE`和`EXTRA_DOWNLOAD_SUCCESS`常量：用于在下载完成时通过广播发送下载状态。\n2. `onHandleIntent()`方法：在服务启动时执行，从传入的`Intent`中获取URL和目标文件名，然后调用`downloadFile()`方法来开始下载。\n3. `downloadFile()`方法：使用OkHttp库下载文件。下载成功后，文件将被保存到设备的外部存储的\"Download\"目录。下载完成后，它会调用`sendDownloadStatus()`方法发送下载状态。\n4. `sendDownloadStatus()`方法：创建一个新的`Intent`，并将下载状态（成功或失败）作为额外信息传递。然后，它通过广播发送这个`Intent`。\n\n`DownloadService`的工作原理是：接收从`MainActivity`传递的URL和目标文件名，然后使用OkHttp库下载文件并将其保存到设备的外部存储中。下载完成后，通过广播发送下载状态。","source":"_posts/安卓拓展.md","raw":"---\ntitle: kotlin开发\ndate: 2023-04-10 11:18:34\ntags:\n- kotlin\n- 安卓开发\n- dowdload\ncategories: \n- 笔记\n---\n\n## 安卓拓展\n\n该程序两个主要类：`MainActivity`和`DownloadService`。\n\n**MainActivity 类**\n\n`MainActivity`主要活动，它包含了以下部分：\n\n1. `REQUEST_WRITE_STORAGE`常量：用于标识请求写入外部存储权限的请求代码。\n2. `onCreate()`方法：请求存储权限以及初始化“下载”按钮的点击事件。\n3. `requestStoragePermission()`方法：用于请求写入外部存储的权限。\n4. `onRequestPermissionsResult()`方法：用于处理用户授予或拒绝权限请求的结果。\n\n当用户点击“下载”按钮时，`MainActivity`从两个文本编辑框（`et_resource_url`和`et_target_file`）中获取输入的URL和目标文件名。然后，它创建一个新的`Intent`，并将这些数据作为额外信息传递给`DownloadService`。\n\n**DownloadService 类**\n\n`DownloadService`是一个扩展了`IntentService`的类，用于处理下载任务。它包含以下部分：\n\n1. `ACTION_DOWNLOAD_COMPLETE`和`EXTRA_DOWNLOAD_SUCCESS`常量：用于在下载完成时通过广播发送下载状态。\n2. `onHandleIntent()`方法：在服务启动时执行，从传入的`Intent`中获取URL和目标文件名，然后调用`downloadFile()`方法来开始下载。\n3. `downloadFile()`方法：使用OkHttp库下载文件。下载成功后，文件将被保存到设备的外部存储的\"Download\"目录。下载完成后，它会调用`sendDownloadStatus()`方法发送下载状态。\n4. `sendDownloadStatus()`方法：创建一个新的`Intent`，并将下载状态（成功或失败）作为额外信息传递。然后，它通过广播发送这个`Intent`。\n\n`DownloadService`的工作原理是：接收从`MainActivity`传递的URL和目标文件名，然后使用OkHttp库下载文件并将其保存到设备的外部存储中。下载完成后，通过广播发送下载状态。","slug":"安卓拓展","published":1,"updated":"2023-04-27T11:50:27.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x49001kq05zcxex3bdz","content":"<h2 id=\"安卓拓展\"><a href=\"#安卓拓展\" class=\"headerlink\" title=\"安卓拓展\"></a>安卓拓展</h2><p>该程序两个主要类：<code>MainActivity</code>和<code>DownloadService</code>。</p>\n<p><strong>MainActivity 类</strong></p>\n<p><code>MainActivity</code>主要活动，它包含了以下部分：</p>\n<ol>\n<li><code>REQUEST_WRITE_STORAGE</code>常量：用于标识请求写入外部存储权限的请求代码。</li>\n<li><code>onCreate()</code>方法：请求存储权限以及初始化“下载”按钮的点击事件。</li>\n<li><code>requestStoragePermission()</code>方法：用于请求写入外部存储的权限。</li>\n<li><code>onRequestPermissionsResult()</code>方法：用于处理用户授予或拒绝权限请求的结果。</li>\n</ol>\n<p>当用户点击“下载”按钮时，<code>MainActivity</code>从两个文本编辑框（<code>et_resource_url</code>和<code>et_target_file</code>）中获取输入的URL和目标文件名。然后，它创建一个新的<code>Intent</code>，并将这些数据作为额外信息传递给<code>DownloadService</code>。</p>\n<p><strong>DownloadService 类</strong></p>\n<p><code>DownloadService</code>是一个扩展了<code>IntentService</code>的类，用于处理下载任务。它包含以下部分：</p>\n<ol>\n<li><code>ACTION_DOWNLOAD_COMPLETE</code>和<code>EXTRA_DOWNLOAD_SUCCESS</code>常量：用于在下载完成时通过广播发送下载状态。</li>\n<li><code>onHandleIntent()</code>方法：在服务启动时执行，从传入的<code>Intent</code>中获取URL和目标文件名，然后调用<code>downloadFile()</code>方法来开始下载。</li>\n<li><code>downloadFile()</code>方法：使用OkHttp库下载文件。下载成功后，文件将被保存到设备的外部存储的”Download”目录。下载完成后，它会调用<code>sendDownloadStatus()</code>方法发送下载状态。</li>\n<li><code>sendDownloadStatus()</code>方法：创建一个新的<code>Intent</code>，并将下载状态（成功或失败）作为额外信息传递。然后，它通过广播发送这个<code>Intent</code>。</li>\n</ol>\n<p><code>DownloadService</code>的工作原理是：接收从<code>MainActivity</code>传递的URL和目标文件名，然后使用OkHttp库下载文件并将其保存到设备的外部存储中。下载完成后，通过广播发送下载状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安卓拓展\"><a href=\"#安卓拓展\" class=\"headerlink\" title=\"安卓拓展\"></a>安卓拓展</h2><p>该程序两个主要类：<code>MainActivity</code>和<code>DownloadService</code>。</p>\n<p><strong>MainActivity 类</strong></p>\n<p><code>MainActivity</code>主要活动，它包含了以下部分：</p>\n<ol>\n<li><code>REQUEST_WRITE_STORAGE</code>常量：用于标识请求写入外部存储权限的请求代码。</li>\n<li><code>onCreate()</code>方法：请求存储权限以及初始化“下载”按钮的点击事件。</li>\n<li><code>requestStoragePermission()</code>方法：用于请求写入外部存储的权限。</li>\n<li><code>onRequestPermissionsResult()</code>方法：用于处理用户授予或拒绝权限请求的结果。</li>\n</ol>\n<p>当用户点击“下载”按钮时，<code>MainActivity</code>从两个文本编辑框（<code>et_resource_url</code>和<code>et_target_file</code>）中获取输入的URL和目标文件名。然后，它创建一个新的<code>Intent</code>，并将这些数据作为额外信息传递给<code>DownloadService</code>。</p>\n<p><strong>DownloadService 类</strong></p>\n<p><code>DownloadService</code>是一个扩展了<code>IntentService</code>的类，用于处理下载任务。它包含以下部分：</p>\n<ol>\n<li><code>ACTION_DOWNLOAD_COMPLETE</code>和<code>EXTRA_DOWNLOAD_SUCCESS</code>常量：用于在下载完成时通过广播发送下载状态。</li>\n<li><code>onHandleIntent()</code>方法：在服务启动时执行，从传入的<code>Intent</code>中获取URL和目标文件名，然后调用<code>downloadFile()</code>方法来开始下载。</li>\n<li><code>downloadFile()</code>方法：使用OkHttp库下载文件。下载成功后，文件将被保存到设备的外部存储的”Download”目录。下载完成后，它会调用<code>sendDownloadStatus()</code>方法发送下载状态。</li>\n<li><code>sendDownloadStatus()</code>方法：创建一个新的<code>Intent</code>，并将下载状态（成功或失败）作为额外信息传递。然后，它通过广播发送这个<code>Intent</code>。</li>\n</ol>\n<p><code>DownloadService</code>的工作原理是：接收从<code>MainActivity</code>传递的URL和目标文件名，然后使用OkHttp库下载文件并将其保存到设备的外部存储中。下载完成后，通过广播发送下载状态。</p>\n"},{"title":"23年11月实习笔记","date":"2023-11-30T13:30:56.000Z","_content":"\n### iterator案例\n\n```javascript\nfunction getUsers(){\n    setTimeout(() => {\n        let data = '用户数据';\n        iterator.next(data);\n    }, 1000);\n}\nfunction getOrders(){\n    setTimeout(() => {\n        let data = '订单数据';\n        iterator.next(data);\n    }, 2000);\n}\nfunction getGoods(){\n    setTimeout(() => {\n        let data = '商品数据';\n        iterator.next(data);\n    }, 3000);\n}\nfunction * gen(){\n    let users = yield getUsers();\n    console.log(users);\n    let oders = yield getOrders();\n    console.log(oders);\n    let goods = yield getGoods();\n    console.log(goods);\n}\nlet iterator = gen();\niterator.next()\n优点：可以解决回调地狱问题。\n```\n\n部署 Iterator 接口\n\n```javascript\nNumber.protoType[Symbol.iterator] = function * (){\n\tlet i = 0;\n  let num = this.valueOf();\n  while(i < num){\n  \tyield i++;\n  }\n}\n```\n\n**合并提交：** 想要将新提交与之前的提交合并为一个，可以使用 **git commit --amend** 来更改最新的提交。这会将新的更改添加到最新的提交中。\n\n```plain\ngit add <文件名> # 添加您的新更改或遗漏的细节 git commit --amend\n```\n\nArray.of()方法用于将一组值，转换为数组。\n\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。\n\n```javascript\nArray() // []\nArray(3) // [, , ,]\nArray(3, 11, 8) // [3, 11, 8]\n```\n\n上面代码中，Array()方法没有参数、一个参数、三个参数时，返回的结果都不一样。只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数只有一个正整数时，实际上是指定数组的长度。\n\n```javascript\nlet person = { name: 'John', age: 20 };\n\nconst f1 = (v) => v > this.age;\n\nfunction f2(v){\n  return v > this.age;\n}\n\n[10, 12, 26, 15].find(f1, person);    // 26\n[10, 12, 26, 15].find(f2, person);    // undefined\n```\n\nechats饼图百分比\n\n```javascript\noption = {\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b}: {c} ({d}%)' // 显示百分比\n  },\n  legend: {\n    top: '5%',\n    left: 'center'\n  },\n  series: [\n    {\n      name: 'Access From',\n      type: 'pie',\n      radius: ['40%', '70%'],\n      avoidLabelOverlap: false,\n      itemStyle: {\n        borderRadius: 10,\n        borderColor: '#fff',\n        borderWidth: 2\n      },\n      label: {\n        show: true, // 显示标签\n        position: 'outside', // 位置可以根据需要调整\n        formatter: '{b}: {d}%'\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: 40,\n          fontWeight: 'bold'\n        }\n      },\n      labelLine: {\n        show: true // 显示标签线\n      },\n      data: [\n        { value: 5, name: 'Search Engine' },\n        { value: 70, name: 'Direct' },\n        { value: 6, name: 'Email' },\n        { value: 4, name: 'Union Ads' },\n        { value: 14, name: 'Video Ads' }\n      ]\n    }\n  ]\n};\n折线（区域）图、柱状（条形）图: a（系列名称），b（类目值），c（数值）, d（无） \n \n散点图（气泡）图 : a（系列名称），b（数据名称），c（数值数组）, d（无） \n \n饼图、雷达图 : a（系列名称），b（数据项名称），c（数值）, d（百分比） \n \n弦图 : a（系列名称），b（项1名称），c（项1-项2值），d（项2名称)， e(项2-项1值)\n```\n\nes6 array\n\n- entries\n- keys\n- values\n- includes\n\nindexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。\n\n```javascript\n[1, [2, [3]]].flat(Infinity)\n```\n\ngrouptomap\n\nin\n\ncopywithin\n\n排序算法稳定性？\n\n```javascript\nObject.defineProperty(Object, 'is', {\n  value: function(x, y) {\n    if (x === y) {\n      // 针对+0 不等于 -0的情况\n      return x !== 0 || 1 / x === 1 / y;\n    }\n    // 针对NaN的情况\n    return x !== x && y !== y;\n  },\n  configurable: true,\n  enumerable: false,\n  writable: true\n});\nlet propKey = 'foo';\n\nlet obj = {\n  [propKey]: true,\n  ['a' + 'bc']: 123\n};\n```\n\n\n\n1. \n\n```plain\nnpm cache clean\n```\n\n\n\n1. \n\n```plain\nnpm cache clean\n```\n\n\n\nyarn cache clean\n\n\n\n\n\n```plain\ngit checkout -b 本地分支名 origin/分支2\n```\n\n\n注意，Symbol 值作为对象属性名时，不能用点运算符。\nSet 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。\n\n\n\n如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。\n\n\n\nWeakSet 的成员只能是对象和 Symbol 值\n\n\n\n### 11.2\n\nvue性能优化 异步组件 路由懒加载 Object.freeze() keep-alive 防抖截流 vfor-vif 按需加载 服务器渲染 欲加载 预渲染\n\nwebpack:图片压缩 e6-e5 优化sourcemap（未掌握）\n\ngzip cdn chrome performance\n\narguments是对象 类数组对象 转对象 Array.of( arrayfrom\n\ncss隐藏 10种 clip-path filter:blur(500px) <div hidden> width0 font:0 transform:scale(0)\n\n### 11.5\n\nGit提交消息的写法通常遵循一种规范，这有助于更好地组织和理解提交历史。常见的规范包括使用\"feat\"、\"fix\"、\"docs\"、\"style\"、\"chore\"等标签来指示提交的类型。以下是一些常见的提交消息格式和示例：\n\n1. **特性（feat）：** 用于引入新功能或改进现有功能。\n\n```plain\ngit commit -m \"feat: 添加用户注册功能\"\n```\n\n1. **修复（fix）：** 用于修复bug或错误。\n\n```plain\nsqlCopy code\ngit commit -m \"fix: 修复登录页面的验证问题\"\n```\n\n1. **文档（docs）：** 用于更新文档，通常是README或注释的更改。\n\n```plain\nsqlCopy code\ngit commit -m \"docs: 更新安装说明\"\n```\n\n1. **样式（style）：** 用于样式相关的更改，如格式化代码、调整缩进等。\n\n```plain\ngit commit -m \"style: 格式化代码文件\"\n```\n\n1. **杂务（chore）：** 用于杂项任务，不涉及功能或修复。\n\n```plain\ngit commit -m \"chore: 更新依赖项\"\n```\n\n1. **测试（test）：** 用于添加或修改测试相关的代码。\n\n```plain\ngit commit -m \"test: 添加用户注册页面的单元测试\"\n```\n\n1. **重构（refactor）：** 用于重构代码，改进性能或可维护性。\n\n```plain\ngit commit -m \"refactor: 重构用户管理模块\"\n```\n\n1. **性能（perf）：** 用于性能优化相关的更改。\n\n```plain\ngit commit -m \"perf: 优化数据加载速度\"\n```\n\n1. **回滚（revert）：** 用于撤销之前的提交。\n\n```plain\ngit commit -m \"revert: 撤销前一次提交\"\n```\n\n扩大node内存\n\nmac\n\nexport NODE_OPTIONS=--max_old_space_size=8096\n\n\n\nwin\nset NODE_OPTIONS=--max_old_space_size=8096\n\n```plain\ngit reflog\n```\n\n\n\n\n\n```plain\ngit reset --soft HEAD~1\n```\n\n\n\n\n\n##### 1、问题描述\n\n在变换表格时，重回电力，进行二次渲染，图表不生效，没有渲染出来。报错如下：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/2979317/1699943077166-206f3d2d-be48-4d95-8a73-5eaa4d3e8ae9.png)\n\n##### 2、解决办法\n\n获取dom元素移除这个标识，使得每次渲染时会重新渲染。.removeAttribute('_echarts_instance_') \n\n,document.getElementById('map').removeAttribute('_echarts_instance_')\n\n\n\n但是有些表格不移除实例也没问题\n\n#### 渲染机制\n\nechart渲染时，div容易会生成一个_echarts_instance_的属性，该属性就是当前echart的标识。\nechart找到该该标识后，根据你设置的各种属性进行渲染操作。\n当我们刷新已经实例化的echart图标时，echart会先匹配该_echarts_instance_属性的值是否和实例对象的一样，如果一样会在原生的结构上进行渲染。\n\n\n\n### 11.15\n\n强缓存和协商缓存\n\n### --legacy-peer-deps\n\ncontent-type:\n\n- 文本：text/plain、text/html、text/css、text/javascript、text/xml\n- 图片：image/gif、image/png、image/jpeg\n- 视频：video/webm、video/ogg\n- 音频：audio/midi、audio/mpeg、audio/webm、audio/ogg、audio/wav\n- 二进制：application/octet-stream、application/pdf、application/json\n\n\n\nMINE类型\n\n\n\nvm 继承窗口\n\n\n\n1. **yarn run dev --host 0.0.0.0(不需要修改配置文件)**\n2. **npm run dev --host (需要修改config/index.js，把host: 'localhost', 改为 host: '0.0.0.0')**\n3. **电脑的IP**+**本地项目的端口号**别人打开这个就可以访问本地项目了（类似于：192.168.100.100:8089 ）\n\n\n\nhost设置\n\nsudo vi /etc/hosts\n\n\n\n\n\n\nsudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache\n\n\n\nviteconfig \n\n```typescript\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport viteEslint from 'vite-plugin-eslint'\nimport path from 'path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    viteEslint({\n      failOnError: false //开发阶段不因为 ESLint 的错误打断开发\n    })\n  ],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src')\n    }\n  }\n})\n```\n\ntsconfig.json\n\n```plain\n\"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ]\n}\n```\n\n\n\n\n\n## await做了什么\n\n从字面意思上看await就是等待，await 等待的是一个表达式，这个表达式的返回值可以是一个promise对象也可以是其他值。\n\n很多人以为await会一直等待之后的表达式执行完之后才会继续执行后面的代码，**实际上await是一个让出线程的标志。await后面的表达式会先执行一遍，将await后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码。**\n\n\n\n在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：\n\n- 第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）\n- 第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。\n\nHTTP/2的多路复用就是为了解决上述的两个性能问题。\n在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。\n帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。\n多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。\n\n\n\n**\n****ChatGPT**\n\n在 JavaScript 中，数组方法可分为修改原始数组的方法和不修改原始数组的方法。下面是一些常见的数组方法，按照它们是否改变原始数组进行分类：\n\n### 会改变原数组的方法（原地修改数组）：\n\n1. **push() 和 pop()** - 分别用于在数组末尾添加元素和移除数组末尾的元素。\n2. **unshift() 和 shift()** - 分别用于在数组开头添加元素和移除数组开头的元素。\n3. **splice()** - 用于在指定位置修改数组，可以删除、替换或者插入元素。\n4. **reverse()** - 反转数组中元素的顺序。\n5. **sort()** - 对数组进行排序。\n6. **fill()** - 用指定的静态值填充数组中的元素。\n7. **copyWithin()** - 从数组内部复制元素到指定的起始索引位置。\n\n### 不会改变原数组的方法（返回新数组）：\n\n1. **concat()** - 用于连接两个或多个数组，返回一个新数组。\n2. **slice()** - 用于提取数组的一部分，返回一个新数组。\n3. **map()** - 创建一个新数组，其结果是原始数组中每个元素调用函数后的返回值。\n4. **filter()** - 创建一个新数组，包含通过函数检查的原始数组的元素。\n5. **reduce() 和 reduceRight()** - 对数组中的所有元素执行一个函数，并将结果累积为单个值。\n6. **join()** - 将数组中所有元素连接成一个字符串。\n7. **every()** 和 **some()** - 分别用于检查数组中所有元素是否满足条件或是否至少有一个元素满足条件。\n8. **indexOf() 和 lastIndexOf()** - 分别返回指定元素在数组中第一次出现的位置和最后一次出现的位置。\n\n```plain\nconst formatEndDate = (date: Date): void => {\n  if (date) {\n    const month = date.getMonth() + 1;\n    const formattedMonth = month < 10 ?\n      `0${month}` :\n      month;\n\n    endDate.value = `${date.getFullYear()}-${formattedMonth}`;\n  }\n};\n```\n\n\n\n\n\n```plain\n{\n    title: '序号',\n    key: 'no',\n    render(row, index) {\n      return h('span', index + 1 + (pagination.page - 1) * pagination.pageSize)\n    },\n    width: 60\n  },\nconst translatedZzMap4 = Object.keys(zzMap4).reduce((acc, key: string) => {\n\n      const translatedKey = pCNameMap[key] || key;\n\n      return { ...acc, [translatedKey]: zzMap4[key], };\n\n    }, {} as Record<string, any>);\n```\n\n\n\ngit init\n\ngit commit -m \"first commit\"\n\ngit branch -M main\n\ngit remote add origin git@github.com:mingjourney/Three.js-.git\n\ngit push -u origin main\n","source":"_posts/实习笔记（11月）.md","raw":"---\ntitle: 23年11月实习笔记\ndate: 2023-11.30 21:30:56\ntags:\n- 实习\n- Vue\ncategories: \n- 学习笔记\n---\n\n### iterator案例\n\n```javascript\nfunction getUsers(){\n    setTimeout(() => {\n        let data = '用户数据';\n        iterator.next(data);\n    }, 1000);\n}\nfunction getOrders(){\n    setTimeout(() => {\n        let data = '订单数据';\n        iterator.next(data);\n    }, 2000);\n}\nfunction getGoods(){\n    setTimeout(() => {\n        let data = '商品数据';\n        iterator.next(data);\n    }, 3000);\n}\nfunction * gen(){\n    let users = yield getUsers();\n    console.log(users);\n    let oders = yield getOrders();\n    console.log(oders);\n    let goods = yield getGoods();\n    console.log(goods);\n}\nlet iterator = gen();\niterator.next()\n优点：可以解决回调地狱问题。\n```\n\n部署 Iterator 接口\n\n```javascript\nNumber.protoType[Symbol.iterator] = function * (){\n\tlet i = 0;\n  let num = this.valueOf();\n  while(i < num){\n  \tyield i++;\n  }\n}\n```\n\n**合并提交：** 想要将新提交与之前的提交合并为一个，可以使用 **git commit --amend** 来更改最新的提交。这会将新的更改添加到最新的提交中。\n\n```plain\ngit add <文件名> # 添加您的新更改或遗漏的细节 git commit --amend\n```\n\nArray.of()方法用于将一组值，转换为数组。\n\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。\n\n```javascript\nArray() // []\nArray(3) // [, , ,]\nArray(3, 11, 8) // [3, 11, 8]\n```\n\n上面代码中，Array()方法没有参数、一个参数、三个参数时，返回的结果都不一样。只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数只有一个正整数时，实际上是指定数组的长度。\n\n```javascript\nlet person = { name: 'John', age: 20 };\n\nconst f1 = (v) => v > this.age;\n\nfunction f2(v){\n  return v > this.age;\n}\n\n[10, 12, 26, 15].find(f1, person);    // 26\n[10, 12, 26, 15].find(f2, person);    // undefined\n```\n\nechats饼图百分比\n\n```javascript\noption = {\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b}: {c} ({d}%)' // 显示百分比\n  },\n  legend: {\n    top: '5%',\n    left: 'center'\n  },\n  series: [\n    {\n      name: 'Access From',\n      type: 'pie',\n      radius: ['40%', '70%'],\n      avoidLabelOverlap: false,\n      itemStyle: {\n        borderRadius: 10,\n        borderColor: '#fff',\n        borderWidth: 2\n      },\n      label: {\n        show: true, // 显示标签\n        position: 'outside', // 位置可以根据需要调整\n        formatter: '{b}: {d}%'\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: 40,\n          fontWeight: 'bold'\n        }\n      },\n      labelLine: {\n        show: true // 显示标签线\n      },\n      data: [\n        { value: 5, name: 'Search Engine' },\n        { value: 70, name: 'Direct' },\n        { value: 6, name: 'Email' },\n        { value: 4, name: 'Union Ads' },\n        { value: 14, name: 'Video Ads' }\n      ]\n    }\n  ]\n};\n折线（区域）图、柱状（条形）图: a（系列名称），b（类目值），c（数值）, d（无） \n \n散点图（气泡）图 : a（系列名称），b（数据名称），c（数值数组）, d（无） \n \n饼图、雷达图 : a（系列名称），b（数据项名称），c（数值）, d（百分比） \n \n弦图 : a（系列名称），b（项1名称），c（项1-项2值），d（项2名称)， e(项2-项1值)\n```\n\nes6 array\n\n- entries\n- keys\n- values\n- includes\n\nindexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。\n\n```javascript\n[1, [2, [3]]].flat(Infinity)\n```\n\ngrouptomap\n\nin\n\ncopywithin\n\n排序算法稳定性？\n\n```javascript\nObject.defineProperty(Object, 'is', {\n  value: function(x, y) {\n    if (x === y) {\n      // 针对+0 不等于 -0的情况\n      return x !== 0 || 1 / x === 1 / y;\n    }\n    // 针对NaN的情况\n    return x !== x && y !== y;\n  },\n  configurable: true,\n  enumerable: false,\n  writable: true\n});\nlet propKey = 'foo';\n\nlet obj = {\n  [propKey]: true,\n  ['a' + 'bc']: 123\n};\n```\n\n\n\n1. \n\n```plain\nnpm cache clean\n```\n\n\n\n1. \n\n```plain\nnpm cache clean\n```\n\n\n\nyarn cache clean\n\n\n\n\n\n```plain\ngit checkout -b 本地分支名 origin/分支2\n```\n\n\n注意，Symbol 值作为对象属性名时，不能用点运算符。\nSet 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。\n\n\n\n如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。\n\n\n\nWeakSet 的成员只能是对象和 Symbol 值\n\n\n\n### 11.2\n\nvue性能优化 异步组件 路由懒加载 Object.freeze() keep-alive 防抖截流 vfor-vif 按需加载 服务器渲染 欲加载 预渲染\n\nwebpack:图片压缩 e6-e5 优化sourcemap（未掌握）\n\ngzip cdn chrome performance\n\narguments是对象 类数组对象 转对象 Array.of( arrayfrom\n\ncss隐藏 10种 clip-path filter:blur(500px) <div hidden> width0 font:0 transform:scale(0)\n\n### 11.5\n\nGit提交消息的写法通常遵循一种规范，这有助于更好地组织和理解提交历史。常见的规范包括使用\"feat\"、\"fix\"、\"docs\"、\"style\"、\"chore\"等标签来指示提交的类型。以下是一些常见的提交消息格式和示例：\n\n1. **特性（feat）：** 用于引入新功能或改进现有功能。\n\n```plain\ngit commit -m \"feat: 添加用户注册功能\"\n```\n\n1. **修复（fix）：** 用于修复bug或错误。\n\n```plain\nsqlCopy code\ngit commit -m \"fix: 修复登录页面的验证问题\"\n```\n\n1. **文档（docs）：** 用于更新文档，通常是README或注释的更改。\n\n```plain\nsqlCopy code\ngit commit -m \"docs: 更新安装说明\"\n```\n\n1. **样式（style）：** 用于样式相关的更改，如格式化代码、调整缩进等。\n\n```plain\ngit commit -m \"style: 格式化代码文件\"\n```\n\n1. **杂务（chore）：** 用于杂项任务，不涉及功能或修复。\n\n```plain\ngit commit -m \"chore: 更新依赖项\"\n```\n\n1. **测试（test）：** 用于添加或修改测试相关的代码。\n\n```plain\ngit commit -m \"test: 添加用户注册页面的单元测试\"\n```\n\n1. **重构（refactor）：** 用于重构代码，改进性能或可维护性。\n\n```plain\ngit commit -m \"refactor: 重构用户管理模块\"\n```\n\n1. **性能（perf）：** 用于性能优化相关的更改。\n\n```plain\ngit commit -m \"perf: 优化数据加载速度\"\n```\n\n1. **回滚（revert）：** 用于撤销之前的提交。\n\n```plain\ngit commit -m \"revert: 撤销前一次提交\"\n```\n\n扩大node内存\n\nmac\n\nexport NODE_OPTIONS=--max_old_space_size=8096\n\n\n\nwin\nset NODE_OPTIONS=--max_old_space_size=8096\n\n```plain\ngit reflog\n```\n\n\n\n\n\n```plain\ngit reset --soft HEAD~1\n```\n\n\n\n\n\n##### 1、问题描述\n\n在变换表格时，重回电力，进行二次渲染，图表不生效，没有渲染出来。报错如下：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/2979317/1699943077166-206f3d2d-be48-4d95-8a73-5eaa4d3e8ae9.png)\n\n##### 2、解决办法\n\n获取dom元素移除这个标识，使得每次渲染时会重新渲染。.removeAttribute('_echarts_instance_') \n\n,document.getElementById('map').removeAttribute('_echarts_instance_')\n\n\n\n但是有些表格不移除实例也没问题\n\n#### 渲染机制\n\nechart渲染时，div容易会生成一个_echarts_instance_的属性，该属性就是当前echart的标识。\nechart找到该该标识后，根据你设置的各种属性进行渲染操作。\n当我们刷新已经实例化的echart图标时，echart会先匹配该_echarts_instance_属性的值是否和实例对象的一样，如果一样会在原生的结构上进行渲染。\n\n\n\n### 11.15\n\n强缓存和协商缓存\n\n### --legacy-peer-deps\n\ncontent-type:\n\n- 文本：text/plain、text/html、text/css、text/javascript、text/xml\n- 图片：image/gif、image/png、image/jpeg\n- 视频：video/webm、video/ogg\n- 音频：audio/midi、audio/mpeg、audio/webm、audio/ogg、audio/wav\n- 二进制：application/octet-stream、application/pdf、application/json\n\n\n\nMINE类型\n\n\n\nvm 继承窗口\n\n\n\n1. **yarn run dev --host 0.0.0.0(不需要修改配置文件)**\n2. **npm run dev --host (需要修改config/index.js，把host: 'localhost', 改为 host: '0.0.0.0')**\n3. **电脑的IP**+**本地项目的端口号**别人打开这个就可以访问本地项目了（类似于：192.168.100.100:8089 ）\n\n\n\nhost设置\n\nsudo vi /etc/hosts\n\n\n\n\n\n\nsudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache\n\n\n\nviteconfig \n\n```typescript\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport viteEslint from 'vite-plugin-eslint'\nimport path from 'path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    viteEslint({\n      failOnError: false //开发阶段不因为 ESLint 的错误打断开发\n    })\n  ],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src')\n    }\n  }\n})\n```\n\ntsconfig.json\n\n```plain\n\"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ]\n}\n```\n\n\n\n\n\n## await做了什么\n\n从字面意思上看await就是等待，await 等待的是一个表达式，这个表达式的返回值可以是一个promise对象也可以是其他值。\n\n很多人以为await会一直等待之后的表达式执行完之后才会继续执行后面的代码，**实际上await是一个让出线程的标志。await后面的表达式会先执行一遍，将await后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码。**\n\n\n\n在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：\n\n- 第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）\n- 第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。\n\nHTTP/2的多路复用就是为了解决上述的两个性能问题。\n在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。\n帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。\n多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。\n\n\n\n**\n****ChatGPT**\n\n在 JavaScript 中，数组方法可分为修改原始数组的方法和不修改原始数组的方法。下面是一些常见的数组方法，按照它们是否改变原始数组进行分类：\n\n### 会改变原数组的方法（原地修改数组）：\n\n1. **push() 和 pop()** - 分别用于在数组末尾添加元素和移除数组末尾的元素。\n2. **unshift() 和 shift()** - 分别用于在数组开头添加元素和移除数组开头的元素。\n3. **splice()** - 用于在指定位置修改数组，可以删除、替换或者插入元素。\n4. **reverse()** - 反转数组中元素的顺序。\n5. **sort()** - 对数组进行排序。\n6. **fill()** - 用指定的静态值填充数组中的元素。\n7. **copyWithin()** - 从数组内部复制元素到指定的起始索引位置。\n\n### 不会改变原数组的方法（返回新数组）：\n\n1. **concat()** - 用于连接两个或多个数组，返回一个新数组。\n2. **slice()** - 用于提取数组的一部分，返回一个新数组。\n3. **map()** - 创建一个新数组，其结果是原始数组中每个元素调用函数后的返回值。\n4. **filter()** - 创建一个新数组，包含通过函数检查的原始数组的元素。\n5. **reduce() 和 reduceRight()** - 对数组中的所有元素执行一个函数，并将结果累积为单个值。\n6. **join()** - 将数组中所有元素连接成一个字符串。\n7. **every()** 和 **some()** - 分别用于检查数组中所有元素是否满足条件或是否至少有一个元素满足条件。\n8. **indexOf() 和 lastIndexOf()** - 分别返回指定元素在数组中第一次出现的位置和最后一次出现的位置。\n\n```plain\nconst formatEndDate = (date: Date): void => {\n  if (date) {\n    const month = date.getMonth() + 1;\n    const formattedMonth = month < 10 ?\n      `0${month}` :\n      month;\n\n    endDate.value = `${date.getFullYear()}-${formattedMonth}`;\n  }\n};\n```\n\n\n\n\n\n```plain\n{\n    title: '序号',\n    key: 'no',\n    render(row, index) {\n      return h('span', index + 1 + (pagination.page - 1) * pagination.pageSize)\n    },\n    width: 60\n  },\nconst translatedZzMap4 = Object.keys(zzMap4).reduce((acc, key: string) => {\n\n      const translatedKey = pCNameMap[key] || key;\n\n      return { ...acc, [translatedKey]: zzMap4[key], };\n\n    }, {} as Record<string, any>);\n```\n\n\n\ngit init\n\ngit commit -m \"first commit\"\n\ngit branch -M main\n\ngit remote add origin git@github.com:mingjourney/Three.js-.git\n\ngit push -u origin main\n","slug":"实习笔记（11月）","published":1,"updated":"2023-12-05T03:20:34.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x4a001nq05z0efx9nq0","content":"<h3 id=\"iterator案例\"><a href=\"#iterator案例\" class=\"headerlink\" title=\"iterator案例\"></a>iterator案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUsers</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;用户数据&#x27;</span>;</span><br><span class=\"line\">        iterator.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getOrders</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;订单数据&#x27;</span>;</span><br><span class=\"line\">        iterator.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getGoods</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;商品数据&#x27;</span>;</span><br><span class=\"line\">        iterator.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> * <span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users = <span class=\"keyword\">yield</span> <span class=\"title function_\">getUsers</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(users);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oders = <span class=\"keyword\">yield</span> <span class=\"title function_\">getOrders</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(oders);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> goods = <span class=\"keyword\">yield</span> <span class=\"title function_\">getGoods</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(goods);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">优点：可以解决回调地狱问题。</span><br></pre></td></tr></table></figure>\n\n<p>部署 Iterator 接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">protoType</span>[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span> * ()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"title function_\">valueOf</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; num)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">yield</span> i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>合并提交：</strong> 想要将新提交与之前的提交合并为一个，可以使用 <strong>git commit –amend</strong> 来更改最新的提交。这会将新的更改添加到最新的提交中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;文件名&gt; # 添加您的新更改或遗漏的细节 git commit --amend</span><br></pre></td></tr></table></figure>\n\n<p>Array.of()方法用于将一组值，转换为数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">3</span>).<span class=\"property\">length</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>() <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [, , ,]</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，Array()方法没有参数、一个参数、三个参数时，返回的结果都不一样。只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数只有一个正整数时，实际上是指定数组的长度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">f1</span> = (<span class=\"params\">v</span>) =&gt; v &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f2</span>(<span class=\"params\">v</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].<span class=\"title function_\">find</span>(f1, person);    <span class=\"comment\">// 26</span></span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].<span class=\"title function_\">find</span>(f2, person);    <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>echats饼图百分比</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option = &#123;</span><br><span class=\"line\">  <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;item&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&#x27;</span> <span class=\"comment\">// 显示百分比</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">top</span>: <span class=\"string\">&#x27;5%&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">left</span>: <span class=\"string\">&#x27;center&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">series</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Access From&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;pie&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">radius</span>: [<span class=\"string\">&#x27;40%&#x27;</span>, <span class=\"string\">&#x27;70%&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">avoidLabelOverlap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">borderRadius</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">borderColor</span>: <span class=\"string\">&#x27;#fff&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">borderWidth</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">label</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 显示标签</span></span><br><span class=\"line\">        <span class=\"attr\">position</span>: <span class=\"string\">&#x27;outside&#x27;</span>, <span class=\"comment\">// 位置可以根据需要调整</span></span><br><span class=\"line\">        <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;b&#125;: &#123;d&#125;%&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">emphasis</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">label</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">fontSize</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">          <span class=\"attr\">fontWeight</span>: <span class=\"string\">&#x27;bold&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">labelLine</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 显示标签线</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Search Engine&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">70</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Direct&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Email&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Union Ads&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Video Ads&#x27;</span> &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">折线（区域）图、柱状（条形）图: a（系列名称），b（类目值），c（数值）, d（无） </span><br><span class=\"line\"> </span><br><span class=\"line\">散点图（气泡）图 : a（系列名称），b（数据名称），c（数值数组）, d（无） </span><br><span class=\"line\"> </span><br><span class=\"line\">饼图、雷达图 : a（系列名称），b（数据项名称），c（数值）, d（百分比） </span><br><span class=\"line\"> </span><br><span class=\"line\">弦图 : a（系列名称），b（项<span class=\"number\">1</span>名称），c（项<span class=\"number\">1</span>-项<span class=\"number\">2</span>值），d（项<span class=\"number\">2</span>名称)， <span class=\"title function_\">e</span>(项<span class=\"number\">2</span>-项<span class=\"number\">1</span>值)</span><br></pre></td></tr></table></figure>\n\n<p>es6 array</p>\n<ul>\n<li>entries</li>\n<li>keys</li>\n<li>values</li>\n<li>includes</li>\n</ul>\n<p>indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>]]].<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>)</span><br></pre></td></tr></table></figure>\n\n<p>grouptomap</p>\n<p>in</p>\n<p>copywithin</p>\n<p>排序算法稳定性？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Object</span>, <span class=\"string\">&#x27;is&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x === y) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 针对+0 不等于 -0的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / x === <span class=\"number\">1</span> / y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 针对NaN的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x !== x &amp;&amp; y !== y;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> propKey = <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [propKey]: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  [<span class=\"string\">&#x27;a&#x27;</span> + <span class=\"string\">&#x27;bc&#x27;</span>]: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n\n\n\n<p>yarn cache clean</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 本地分支名 origin/分支2</span><br></pre></td></tr></table></figure>\n\n\n<p>注意，Symbol 值作为对象属性名时，不能用点运算符。<br>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。</p>\n<p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。</p>\n<p>WeakSet 的成员只能是对象和 Symbol 值</p>\n<h3 id=\"11-2\"><a href=\"#11-2\" class=\"headerlink\" title=\"11.2\"></a>11.2</h3><p>vue性能优化 异步组件 路由懒加载 Object.freeze() keep-alive 防抖截流 vfor-vif 按需加载 服务器渲染 欲加载 预渲染</p>\n<p>webpack:图片压缩 e6-e5 优化sourcemap（未掌握）</p>\n<p>gzip cdn chrome performance</p>\n<p>arguments是对象 类数组对象 转对象 Array.of( arrayfrom</p>\n<p>css隐藏 10种 clip-path filter:blur(500px) <div hidden> width0 font:0 transform:scale(0)</p>\n<h3 id=\"11-5\"><a href=\"#11-5\" class=\"headerlink\" title=\"11.5\"></a>11.5</h3><p>Git提交消息的写法通常遵循一种规范，这有助于更好地组织和理解提交历史。常见的规范包括使用”feat”、”fix”、”docs”、”style”、”chore”等标签来指示提交的类型。以下是一些常见的提交消息格式和示例：</p>\n<ol>\n<li><strong>特性（feat）：</strong> 用于引入新功能或改进现有功能。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;feat: 添加用户注册功能&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>修复（fix）：</strong> 用于修复bug或错误。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlCopy code</span><br><span class=\"line\">git commit -m &quot;fix: 修复登录页面的验证问题&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>文档（docs）：</strong> 用于更新文档，通常是README或注释的更改。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlCopy code</span><br><span class=\"line\">git commit -m &quot;docs: 更新安装说明&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>样式（style）：</strong> 用于样式相关的更改，如格式化代码、调整缩进等。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;style: 格式化代码文件&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>杂务（chore）：</strong> 用于杂项任务，不涉及功能或修复。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;chore: 更新依赖项&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>测试（test）：</strong> 用于添加或修改测试相关的代码。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;test: 添加用户注册页面的单元测试&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>重构（refactor）：</strong> 用于重构代码，改进性能或可维护性。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;refactor: 重构用户管理模块&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>性能（perf）：</strong> 用于性能优化相关的更改。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;perf: 优化数据加载速度&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>回滚（revert）：</strong> 用于撤销之前的提交。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;revert: 撤销前一次提交&quot;</span><br></pre></td></tr></table></figure>\n\n<p>扩大node内存</p>\n<p>mac</p>\n<p>export NODE_OPTIONS=–max_old_space_size=8096</p>\n<p>win<br>set NODE_OPTIONS=–max_old_space_size=8096</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"1、问题描述\"><a href=\"#1、问题描述\" class=\"headerlink\" title=\"1、问题描述\"></a>1、问题描述</h5><p>在变换表格时，重回电力，进行二次渲染，图表不生效，没有渲染出来。报错如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/2979317/1699943077166-206f3d2d-be48-4d95-8a73-5eaa4d3e8ae9.png\" alt=\"img\"></p>\n<h5 id=\"2、解决办法\"><a href=\"#2、解决办法\" class=\"headerlink\" title=\"2、解决办法\"></a>2、解决办法</h5><p>获取dom元素移除这个标识，使得每次渲染时会重新渲染。.removeAttribute(‘<em>echarts_instance</em>‘) </p>\n<p>,document.getElementById(‘map’).removeAttribute(‘<em>echarts_instance</em>‘)</p>\n<p>但是有些表格不移除实例也没问题</p>\n<h4 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h4><p>echart渲染时，div容易会生成一个_echarts_instance_的属性，该属性就是当前echart的标识。<br>echart找到该该标识后，根据你设置的各种属性进行渲染操作。<br>当我们刷新已经实例化的echart图标时，echart会先匹配该_echarts_instance_属性的值是否和实例对象的一样，如果一样会在原生的结构上进行渲染。</p>\n<h3 id=\"11-15\"><a href=\"#11-15\" class=\"headerlink\" title=\"11.15\"></a>11.15</h3><p>强缓存和协商缓存</p>\n<h3 id=\"–legacy-peer-deps\"><a href=\"#–legacy-peer-deps\" class=\"headerlink\" title=\"–legacy-peer-deps\"></a>–legacy-peer-deps</h3><p>content-type:</p>\n<ul>\n<li>文本：text/plain、text/html、text/css、text/javascript、text/xml</li>\n<li>图片：image/gif、image/png、image/jpeg</li>\n<li>视频：video/webm、video/ogg</li>\n<li>音频：audio/midi、audio/mpeg、audio/webm、audio/ogg、audio/wav</li>\n<li>二进制：application/octet-stream、application/pdf、application/json</li>\n</ul>\n<p>MINE类型</p>\n<p>vm 继承窗口</p>\n<ol>\n<li><strong>yarn run dev –host 0.0.0.0(不需要修改配置文件)</strong></li>\n<li><strong>npm run dev –host (需要修改config/index.js，把host: ‘localhost’, 改为 host: ‘0.0.0.0’)</strong></li>\n<li><strong>电脑的IP</strong>+<strong>本地项目的端口号</strong>别人打开这个就可以访问本地项目了（类似于：192.168.100.100:8089 ）</li>\n</ol>\n<p>host设置</p>\n<p>sudo vi /etc/hosts</p>\n<p>sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache</p>\n<p>viteconfig </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> react <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vitejs/plugin-react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> viteEslint <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite-plugin-eslint&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">react</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">viteEslint</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">failOnError</span>: <span class=\"literal\">false</span> <span class=\"comment\">//开发阶段不因为 ESLint 的错误打断开发</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;@&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>tsconfig.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;baseUrl&quot;: &quot;./&quot;,</span><br><span class=\"line\">    &quot;paths&quot;: &#123;</span><br><span class=\"line\">      &quot;@/*&quot;: [</span><br><span class=\"line\">        &quot;src/*&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"await做了什么\"><a href=\"#await做了什么\" class=\"headerlink\" title=\"await做了什么\"></a>await做了什么</h2><p>从字面意思上看await就是等待，await 等待的是一个表达式，这个表达式的返回值可以是一个promise对象也可以是其他值。</p>\n<p>很多人以为await会一直等待之后的表达式执行完之后才会继续执行后面的代码，<strong>实际上await是一个让出线程的标志。await后面的表达式会先执行一遍，将await后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码。</strong></p>\n<p>在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：</p>\n<ul>\n<li>第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）</li>\n<li>第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。</li>\n</ul>\n<p>HTTP/2的多路复用就是为了解决上述的两个性能问题。<br>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。<br>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p>\n<p>**<br>**<strong>ChatGPT</strong></p>\n<p>在 JavaScript 中，数组方法可分为修改原始数组的方法和不修改原始数组的方法。下面是一些常见的数组方法，按照它们是否改变原始数组进行分类：</p>\n<h3 id=\"会改变原数组的方法（原地修改数组）：\"><a href=\"#会改变原数组的方法（原地修改数组）：\" class=\"headerlink\" title=\"会改变原数组的方法（原地修改数组）：\"></a>会改变原数组的方法（原地修改数组）：</h3><ol>\n<li><strong>push() 和 pop()</strong> - 分别用于在数组末尾添加元素和移除数组末尾的元素。</li>\n<li><strong>unshift() 和 shift()</strong> - 分别用于在数组开头添加元素和移除数组开头的元素。</li>\n<li><strong>splice()</strong> - 用于在指定位置修改数组，可以删除、替换或者插入元素。</li>\n<li><strong>reverse()</strong> - 反转数组中元素的顺序。</li>\n<li><strong>sort()</strong> - 对数组进行排序。</li>\n<li><strong>fill()</strong> - 用指定的静态值填充数组中的元素。</li>\n<li><strong>copyWithin()</strong> - 从数组内部复制元素到指定的起始索引位置。</li>\n</ol>\n<h3 id=\"不会改变原数组的方法（返回新数组）：\"><a href=\"#不会改变原数组的方法（返回新数组）：\" class=\"headerlink\" title=\"不会改变原数组的方法（返回新数组）：\"></a>不会改变原数组的方法（返回新数组）：</h3><ol>\n<li><strong>concat()</strong> - 用于连接两个或多个数组，返回一个新数组。</li>\n<li><strong>slice()</strong> - 用于提取数组的一部分，返回一个新数组。</li>\n<li><strong>map()</strong> - 创建一个新数组，其结果是原始数组中每个元素调用函数后的返回值。</li>\n<li><strong>filter()</strong> - 创建一个新数组，包含通过函数检查的原始数组的元素。</li>\n<li><strong>reduce() 和 reduceRight()</strong> - 对数组中的所有元素执行一个函数，并将结果累积为单个值。</li>\n<li><strong>join()</strong> - 将数组中所有元素连接成一个字符串。</li>\n<li><strong>every()</strong> 和 <strong>some()</strong> - 分别用于检查数组中所有元素是否满足条件或是否至少有一个元素满足条件。</li>\n<li><strong>indexOf() 和 lastIndexOf()</strong> - 分别返回指定元素在数组中第一次出现的位置和最后一次出现的位置。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const formatEndDate = (date: Date): void =&gt; &#123;</span><br><span class=\"line\">  if (date) &#123;</span><br><span class=\"line\">    const month = date.getMonth() + 1;</span><br><span class=\"line\">    const formattedMonth = month &lt; 10 ?</span><br><span class=\"line\">      `0$&#123;month&#125;` :</span><br><span class=\"line\">      month;</span><br><span class=\"line\"></span><br><span class=\"line\">    endDate.value = `$&#123;date.getFullYear()&#125;-$&#123;formattedMonth&#125;`;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    title: &#x27;序号&#x27;,</span><br><span class=\"line\">    key: &#x27;no&#x27;,</span><br><span class=\"line\">    render(row, index) &#123;</span><br><span class=\"line\">      return h(&#x27;span&#x27;, index + 1 + (pagination.page - 1) * pagination.pageSize)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    width: 60</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">const translatedZzMap4 = Object.keys(zzMap4).reduce((acc, key: string) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      const translatedKey = pCNameMap[key] || key;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123; ...acc, [translatedKey]: zzMap4[key], &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, &#123;&#125; as Record&lt;string, any&gt;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>git init</p>\n<p>git commit -m “first commit”</p>\n<p>git branch -M main</p>\n<p>git remote add origin <a href=\"mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>:mingjourney/Three.js-.git</p>\n<p>git push -u origin main</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"iterator案例\"><a href=\"#iterator案例\" class=\"headerlink\" title=\"iterator案例\"></a>iterator案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUsers</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;用户数据&#x27;</span>;</span><br><span class=\"line\">        iterator.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getOrders</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;订单数据&#x27;</span>;</span><br><span class=\"line\">        iterator.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getGoods</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;商品数据&#x27;</span>;</span><br><span class=\"line\">        iterator.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> * <span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users = <span class=\"keyword\">yield</span> <span class=\"title function_\">getUsers</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(users);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oders = <span class=\"keyword\">yield</span> <span class=\"title function_\">getOrders</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(oders);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> goods = <span class=\"keyword\">yield</span> <span class=\"title function_\">getGoods</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(goods);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">优点：可以解决回调地狱问题。</span><br></pre></td></tr></table></figure>\n\n<p>部署 Iterator 接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">protoType</span>[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span> * ()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"title function_\">valueOf</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; num)&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">yield</span> i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>合并提交：</strong> 想要将新提交与之前的提交合并为一个，可以使用 <strong>git commit –amend</strong> 来更改最新的提交。这会将新的更改添加到最新的提交中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;文件名&gt; # 添加您的新更改或遗漏的细节 git commit --amend</span><br></pre></td></tr></table></figure>\n\n<p>Array.of()方法用于将一组值，转换为数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">3</span>).<span class=\"property\">length</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>() <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [, , ,]</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，Array()方法没有参数、一个参数、三个参数时，返回的结果都不一样。只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数只有一个正整数时，实际上是指定数组的长度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">f1</span> = (<span class=\"params\">v</span>) =&gt; v &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f2</span>(<span class=\"params\">v</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].<span class=\"title function_\">find</span>(f1, person);    <span class=\"comment\">// 26</span></span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">26</span>, <span class=\"number\">15</span>].<span class=\"title function_\">find</span>(f2, person);    <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>echats饼图百分比</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option = &#123;</span><br><span class=\"line\">  <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;item&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&#x27;</span> <span class=\"comment\">// 显示百分比</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">top</span>: <span class=\"string\">&#x27;5%&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">left</span>: <span class=\"string\">&#x27;center&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">series</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Access From&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;pie&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">radius</span>: [<span class=\"string\">&#x27;40%&#x27;</span>, <span class=\"string\">&#x27;70%&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">avoidLabelOverlap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">borderRadius</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">borderColor</span>: <span class=\"string\">&#x27;#fff&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">borderWidth</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">label</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 显示标签</span></span><br><span class=\"line\">        <span class=\"attr\">position</span>: <span class=\"string\">&#x27;outside&#x27;</span>, <span class=\"comment\">// 位置可以根据需要调整</span></span><br><span class=\"line\">        <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;b&#125;: &#123;d&#125;%&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">emphasis</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">label</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">fontSize</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">          <span class=\"attr\">fontWeight</span>: <span class=\"string\">&#x27;bold&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">labelLine</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 显示标签线</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Search Engine&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">70</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Direct&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Email&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Union Ads&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">14</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Video Ads&#x27;</span> &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">折线（区域）图、柱状（条形）图: a（系列名称），b（类目值），c（数值）, d（无） </span><br><span class=\"line\"> </span><br><span class=\"line\">散点图（气泡）图 : a（系列名称），b（数据名称），c（数值数组）, d（无） </span><br><span class=\"line\"> </span><br><span class=\"line\">饼图、雷达图 : a（系列名称），b（数据项名称），c（数值）, d（百分比） </span><br><span class=\"line\"> </span><br><span class=\"line\">弦图 : a（系列名称），b（项<span class=\"number\">1</span>名称），c（项<span class=\"number\">1</span>-项<span class=\"number\">2</span>值），d（项<span class=\"number\">2</span>名称)， <span class=\"title function_\">e</span>(项<span class=\"number\">2</span>-项<span class=\"number\">1</span>值)</span><br></pre></td></tr></table></figure>\n\n<p>es6 array</p>\n<ul>\n<li>entries</li>\n<li>keys</li>\n<li>values</li>\n<li>includes</li>\n</ul>\n<p>indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>]]].<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>)</span><br></pre></td></tr></table></figure>\n\n<p>grouptomap</p>\n<p>in</p>\n<p>copywithin</p>\n<p>排序算法稳定性？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Object</span>, <span class=\"string\">&#x27;is&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x === y) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 针对+0 不等于 -0的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / x === <span class=\"number\">1</span> / y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 针对NaN的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x !== x &amp;&amp; y !== y;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> propKey = <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [propKey]: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  [<span class=\"string\">&#x27;a&#x27;</span> + <span class=\"string\">&#x27;bc&#x27;</span>]: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n\n\n\n<p>yarn cache clean</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 本地分支名 origin/分支2</span><br></pre></td></tr></table></figure>\n\n\n<p>注意，Symbol 值作为对象属性名时，不能用点运算符。<br>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。</p>\n<p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。</p>\n<p>WeakSet 的成员只能是对象和 Symbol 值</p>\n<h3 id=\"11-2\"><a href=\"#11-2\" class=\"headerlink\" title=\"11.2\"></a>11.2</h3><p>vue性能优化 异步组件 路由懒加载 Object.freeze() keep-alive 防抖截流 vfor-vif 按需加载 服务器渲染 欲加载 预渲染</p>\n<p>webpack:图片压缩 e6-e5 优化sourcemap（未掌握）</p>\n<p>gzip cdn chrome performance</p>\n<p>arguments是对象 类数组对象 转对象 Array.of( arrayfrom</p>\n<p>css隐藏 10种 clip-path filter:blur(500px) <div hidden> width0 font:0 transform:scale(0)</p>\n<h3 id=\"11-5\"><a href=\"#11-5\" class=\"headerlink\" title=\"11.5\"></a>11.5</h3><p>Git提交消息的写法通常遵循一种规范，这有助于更好地组织和理解提交历史。常见的规范包括使用”feat”、”fix”、”docs”、”style”、”chore”等标签来指示提交的类型。以下是一些常见的提交消息格式和示例：</p>\n<ol>\n<li><strong>特性（feat）：</strong> 用于引入新功能或改进现有功能。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;feat: 添加用户注册功能&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>修复（fix）：</strong> 用于修复bug或错误。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlCopy code</span><br><span class=\"line\">git commit -m &quot;fix: 修复登录页面的验证问题&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>文档（docs）：</strong> 用于更新文档，通常是README或注释的更改。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlCopy code</span><br><span class=\"line\">git commit -m &quot;docs: 更新安装说明&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>样式（style）：</strong> 用于样式相关的更改，如格式化代码、调整缩进等。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;style: 格式化代码文件&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>杂务（chore）：</strong> 用于杂项任务，不涉及功能或修复。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;chore: 更新依赖项&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>测试（test）：</strong> 用于添加或修改测试相关的代码。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;test: 添加用户注册页面的单元测试&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>重构（refactor）：</strong> 用于重构代码，改进性能或可维护性。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;refactor: 重构用户管理模块&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>性能（perf）：</strong> 用于性能优化相关的更改。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;perf: 优化数据加载速度&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>回滚（revert）：</strong> 用于撤销之前的提交。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;revert: 撤销前一次提交&quot;</span><br></pre></td></tr></table></figure>\n\n<p>扩大node内存</p>\n<p>mac</p>\n<p>export NODE_OPTIONS=–max_old_space_size=8096</p>\n<p>win<br>set NODE_OPTIONS=–max_old_space_size=8096</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h5 id=\"1、问题描述\"><a href=\"#1、问题描述\" class=\"headerlink\" title=\"1、问题描述\"></a>1、问题描述</h5><p>在变换表格时，重回电力，进行二次渲染，图表不生效，没有渲染出来。报错如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/2979317/1699943077166-206f3d2d-be48-4d95-8a73-5eaa4d3e8ae9.png\" alt=\"img\"></p>\n<h5 id=\"2、解决办法\"><a href=\"#2、解决办法\" class=\"headerlink\" title=\"2、解决办法\"></a>2、解决办法</h5><p>获取dom元素移除这个标识，使得每次渲染时会重新渲染。.removeAttribute(‘<em>echarts_instance</em>‘) </p>\n<p>,document.getElementById(‘map’).removeAttribute(‘<em>echarts_instance</em>‘)</p>\n<p>但是有些表格不移除实例也没问题</p>\n<h4 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h4><p>echart渲染时，div容易会生成一个_echarts_instance_的属性，该属性就是当前echart的标识。<br>echart找到该该标识后，根据你设置的各种属性进行渲染操作。<br>当我们刷新已经实例化的echart图标时，echart会先匹配该_echarts_instance_属性的值是否和实例对象的一样，如果一样会在原生的结构上进行渲染。</p>\n<h3 id=\"11-15\"><a href=\"#11-15\" class=\"headerlink\" title=\"11.15\"></a>11.15</h3><p>强缓存和协商缓存</p>\n<h3 id=\"–legacy-peer-deps\"><a href=\"#–legacy-peer-deps\" class=\"headerlink\" title=\"–legacy-peer-deps\"></a>–legacy-peer-deps</h3><p>content-type:</p>\n<ul>\n<li>文本：text/plain、text/html、text/css、text/javascript、text/xml</li>\n<li>图片：image/gif、image/png、image/jpeg</li>\n<li>视频：video/webm、video/ogg</li>\n<li>音频：audio/midi、audio/mpeg、audio/webm、audio/ogg、audio/wav</li>\n<li>二进制：application/octet-stream、application/pdf、application/json</li>\n</ul>\n<p>MINE类型</p>\n<p>vm 继承窗口</p>\n<ol>\n<li><strong>yarn run dev –host 0.0.0.0(不需要修改配置文件)</strong></li>\n<li><strong>npm run dev –host (需要修改config/index.js，把host: ‘localhost’, 改为 host: ‘0.0.0.0’)</strong></li>\n<li><strong>电脑的IP</strong>+<strong>本地项目的端口号</strong>别人打开这个就可以访问本地项目了（类似于：192.168.100.100:8089 ）</li>\n</ol>\n<p>host设置</p>\n<p>sudo vi /etc/hosts</p>\n<p>sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache</p>\n<p>viteconfig </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> react <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vitejs/plugin-react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> viteEslint <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite-plugin-eslint&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">react</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">viteEslint</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">failOnError</span>: <span class=\"literal\">false</span> <span class=\"comment\">//开发阶段不因为 ESLint 的错误打断开发</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;@&#x27;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>tsconfig.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;baseUrl&quot;: &quot;./&quot;,</span><br><span class=\"line\">    &quot;paths&quot;: &#123;</span><br><span class=\"line\">      &quot;@/*&quot;: [</span><br><span class=\"line\">        &quot;src/*&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"await做了什么\"><a href=\"#await做了什么\" class=\"headerlink\" title=\"await做了什么\"></a>await做了什么</h2><p>从字面意思上看await就是等待，await 等待的是一个表达式，这个表达式的返回值可以是一个promise对象也可以是其他值。</p>\n<p>很多人以为await会一直等待之后的表达式执行完之后才会继续执行后面的代码，<strong>实际上await是一个让出线程的标志。await后面的表达式会先执行一遍，将await后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码。</strong></p>\n<p>在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：</p>\n<ul>\n<li>第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）</li>\n<li>第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。</li>\n</ul>\n<p>HTTP/2的多路复用就是为了解决上述的两个性能问题。<br>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。<br>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p>\n<p>**<br>**<strong>ChatGPT</strong></p>\n<p>在 JavaScript 中，数组方法可分为修改原始数组的方法和不修改原始数组的方法。下面是一些常见的数组方法，按照它们是否改变原始数组进行分类：</p>\n<h3 id=\"会改变原数组的方法（原地修改数组）：\"><a href=\"#会改变原数组的方法（原地修改数组）：\" class=\"headerlink\" title=\"会改变原数组的方法（原地修改数组）：\"></a>会改变原数组的方法（原地修改数组）：</h3><ol>\n<li><strong>push() 和 pop()</strong> - 分别用于在数组末尾添加元素和移除数组末尾的元素。</li>\n<li><strong>unshift() 和 shift()</strong> - 分别用于在数组开头添加元素和移除数组开头的元素。</li>\n<li><strong>splice()</strong> - 用于在指定位置修改数组，可以删除、替换或者插入元素。</li>\n<li><strong>reverse()</strong> - 反转数组中元素的顺序。</li>\n<li><strong>sort()</strong> - 对数组进行排序。</li>\n<li><strong>fill()</strong> - 用指定的静态值填充数组中的元素。</li>\n<li><strong>copyWithin()</strong> - 从数组内部复制元素到指定的起始索引位置。</li>\n</ol>\n<h3 id=\"不会改变原数组的方法（返回新数组）：\"><a href=\"#不会改变原数组的方法（返回新数组）：\" class=\"headerlink\" title=\"不会改变原数组的方法（返回新数组）：\"></a>不会改变原数组的方法（返回新数组）：</h3><ol>\n<li><strong>concat()</strong> - 用于连接两个或多个数组，返回一个新数组。</li>\n<li><strong>slice()</strong> - 用于提取数组的一部分，返回一个新数组。</li>\n<li><strong>map()</strong> - 创建一个新数组，其结果是原始数组中每个元素调用函数后的返回值。</li>\n<li><strong>filter()</strong> - 创建一个新数组，包含通过函数检查的原始数组的元素。</li>\n<li><strong>reduce() 和 reduceRight()</strong> - 对数组中的所有元素执行一个函数，并将结果累积为单个值。</li>\n<li><strong>join()</strong> - 将数组中所有元素连接成一个字符串。</li>\n<li><strong>every()</strong> 和 <strong>some()</strong> - 分别用于检查数组中所有元素是否满足条件或是否至少有一个元素满足条件。</li>\n<li><strong>indexOf() 和 lastIndexOf()</strong> - 分别返回指定元素在数组中第一次出现的位置和最后一次出现的位置。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const formatEndDate = (date: Date): void =&gt; &#123;</span><br><span class=\"line\">  if (date) &#123;</span><br><span class=\"line\">    const month = date.getMonth() + 1;</span><br><span class=\"line\">    const formattedMonth = month &lt; 10 ?</span><br><span class=\"line\">      `0$&#123;month&#125;` :</span><br><span class=\"line\">      month;</span><br><span class=\"line\"></span><br><span class=\"line\">    endDate.value = `$&#123;date.getFullYear()&#125;-$&#123;formattedMonth&#125;`;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    title: &#x27;序号&#x27;,</span><br><span class=\"line\">    key: &#x27;no&#x27;,</span><br><span class=\"line\">    render(row, index) &#123;</span><br><span class=\"line\">      return h(&#x27;span&#x27;, index + 1 + (pagination.page - 1) * pagination.pageSize)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    width: 60</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">const translatedZzMap4 = Object.keys(zzMap4).reduce((acc, key: string) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      const translatedKey = pCNameMap[key] || key;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &#123; ...acc, [translatedKey]: zzMap4[key], &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, &#123;&#125; as Record&lt;string, any&gt;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>git init</p>\n<p>git commit -m “first commit”</p>\n<p>git branch -M main</p>\n<p>git remote add origin <a href=\"mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>:mingjourney/Three.js-.git</p>\n<p>git push -u origin main</p>\n"},{"title":"海康前端实习一面","date":"2024-01-15T15:31:00.000Z","_content":"\n过了\n\n<!-- more -->\n\n### 面试题目\n\n1. 自我介绍\n2. js一个很长数组的给你遍历它 用啥 为啥\n3. 那么接上面的问题如果，后端给你这个数组，你写完代码发现页面上没有 咋办 \n4. vue组件通信 有哪些方式\n5. vue生命周期\n6. 那你说到eventbus啥时候用它，有啥缺点\n7. 说说es6新特性\n8. 箭头函数说说对他的理解\n9. 我看你经常用ts,你觉得ts有啥优点\n10. const let var区别\n11. 谈谈对promise的理解\n12. 如果promise 置 reject 想要继续发请求 怎么做\n13. 说说react SPA的原理\n14. React Router 说说他的优点 缺点我忘记有没有问了\n\n基本都会\n","source":"_posts/海康前端实习一面.md","raw":"---\ntitle: 海康前端实习一面\ndate: 2024-1-15 23:31:00\ntags:\n- 前端\n- Vue\n- 面经\ncategories: \n- 笔记\n---\n\n过了\n\n<!-- more -->\n\n### 面试题目\n\n1. 自我介绍\n2. js一个很长数组的给你遍历它 用啥 为啥\n3. 那么接上面的问题如果，后端给你这个数组，你写完代码发现页面上没有 咋办 \n4. vue组件通信 有哪些方式\n5. vue生命周期\n6. 那你说到eventbus啥时候用它，有啥缺点\n7. 说说es6新特性\n8. 箭头函数说说对他的理解\n9. 我看你经常用ts,你觉得ts有啥优点\n10. const let var区别\n11. 谈谈对promise的理解\n12. 如果promise 置 reject 想要继续发请求 怎么做\n13. 说说react SPA的原理\n14. React Router 说说他的优点 缺点我忘记有没有问了\n\n基本都会\n","slug":"海康前端实习一面","published":1,"updated":"2024-01-15T15:34:50.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x4b001rq05z7lr5h61k","content":"<p>过了</p>\n<span id=\"more\"></span>\n\n<h3 id=\"面试题目\"><a href=\"#面试题目\" class=\"headerlink\" title=\"面试题目\"></a>面试题目</h3><ol>\n<li>自我介绍</li>\n<li>js一个很长数组的给你遍历它 用啥 为啥</li>\n<li>那么接上面的问题如果，后端给你这个数组，你写完代码发现页面上没有 咋办 </li>\n<li>vue组件通信 有哪些方式</li>\n<li>vue生命周期</li>\n<li>那你说到eventbus啥时候用它，有啥缺点</li>\n<li>说说es6新特性</li>\n<li>箭头函数说说对他的理解</li>\n<li>我看你经常用ts,你觉得ts有啥优点</li>\n<li>const let var区别</li>\n<li>谈谈对promise的理解</li>\n<li>如果promise 置 reject 想要继续发请求 怎么做</li>\n<li>说说react SPA的原理</li>\n<li>React Router 说说他的优点 缺点我忘记有没有问了</li>\n</ol>\n<p>基本都会</p>\n","site":{"data":{}},"excerpt":"<p>过了</p>","more":"<h3 id=\"面试题目\"><a href=\"#面试题目\" class=\"headerlink\" title=\"面试题目\"></a>面试题目</h3><ol>\n<li>自我介绍</li>\n<li>js一个很长数组的给你遍历它 用啥 为啥</li>\n<li>那么接上面的问题如果，后端给你这个数组，你写完代码发现页面上没有 咋办 </li>\n<li>vue组件通信 有哪些方式</li>\n<li>vue生命周期</li>\n<li>那你说到eventbus啥时候用它，有啥缺点</li>\n<li>说说es6新特性</li>\n<li>箭头函数说说对他的理解</li>\n<li>我看你经常用ts,你觉得ts有啥优点</li>\n<li>const let var区别</li>\n<li>谈谈对promise的理解</li>\n<li>如果promise 置 reject 想要继续发请求 怎么做</li>\n<li>说说react SPA的原理</li>\n<li>React Router 说说他的优点 缺点我忘记有没有问了</li>\n</ol>\n<p>基本都会</p>"},{"title":"轨道客流代码真的裂开恶心","date":"2021-07-21T15:10:03.000Z","_content":"\n### “传参爆炸”\n\n记录一次写代**犯罪**记录，类型全any，参数杨辉三角式传递，做到最后真的裂开，运行起来的时候还是开心的，，\n\n<!-- more -->\n\n``` typescript\nimport RealTimeLayout from \"../RealTimeLayout\";\nimport HistoryLayout from \"../HistoryLayout\";\nimport \"./index.css\";\nimport useWindowSize from \"../../useWindowSize\";\nexport default function MainDataArea({\n  selectDay,\n  selectedStation,\n  flowCategory,\n  timeCategory,\n  mapType,\n  changeSelectStation,\n  selectFlowRange,\n  changeSelectFlowRange,\n  switchMapType,\n  createImg,\n  itemTitleSize,\n}: {\n  selectDay: any;\n  selectedStation: any;\n  flowCategory: any;\n  timeCategory: any;\n  mapType: any;\n  changeSelectStation: any;\n  selectFlowRange: any;\n  changeSelectFlowRange: any;\n  switchMapType: any;\n  createImg: any;\n  itemTitleSize: any;\n}) {\n  // const dateStr = selectDay[0] + '-' + selectDay[1]\n  const windowSize = useWindowSize();\n  let mainDataHeiget = windowSize.height * 0.42;\n  return (\n    <div className=\"mainData\" style={{ height: mainDataHeiget }}>\n      {timeCategory === \"realTime\" ? (\n        <RealTimeLayout\n          selectDay={selectDay}\n          selectedStation={selectedStation}\n          flowCategory={flowCategory}\n          timeCategory={timeCategory}\n          mapType={mapType}\n          changeSelectStation={changeSelectStation}\n          selectFlowRange={selectFlowRange}\n          changeSelectFlowRange={changeSelectFlowRange}\n          createImg={createImg}\n          itemTitleSize={itemTitleSize}\n        />\n      ) : (\n        <HistoryLayout\n          selectDay={selectDay}\n          selectedStation={selectedStation}\n          flowCategory={flowCategory}\n          timeCategory={timeCategory}\n          mapType={mapType}\n          changeSelectStation={changeSelectStation}\n          selectFlowRange={selectFlowRange}\n          changeSelectFlowRange={changeSelectFlowRange}\n          switchMapType={switchMapType}\n          createImg={createImg}\n          itemTitleSize={itemTitleSize}\n        />\n      )}\n    </div>\n  );\n}\n\n\n```\n\n### 解决**：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\n\n这样可以使每个组件的代码更清晰，易于维护和扩展。同时，可以将每个组件的props定义为一个单独的接口，而不是将所有属性都放在一个大的对象中，这样可以更好地指定每个属性的类型和含义，提高代码的可读性和可维护性。\n\n### 这样重构代码：\n\n```\ntypescriptCopy code\nimport { Fragment } from \"react\";\nimport StationFlow from \"../FlowRouter\";\nimport MapFlowHistory from \"../MapFlowHistory\";\n\ninterface StationFlowProps {\n  selectDay: any;\n  selectedStation: any;\n  flowCategory: any;\n  timeCategory: any;\n  selectFlowRange: any;\n  mapType: any;\n  createImg: any;\n  itemTitleSize: any;\n}\n\ninterface MapFlowHistoryProps {\n  selectDay: any;\n  selectedStation: any;\n  flowCategory: any;\n  timeCategory: any;\n  mapType: any;\n  changeSelectStation: any;\n  changeSelectFlowRange: any;\n  switchMapType: any;\n  createImg: any;\n  itemTitleSize: any;\n}\n\nexport default function HistoryLayout({\n  selectDay,\n  selectedStation,\n  flowCategory,\n  timeCategory,\n  mapType,\n  changeSelectStation,\n  selectFlowRange,\n  changeSelectFlowRange,\n  switchMapType,\n  createImg,\n  itemTitleSize,\n}: StationFlowProps & MapFlowHistoryProps) {\n  return (\n    <Fragment>\n      <StationFlow\n        selectDay={selectDay}\n        selectedStation={selectedStation}\n        flowCategory={flowCategory}\n        timeCategory={timeCategory}\n        selectFlowRange={selectFlowRange}\n        mapType={mapType}\n        createImg={createImg}\n        itemTitleSize={itemTitleSize}\n      />\n      <MapFlowHistory\n        selectDay={selectDay}\n        selectedStation={selectedStation}\n        flowCategory={flowCategory}\n        timeCategory={timeCategory}\n        mapType={mapType}\n        changeSelectStation={changeSelectStation}\n        changeSelectFlowRange={changeSelectFlowRange}\n        switchMapType={switchMapType}\n        createImg={createImg}\n        itemTitleSize={itemTitleSize}\n      />\n    </Fragment>\n  );\n}\n```\n\n还有\n```typescript\nimport { standardTime } from \"../../Utils/standardTime\";\n\nconst eitherInOutMap: any = { inflow: 0, outflow: 1 };\n\nexport async function totalFlowProvider(\n  state: any,\n  selectedLine: string,\n  eitherInOut: string\n): Promise<any> {\n  const stationsAllTime =\n    eitherInOut === \"inflow\" ? state.station_flow_in : state.station_flow_out;\n  const predictFlowList = state.total_flow_predict;\n  const selectedIndex = eitherInOutMap[eitherInOut];\n  const predictTotalFlowList = predictFlowList.map(\n    (item: any) => item[selectedIndex]\n  );\n  const sum = (arr: Array<any>) =>\n    arr.reduce((prev, curr) => Number(prev) + Number(curr)); // sum自己处理好\n  const lineFlowList = Object.entries(stationsAllTime)\n    .sort(([LTime], [NTime]) => (LTime > NTime ? 1 : -1))\n    .map(([time, v]) => {\n      const sumList = sum(Object.values(v as any));\n      return {\n        time,\n        flow: sumList,\n      };\n    })\n    .slice(-6);\n\n  const lineFlowAddList = lineFlowList.map((item, index) => ({\n    time: standardTime(\n      new Date(new Date(item.time).getTime() + 1000 * 60 * 6)\n    ),\n    flow: predictTotalFlowList[index],\n  }));\n  const stationFlowListAll = lineFlowList.concat(lineFlowAddList);\n  const result = {\n    [eitherInOut === \"inflow\" ? \"flowIn\" : \"flowOut\"]: stationFlowListAll,\n  };\n  return result;\n}\n\n```\n\n### 明显缺点\n\n1. 显式指定参数和返回值的类型：在函数参数和返回值的类型上进行显式的类型指定可以提高代码的可读性和可维护性。\n2. 使用具体的类型替代 `any` 类型：在 TypeScript 中尽量避免使用 `any` 类型，因为它会丧失类型检查的优势。尽量使用具体的类型来代替 `any`，这样可以在编译时捕获潜在的类型错误。\n3. 避免在函数中直接访问全局变量：直接访问了全局变量`eitherInOutMap`和`standardTime`，这样会使函数的可重用性和可测试性下降。建议将这些全局变量作为参数传递给函数，或者将它们封装到函数内部，以减少对全局状态的依赖。\n4. 尽量使用箭头函数和 const/let 替代 function 和 var：使用 ES6 中的箭头函数和 const/let 关键字可以提高代码的可读性和可维护性，并且避免了 var 带来的变量提升和作用域问题\n\n### 改进\n\n``` typescript\nimport { standardTime } from \"../../Utils/standardTime\";\n\nconst eitherInOutMap: Record<string, number> = { inflow: 0, outflow: 1 };\n\ninterface LineFlowItem {\n  time: string;\n  flow: number;\n}\n\nexport async function totalFlowProvider(\n  state: {\n    station_flow_in: Record<string, number[]>;\n    station_flow_out: Record<string, number[]>;\n    total_flow_predict: number[][];\n  },\n  selectedLine: string,\n  eitherInOut: string\n): Promise<{ flowIn: LineFlowItem[]; flowOut: LineFlowItem[] }> {\n  const stationsAllTime =\n    eitherInOut === \"inflow\" ? state.station_flow_in : state.station_flow_out;\n  const predictFlowList = state.total_flow_predict;\n  const selectedIndex = eitherInOutMap[eitherInOut];\n  const predictTotalFlowList = predictFlowList.map(\n    (item: number[]) => item[selectedIndex]\n  );\n  const sum = (arr: number[]) => arr.reduce((prev, curr) => prev + curr); // sum自己处理好\n  const lineFlowList = Object.entries(stationsAllTime)\n    .sort(([LTime], [NTime]) => (LTime > NTime ? 1 : -1))\n    .map(([time, v]) => {\n      const sumList = sum(Object.values(v));\n      return {\n        time,\n        flow: sumList,\n      };\n    })\n    .slice(-6);\n\n  const lineFlowAddList = lineFlowList.map((item, index) => ({\n    time: standardTime(\n      new Date(new Date(item.time).getTime() + 1000 * 60 * 6)\n    ),\n    flow: predictTotalFlowList\n\n```\n\n","source":"_posts/轨道代码分析.md","raw":"---\ntitle: 轨道客流代码真的裂开恶心\ndate: 2021-07-21 23:10:03\ntags:\n  - TypeScript\n  - 前端开发\n  - 轨道客流\n  - 异步编程\n  - Promise\n  - Object.entries()\n  - Array.sort()\n  - Array.map()\n  - Array.reduce()\n  - Number()\n  - Date()\n  - getTime()\n  - Object.values()\n  - Array.concat()\n  - 标准时间\n  - 类型推断\n  - 类型注释\n  - JavaScript\n  - 代码优化\n  - 代码可读性\ncategories:\n  - 笔记\n---\n\n### “传参爆炸”\n\n记录一次写代**犯罪**记录，类型全any，参数杨辉三角式传递，做到最后真的裂开，运行起来的时候还是开心的，，\n\n<!-- more -->\n\n``` typescript\nimport RealTimeLayout from \"../RealTimeLayout\";\nimport HistoryLayout from \"../HistoryLayout\";\nimport \"./index.css\";\nimport useWindowSize from \"../../useWindowSize\";\nexport default function MainDataArea({\n  selectDay,\n  selectedStation,\n  flowCategory,\n  timeCategory,\n  mapType,\n  changeSelectStation,\n  selectFlowRange,\n  changeSelectFlowRange,\n  switchMapType,\n  createImg,\n  itemTitleSize,\n}: {\n  selectDay: any;\n  selectedStation: any;\n  flowCategory: any;\n  timeCategory: any;\n  mapType: any;\n  changeSelectStation: any;\n  selectFlowRange: any;\n  changeSelectFlowRange: any;\n  switchMapType: any;\n  createImg: any;\n  itemTitleSize: any;\n}) {\n  // const dateStr = selectDay[0] + '-' + selectDay[1]\n  const windowSize = useWindowSize();\n  let mainDataHeiget = windowSize.height * 0.42;\n  return (\n    <div className=\"mainData\" style={{ height: mainDataHeiget }}>\n      {timeCategory === \"realTime\" ? (\n        <RealTimeLayout\n          selectDay={selectDay}\n          selectedStation={selectedStation}\n          flowCategory={flowCategory}\n          timeCategory={timeCategory}\n          mapType={mapType}\n          changeSelectStation={changeSelectStation}\n          selectFlowRange={selectFlowRange}\n          changeSelectFlowRange={changeSelectFlowRange}\n          createImg={createImg}\n          itemTitleSize={itemTitleSize}\n        />\n      ) : (\n        <HistoryLayout\n          selectDay={selectDay}\n          selectedStation={selectedStation}\n          flowCategory={flowCategory}\n          timeCategory={timeCategory}\n          mapType={mapType}\n          changeSelectStation={changeSelectStation}\n          selectFlowRange={selectFlowRange}\n          changeSelectFlowRange={changeSelectFlowRange}\n          switchMapType={switchMapType}\n          createImg={createImg}\n          itemTitleSize={itemTitleSize}\n        />\n      )}\n    </div>\n  );\n}\n\n\n```\n\n### 解决**：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\n\n这样可以使每个组件的代码更清晰，易于维护和扩展。同时，可以将每个组件的props定义为一个单独的接口，而不是将所有属性都放在一个大的对象中，这样可以更好地指定每个属性的类型和含义，提高代码的可读性和可维护性。\n\n### 这样重构代码：\n\n```\ntypescriptCopy code\nimport { Fragment } from \"react\";\nimport StationFlow from \"../FlowRouter\";\nimport MapFlowHistory from \"../MapFlowHistory\";\n\ninterface StationFlowProps {\n  selectDay: any;\n  selectedStation: any;\n  flowCategory: any;\n  timeCategory: any;\n  selectFlowRange: any;\n  mapType: any;\n  createImg: any;\n  itemTitleSize: any;\n}\n\ninterface MapFlowHistoryProps {\n  selectDay: any;\n  selectedStation: any;\n  flowCategory: any;\n  timeCategory: any;\n  mapType: any;\n  changeSelectStation: any;\n  changeSelectFlowRange: any;\n  switchMapType: any;\n  createImg: any;\n  itemTitleSize: any;\n}\n\nexport default function HistoryLayout({\n  selectDay,\n  selectedStation,\n  flowCategory,\n  timeCategory,\n  mapType,\n  changeSelectStation,\n  selectFlowRange,\n  changeSelectFlowRange,\n  switchMapType,\n  createImg,\n  itemTitleSize,\n}: StationFlowProps & MapFlowHistoryProps) {\n  return (\n    <Fragment>\n      <StationFlow\n        selectDay={selectDay}\n        selectedStation={selectedStation}\n        flowCategory={flowCategory}\n        timeCategory={timeCategory}\n        selectFlowRange={selectFlowRange}\n        mapType={mapType}\n        createImg={createImg}\n        itemTitleSize={itemTitleSize}\n      />\n      <MapFlowHistory\n        selectDay={selectDay}\n        selectedStation={selectedStation}\n        flowCategory={flowCategory}\n        timeCategory={timeCategory}\n        mapType={mapType}\n        changeSelectStation={changeSelectStation}\n        changeSelectFlowRange={changeSelectFlowRange}\n        switchMapType={switchMapType}\n        createImg={createImg}\n        itemTitleSize={itemTitleSize}\n      />\n    </Fragment>\n  );\n}\n```\n\n还有\n```typescript\nimport { standardTime } from \"../../Utils/standardTime\";\n\nconst eitherInOutMap: any = { inflow: 0, outflow: 1 };\n\nexport async function totalFlowProvider(\n  state: any,\n  selectedLine: string,\n  eitherInOut: string\n): Promise<any> {\n  const stationsAllTime =\n    eitherInOut === \"inflow\" ? state.station_flow_in : state.station_flow_out;\n  const predictFlowList = state.total_flow_predict;\n  const selectedIndex = eitherInOutMap[eitherInOut];\n  const predictTotalFlowList = predictFlowList.map(\n    (item: any) => item[selectedIndex]\n  );\n  const sum = (arr: Array<any>) =>\n    arr.reduce((prev, curr) => Number(prev) + Number(curr)); // sum自己处理好\n  const lineFlowList = Object.entries(stationsAllTime)\n    .sort(([LTime], [NTime]) => (LTime > NTime ? 1 : -1))\n    .map(([time, v]) => {\n      const sumList = sum(Object.values(v as any));\n      return {\n        time,\n        flow: sumList,\n      };\n    })\n    .slice(-6);\n\n  const lineFlowAddList = lineFlowList.map((item, index) => ({\n    time: standardTime(\n      new Date(new Date(item.time).getTime() + 1000 * 60 * 6)\n    ),\n    flow: predictTotalFlowList[index],\n  }));\n  const stationFlowListAll = lineFlowList.concat(lineFlowAddList);\n  const result = {\n    [eitherInOut === \"inflow\" ? \"flowIn\" : \"flowOut\"]: stationFlowListAll,\n  };\n  return result;\n}\n\n```\n\n### 明显缺点\n\n1. 显式指定参数和返回值的类型：在函数参数和返回值的类型上进行显式的类型指定可以提高代码的可读性和可维护性。\n2. 使用具体的类型替代 `any` 类型：在 TypeScript 中尽量避免使用 `any` 类型，因为它会丧失类型检查的优势。尽量使用具体的类型来代替 `any`，这样可以在编译时捕获潜在的类型错误。\n3. 避免在函数中直接访问全局变量：直接访问了全局变量`eitherInOutMap`和`standardTime`，这样会使函数的可重用性和可测试性下降。建议将这些全局变量作为参数传递给函数，或者将它们封装到函数内部，以减少对全局状态的依赖。\n4. 尽量使用箭头函数和 const/let 替代 function 和 var：使用 ES6 中的箭头函数和 const/let 关键字可以提高代码的可读性和可维护性，并且避免了 var 带来的变量提升和作用域问题\n\n### 改进\n\n``` typescript\nimport { standardTime } from \"../../Utils/standardTime\";\n\nconst eitherInOutMap: Record<string, number> = { inflow: 0, outflow: 1 };\n\ninterface LineFlowItem {\n  time: string;\n  flow: number;\n}\n\nexport async function totalFlowProvider(\n  state: {\n    station_flow_in: Record<string, number[]>;\n    station_flow_out: Record<string, number[]>;\n    total_flow_predict: number[][];\n  },\n  selectedLine: string,\n  eitherInOut: string\n): Promise<{ flowIn: LineFlowItem[]; flowOut: LineFlowItem[] }> {\n  const stationsAllTime =\n    eitherInOut === \"inflow\" ? state.station_flow_in : state.station_flow_out;\n  const predictFlowList = state.total_flow_predict;\n  const selectedIndex = eitherInOutMap[eitherInOut];\n  const predictTotalFlowList = predictFlowList.map(\n    (item: number[]) => item[selectedIndex]\n  );\n  const sum = (arr: number[]) => arr.reduce((prev, curr) => prev + curr); // sum自己处理好\n  const lineFlowList = Object.entries(stationsAllTime)\n    .sort(([LTime], [NTime]) => (LTime > NTime ? 1 : -1))\n    .map(([time, v]) => {\n      const sumList = sum(Object.values(v));\n      return {\n        time,\n        flow: sumList,\n      };\n    })\n    .slice(-6);\n\n  const lineFlowAddList = lineFlowList.map((item, index) => ({\n    time: standardTime(\n      new Date(new Date(item.time).getTime() + 1000 * 60 * 6)\n    ),\n    flow: predictTotalFlowList\n\n```\n\n","slug":"轨道代码分析","published":1,"updated":"2024-01-06T04:54:15.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrf36x4c001uq05z5c6z4jg1","content":"<h3 id=\"“传参爆炸”\"><a href=\"#“传参爆炸”\" class=\"headerlink\" title=\"“传参爆炸”\"></a>“传参爆炸”</h3><p>记录一次写代<strong>犯罪</strong>记录，类型全any，参数杨辉三角式传递，做到最后真的裂开，运行起来的时候还是开心的，，</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">RealTimeLayout</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../RealTimeLayout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HistoryLayout</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../HistoryLayout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> useWindowSize <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../useWindowSize&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MainDataArea</span>(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\">  selectDay,</span></span><br><span class=\"line\"><span class=\"params\">  selectedStation,</span></span><br><span class=\"line\"><span class=\"params\">  flowCategory,</span></span><br><span class=\"line\"><span class=\"params\">  timeCategory,</span></span><br><span class=\"line\"><span class=\"params\">  mapType,</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectStation,</span></span><br><span class=\"line\"><span class=\"params\">  selectFlowRange,</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectFlowRange,</span></span><br><span class=\"line\"><span class=\"params\">  switchMapType,</span></span><br><span class=\"line\"><span class=\"params\">  createImg,</span></span><br><span class=\"line\"><span class=\"params\">  itemTitleSize,</span></span><br><span class=\"line\"><span class=\"params\">&#125;: &#123;</span></span><br><span class=\"line\"><span class=\"params\">  selectDay: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  selectedStation: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  flowCategory: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  timeCategory: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  mapType: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectStation: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  selectFlowRange: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectFlowRange: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  switchMapType: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  createImg: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  itemTitleSize: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// const dateStr = selectDay[0] + &#x27;-&#x27; + selectDay[1]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> windowSize = <span class=\"title function_\">useWindowSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> mainDataHeiget = windowSize.<span class=\"property\">height</span> * <span class=\"number\">0.42</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;mainData&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">height:</span> <span class=\"attr\">mainDataHeiget</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;timeCategory === &quot;realTime&quot; ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">RealTimeLayout</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectDay</span>=<span class=\"string\">&#123;selectDay&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectedStation</span>=<span class=\"string\">&#123;selectedStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">flowCategory</span>=<span class=\"string\">&#123;flowCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">timeCategory</span>=<span class=\"string\">&#123;timeCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">mapType</span>=<span class=\"string\">&#123;mapType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectStation</span>=<span class=\"string\">&#123;changeSelectStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectFlowRange</span>=<span class=\"string\">&#123;selectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectFlowRange</span>=<span class=\"string\">&#123;changeSelectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">createImg</span>=<span class=\"string\">&#123;createImg&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">itemTitleSize</span>=<span class=\"string\">&#123;itemTitleSize&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ) : (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">HistoryLayout</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectDay</span>=<span class=\"string\">&#123;selectDay&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectedStation</span>=<span class=\"string\">&#123;selectedStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">flowCategory</span>=<span class=\"string\">&#123;flowCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">timeCategory</span>=<span class=\"string\">&#123;timeCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">mapType</span>=<span class=\"string\">&#123;mapType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectStation</span>=<span class=\"string\">&#123;changeSelectStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectFlowRange</span>=<span class=\"string\">&#123;selectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectFlowRange</span>=<span class=\"string\">&#123;changeSelectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">switchMapType</span>=<span class=\"string\">&#123;switchMapType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">createImg</span>=<span class=\"string\">&#123;createImg&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">itemTitleSize</span>=<span class=\"string\">&#123;itemTitleSize&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决-：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\"><a href=\"#解决-：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\" class=\"headerlink\" title=\"解决**：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\"></a>解决**：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。</h3><p>这样可以使每个组件的代码更清晰，易于维护和扩展。同时，可以将每个组件的props定义为一个单独的接口，而不是将所有属性都放在一个大的对象中，这样可以更好地指定每个属性的类型和含义，提高代码的可读性和可维护性。</p>\n<h3 id=\"这样重构代码：\"><a href=\"#这样重构代码：\" class=\"headerlink\" title=\"这样重构代码：\"></a>这样重构代码：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typescriptCopy code</span><br><span class=\"line\">import &#123; Fragment &#125; from &quot;react&quot;;</span><br><span class=\"line\">import StationFlow from &quot;../FlowRouter&quot;;</span><br><span class=\"line\">import MapFlowHistory from &quot;../MapFlowHistory&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">interface StationFlowProps &#123;</span><br><span class=\"line\">  selectDay: any;</span><br><span class=\"line\">  selectedStation: any;</span><br><span class=\"line\">  flowCategory: any;</span><br><span class=\"line\">  timeCategory: any;</span><br><span class=\"line\">  selectFlowRange: any;</span><br><span class=\"line\">  mapType: any;</span><br><span class=\"line\">  createImg: any;</span><br><span class=\"line\">  itemTitleSize: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface MapFlowHistoryProps &#123;</span><br><span class=\"line\">  selectDay: any;</span><br><span class=\"line\">  selectedStation: any;</span><br><span class=\"line\">  flowCategory: any;</span><br><span class=\"line\">  timeCategory: any;</span><br><span class=\"line\">  mapType: any;</span><br><span class=\"line\">  changeSelectStation: any;</span><br><span class=\"line\">  changeSelectFlowRange: any;</span><br><span class=\"line\">  switchMapType: any;</span><br><span class=\"line\">  createImg: any;</span><br><span class=\"line\">  itemTitleSize: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function HistoryLayout(&#123;</span><br><span class=\"line\">  selectDay,</span><br><span class=\"line\">  selectedStation,</span><br><span class=\"line\">  flowCategory,</span><br><span class=\"line\">  timeCategory,</span><br><span class=\"line\">  mapType,</span><br><span class=\"line\">  changeSelectStation,</span><br><span class=\"line\">  selectFlowRange,</span><br><span class=\"line\">  changeSelectFlowRange,</span><br><span class=\"line\">  switchMapType,</span><br><span class=\"line\">  createImg,</span><br><span class=\"line\">  itemTitleSize,</span><br><span class=\"line\">&#125;: StationFlowProps &amp; MapFlowHistoryProps) &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      &lt;StationFlow</span><br><span class=\"line\">        selectDay=&#123;selectDay&#125;</span><br><span class=\"line\">        selectedStation=&#123;selectedStation&#125;</span><br><span class=\"line\">        flowCategory=&#123;flowCategory&#125;</span><br><span class=\"line\">        timeCategory=&#123;timeCategory&#125;</span><br><span class=\"line\">        selectFlowRange=&#123;selectFlowRange&#125;</span><br><span class=\"line\">        mapType=&#123;mapType&#125;</span><br><span class=\"line\">        createImg=&#123;createImg&#125;</span><br><span class=\"line\">        itemTitleSize=&#123;itemTitleSize&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;MapFlowHistory</span><br><span class=\"line\">        selectDay=&#123;selectDay&#125;</span><br><span class=\"line\">        selectedStation=&#123;selectedStation&#125;</span><br><span class=\"line\">        flowCategory=&#123;flowCategory&#125;</span><br><span class=\"line\">        timeCategory=&#123;timeCategory&#125;</span><br><span class=\"line\">        mapType=&#123;mapType&#125;</span><br><span class=\"line\">        changeSelectStation=&#123;changeSelectStation&#125;</span><br><span class=\"line\">        changeSelectFlowRange=&#123;changeSelectFlowRange&#125;</span><br><span class=\"line\">        switchMapType=&#123;switchMapType&#125;</span><br><span class=\"line\">        createImg=&#123;createImg&#125;</span><br><span class=\"line\">        itemTitleSize=&#123;itemTitleSize&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    &lt;/Fragment&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; standardTime &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../Utils/standardTime&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">eitherInOutMap</span>: <span class=\"built_in\">any</span> = &#123; <span class=\"attr\">inflow</span>: <span class=\"number\">0</span>, <span class=\"attr\">outflow</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">totalFlowProvider</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  state: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">  selectedLine: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">  eitherInOut: <span class=\"built_in\">string</span></span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stationsAllTime =</span><br><span class=\"line\">    eitherInOut === <span class=\"string\">&quot;inflow&quot;</span> ? state.<span class=\"property\">station_flow_in</span> : state.<span class=\"property\">station_flow_out</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictFlowList = state.<span class=\"property\">total_flow_predict</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedIndex = eitherInOutMap[eitherInOut];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictTotalFlowList = predictFlowList.<span class=\"title function_\">map</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">any</span></span>) =&gt;</span> item[selectedIndex]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"params\">arr: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span><br><span class=\"line\">    arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> <span class=\"title class_\">Number</span>(prev) + <span class=\"title class_\">Number</span>(curr)); <span class=\"comment\">// sum自己处理好</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowList = <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(stationsAllTime)</span><br><span class=\"line\">    .<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">[LTime], [NTime]</span>) =&gt;</span> (<span class=\"title class_\">LTime</span> &gt; <span class=\"title class_\">NTime</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">[time, v]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sumList = <span class=\"title function_\">sum</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(v <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        time,</span><br><span class=\"line\">        <span class=\"attr\">flow</span>: sumList,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">slice</span>(-<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowAddList = lineFlowList.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">time</span>: <span class=\"title function_\">standardTime</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(item.<span class=\"property\">time</span>).<span class=\"title function_\">getTime</span>() + <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">6</span>)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"attr\">flow</span>: predictTotalFlowList[index],</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stationFlowListAll = lineFlowList.<span class=\"title function_\">concat</span>(lineFlowAddList);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = &#123;</span><br><span class=\"line\">    [eitherInOut === <span class=\"string\">&quot;inflow&quot;</span> ? <span class=\"string\">&quot;flowIn&quot;</span> : <span class=\"string\">&quot;flowOut&quot;</span>]: stationFlowListAll,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"明显缺点\"><a href=\"#明显缺点\" class=\"headerlink\" title=\"明显缺点\"></a>明显缺点</h3><ol>\n<li>显式指定参数和返回值的类型：在函数参数和返回值的类型上进行显式的类型指定可以提高代码的可读性和可维护性。</li>\n<li>使用具体的类型替代 <code>any</code> 类型：在 TypeScript 中尽量避免使用 <code>any</code> 类型，因为它会丧失类型检查的优势。尽量使用具体的类型来代替 <code>any</code>，这样可以在编译时捕获潜在的类型错误。</li>\n<li>避免在函数中直接访问全局变量：直接访问了全局变量<code>eitherInOutMap</code>和<code>standardTime</code>，这样会使函数的可重用性和可测试性下降。建议将这些全局变量作为参数传递给函数，或者将它们封装到函数内部，以减少对全局状态的依赖。</li>\n<li>尽量使用箭头函数和 const/let 替代 function 和 var：使用 ES6 中的箭头函数和 const/let 关键字可以提高代码的可读性和可维护性，并且避免了 var 带来的变量提升和作用域问题</li>\n</ol>\n<h3 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; standardTime &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../Utils/standardTime&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">eitherInOutMap</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>&gt; = &#123; <span class=\"attr\">inflow</span>: <span class=\"number\">0</span>, <span class=\"attr\">outflow</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LineFlowItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">time</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">flow</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">totalFlowProvider</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  state: &#123;</span></span><br><span class=\"line\"><span class=\"params\">    station_flow_in: Record&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>[]&gt;;</span></span><br><span class=\"line\"><span class=\"params\">    station_flow_out: Record&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>[]&gt;;</span></span><br><span class=\"line\"><span class=\"params\">    total_flow_predict: <span class=\"built_in\">number</span>[][];</span></span><br><span class=\"line\"><span class=\"params\">  &#125;,</span></span><br><span class=\"line\"><span class=\"params\">  selectedLine: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">  eitherInOut: <span class=\"built_in\">string</span></span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Promise</span>&lt;&#123; <span class=\"attr\">flowIn</span>: <span class=\"title class_\">LineFlowItem</span>[]; <span class=\"attr\">flowOut</span>: <span class=\"title class_\">LineFlowItem</span>[] &#125;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stationsAllTime =</span><br><span class=\"line\">    eitherInOut === <span class=\"string\">&quot;inflow&quot;</span> ? state.<span class=\"property\">station_flow_in</span> : state.<span class=\"property\">station_flow_out</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictFlowList = state.<span class=\"property\">total_flow_predict</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedIndex = eitherInOutMap[eitherInOut];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictTotalFlowList = predictFlowList.<span class=\"title function_\">map</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span>[]</span>) =&gt;</span> item[selectedIndex]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"params\">arr: <span class=\"built_in\">number</span>[]</span>) =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr); <span class=\"comment\">// sum自己处理好</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowList = <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(stationsAllTime)</span><br><span class=\"line\">    .<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">[LTime], [NTime]</span>) =&gt;</span> (<span class=\"title class_\">LTime</span> &gt; <span class=\"title class_\">NTime</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">[time, v]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sumList = <span class=\"title function_\">sum</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(v));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        time,</span><br><span class=\"line\">        <span class=\"attr\">flow</span>: sumList,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">slice</span>(-<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowAddList = lineFlowList.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">time</span>: <span class=\"title function_\">standardTime</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(item.<span class=\"property\">time</span>).<span class=\"title function_\">getTime</span>() + <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">6</span>)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"attr\">flow</span>: predictTotalFlowList</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"“传参爆炸”\"><a href=\"#“传参爆炸”\" class=\"headerlink\" title=\"“传参爆炸”\"></a>“传参爆炸”</h3><p>记录一次写代<strong>犯罪</strong>记录，类型全any，参数杨辉三角式传递，做到最后真的裂开，运行起来的时候还是开心的，，</p>","more":"<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">RealTimeLayout</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../RealTimeLayout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HistoryLayout</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../HistoryLayout&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> useWindowSize <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../useWindowSize&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MainDataArea</span>(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\">  selectDay,</span></span><br><span class=\"line\"><span class=\"params\">  selectedStation,</span></span><br><span class=\"line\"><span class=\"params\">  flowCategory,</span></span><br><span class=\"line\"><span class=\"params\">  timeCategory,</span></span><br><span class=\"line\"><span class=\"params\">  mapType,</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectStation,</span></span><br><span class=\"line\"><span class=\"params\">  selectFlowRange,</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectFlowRange,</span></span><br><span class=\"line\"><span class=\"params\">  switchMapType,</span></span><br><span class=\"line\"><span class=\"params\">  createImg,</span></span><br><span class=\"line\"><span class=\"params\">  itemTitleSize,</span></span><br><span class=\"line\"><span class=\"params\">&#125;: &#123;</span></span><br><span class=\"line\"><span class=\"params\">  selectDay: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  selectedStation: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  flowCategory: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  timeCategory: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  mapType: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectStation: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  selectFlowRange: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  changeSelectFlowRange: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  switchMapType: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  createImg: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">  itemTitleSize: <span class=\"built_in\">any</span>;</span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// const dateStr = selectDay[0] + &#x27;-&#x27; + selectDay[1]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> windowSize = <span class=\"title function_\">useWindowSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> mainDataHeiget = windowSize.<span class=\"property\">height</span> * <span class=\"number\">0.42</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;mainData&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">height:</span> <span class=\"attr\">mainDataHeiget</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;timeCategory === &quot;realTime&quot; ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">RealTimeLayout</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectDay</span>=<span class=\"string\">&#123;selectDay&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectedStation</span>=<span class=\"string\">&#123;selectedStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">flowCategory</span>=<span class=\"string\">&#123;flowCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">timeCategory</span>=<span class=\"string\">&#123;timeCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">mapType</span>=<span class=\"string\">&#123;mapType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectStation</span>=<span class=\"string\">&#123;changeSelectStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectFlowRange</span>=<span class=\"string\">&#123;selectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectFlowRange</span>=<span class=\"string\">&#123;changeSelectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">createImg</span>=<span class=\"string\">&#123;createImg&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">itemTitleSize</span>=<span class=\"string\">&#123;itemTitleSize&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ) : (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">HistoryLayout</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectDay</span>=<span class=\"string\">&#123;selectDay&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectedStation</span>=<span class=\"string\">&#123;selectedStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">flowCategory</span>=<span class=\"string\">&#123;flowCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">timeCategory</span>=<span class=\"string\">&#123;timeCategory&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">mapType</span>=<span class=\"string\">&#123;mapType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectStation</span>=<span class=\"string\">&#123;changeSelectStation&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">selectFlowRange</span>=<span class=\"string\">&#123;selectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeSelectFlowRange</span>=<span class=\"string\">&#123;changeSelectFlowRange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">switchMapType</span>=<span class=\"string\">&#123;switchMapType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">createImg</span>=<span class=\"string\">&#123;createImg&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">itemTitleSize</span>=<span class=\"string\">&#123;itemTitleSize&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决-：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\"><a href=\"#解决-：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\" class=\"headerlink\" title=\"解决**：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。\"></a>解决**：将代码分成两个组件，分别处理StationFlow和MapFlowHistory的逻辑。</h3><p>这样可以使每个组件的代码更清晰，易于维护和扩展。同时，可以将每个组件的props定义为一个单独的接口，而不是将所有属性都放在一个大的对象中，这样可以更好地指定每个属性的类型和含义，提高代码的可读性和可维护性。</p>\n<h3 id=\"这样重构代码：\"><a href=\"#这样重构代码：\" class=\"headerlink\" title=\"这样重构代码：\"></a>这样重构代码：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typescriptCopy code</span><br><span class=\"line\">import &#123; Fragment &#125; from &quot;react&quot;;</span><br><span class=\"line\">import StationFlow from &quot;../FlowRouter&quot;;</span><br><span class=\"line\">import MapFlowHistory from &quot;../MapFlowHistory&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">interface StationFlowProps &#123;</span><br><span class=\"line\">  selectDay: any;</span><br><span class=\"line\">  selectedStation: any;</span><br><span class=\"line\">  flowCategory: any;</span><br><span class=\"line\">  timeCategory: any;</span><br><span class=\"line\">  selectFlowRange: any;</span><br><span class=\"line\">  mapType: any;</span><br><span class=\"line\">  createImg: any;</span><br><span class=\"line\">  itemTitleSize: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface MapFlowHistoryProps &#123;</span><br><span class=\"line\">  selectDay: any;</span><br><span class=\"line\">  selectedStation: any;</span><br><span class=\"line\">  flowCategory: any;</span><br><span class=\"line\">  timeCategory: any;</span><br><span class=\"line\">  mapType: any;</span><br><span class=\"line\">  changeSelectStation: any;</span><br><span class=\"line\">  changeSelectFlowRange: any;</span><br><span class=\"line\">  switchMapType: any;</span><br><span class=\"line\">  createImg: any;</span><br><span class=\"line\">  itemTitleSize: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function HistoryLayout(&#123;</span><br><span class=\"line\">  selectDay,</span><br><span class=\"line\">  selectedStation,</span><br><span class=\"line\">  flowCategory,</span><br><span class=\"line\">  timeCategory,</span><br><span class=\"line\">  mapType,</span><br><span class=\"line\">  changeSelectStation,</span><br><span class=\"line\">  selectFlowRange,</span><br><span class=\"line\">  changeSelectFlowRange,</span><br><span class=\"line\">  switchMapType,</span><br><span class=\"line\">  createImg,</span><br><span class=\"line\">  itemTitleSize,</span><br><span class=\"line\">&#125;: StationFlowProps &amp; MapFlowHistoryProps) &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      &lt;StationFlow</span><br><span class=\"line\">        selectDay=&#123;selectDay&#125;</span><br><span class=\"line\">        selectedStation=&#123;selectedStation&#125;</span><br><span class=\"line\">        flowCategory=&#123;flowCategory&#125;</span><br><span class=\"line\">        timeCategory=&#123;timeCategory&#125;</span><br><span class=\"line\">        selectFlowRange=&#123;selectFlowRange&#125;</span><br><span class=\"line\">        mapType=&#123;mapType&#125;</span><br><span class=\"line\">        createImg=&#123;createImg&#125;</span><br><span class=\"line\">        itemTitleSize=&#123;itemTitleSize&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;MapFlowHistory</span><br><span class=\"line\">        selectDay=&#123;selectDay&#125;</span><br><span class=\"line\">        selectedStation=&#123;selectedStation&#125;</span><br><span class=\"line\">        flowCategory=&#123;flowCategory&#125;</span><br><span class=\"line\">        timeCategory=&#123;timeCategory&#125;</span><br><span class=\"line\">        mapType=&#123;mapType&#125;</span><br><span class=\"line\">        changeSelectStation=&#123;changeSelectStation&#125;</span><br><span class=\"line\">        changeSelectFlowRange=&#123;changeSelectFlowRange&#125;</span><br><span class=\"line\">        switchMapType=&#123;switchMapType&#125;</span><br><span class=\"line\">        createImg=&#123;createImg&#125;</span><br><span class=\"line\">        itemTitleSize=&#123;itemTitleSize&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    &lt;/Fragment&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; standardTime &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../Utils/standardTime&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">eitherInOutMap</span>: <span class=\"built_in\">any</span> = &#123; <span class=\"attr\">inflow</span>: <span class=\"number\">0</span>, <span class=\"attr\">outflow</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">totalFlowProvider</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  state: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">  selectedLine: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">  eitherInOut: <span class=\"built_in\">string</span></span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stationsAllTime =</span><br><span class=\"line\">    eitherInOut === <span class=\"string\">&quot;inflow&quot;</span> ? state.<span class=\"property\">station_flow_in</span> : state.<span class=\"property\">station_flow_out</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictFlowList = state.<span class=\"property\">total_flow_predict</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedIndex = eitherInOutMap[eitherInOut];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictTotalFlowList = predictFlowList.<span class=\"title function_\">map</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">any</span></span>) =&gt;</span> item[selectedIndex]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"params\">arr: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span><br><span class=\"line\">    arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> <span class=\"title class_\">Number</span>(prev) + <span class=\"title class_\">Number</span>(curr)); <span class=\"comment\">// sum自己处理好</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowList = <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(stationsAllTime)</span><br><span class=\"line\">    .<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">[LTime], [NTime]</span>) =&gt;</span> (<span class=\"title class_\">LTime</span> &gt; <span class=\"title class_\">NTime</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">[time, v]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sumList = <span class=\"title function_\">sum</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(v <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        time,</span><br><span class=\"line\">        <span class=\"attr\">flow</span>: sumList,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">slice</span>(-<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowAddList = lineFlowList.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">time</span>: <span class=\"title function_\">standardTime</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(item.<span class=\"property\">time</span>).<span class=\"title function_\">getTime</span>() + <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">6</span>)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"attr\">flow</span>: predictTotalFlowList[index],</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stationFlowListAll = lineFlowList.<span class=\"title function_\">concat</span>(lineFlowAddList);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = &#123;</span><br><span class=\"line\">    [eitherInOut === <span class=\"string\">&quot;inflow&quot;</span> ? <span class=\"string\">&quot;flowIn&quot;</span> : <span class=\"string\">&quot;flowOut&quot;</span>]: stationFlowListAll,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"明显缺点\"><a href=\"#明显缺点\" class=\"headerlink\" title=\"明显缺点\"></a>明显缺点</h3><ol>\n<li>显式指定参数和返回值的类型：在函数参数和返回值的类型上进行显式的类型指定可以提高代码的可读性和可维护性。</li>\n<li>使用具体的类型替代 <code>any</code> 类型：在 TypeScript 中尽量避免使用 <code>any</code> 类型，因为它会丧失类型检查的优势。尽量使用具体的类型来代替 <code>any</code>，这样可以在编译时捕获潜在的类型错误。</li>\n<li>避免在函数中直接访问全局变量：直接访问了全局变量<code>eitherInOutMap</code>和<code>standardTime</code>，这样会使函数的可重用性和可测试性下降。建议将这些全局变量作为参数传递给函数，或者将它们封装到函数内部，以减少对全局状态的依赖。</li>\n<li>尽量使用箭头函数和 const/let 替代 function 和 var：使用 ES6 中的箭头函数和 const/let 关键字可以提高代码的可读性和可维护性，并且避免了 var 带来的变量提升和作用域问题</li>\n</ol>\n<h3 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; standardTime &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../Utils/standardTime&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">eitherInOutMap</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>&gt; = &#123; <span class=\"attr\">inflow</span>: <span class=\"number\">0</span>, <span class=\"attr\">outflow</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LineFlowItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">time</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">flow</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">totalFlowProvider</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  state: &#123;</span></span><br><span class=\"line\"><span class=\"params\">    station_flow_in: Record&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>[]&gt;;</span></span><br><span class=\"line\"><span class=\"params\">    station_flow_out: Record&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>[]&gt;;</span></span><br><span class=\"line\"><span class=\"params\">    total_flow_predict: <span class=\"built_in\">number</span>[][];</span></span><br><span class=\"line\"><span class=\"params\">  &#125;,</span></span><br><span class=\"line\"><span class=\"params\">  selectedLine: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">  eitherInOut: <span class=\"built_in\">string</span></span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Promise</span>&lt;&#123; <span class=\"attr\">flowIn</span>: <span class=\"title class_\">LineFlowItem</span>[]; <span class=\"attr\">flowOut</span>: <span class=\"title class_\">LineFlowItem</span>[] &#125;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stationsAllTime =</span><br><span class=\"line\">    eitherInOut === <span class=\"string\">&quot;inflow&quot;</span> ? state.<span class=\"property\">station_flow_in</span> : state.<span class=\"property\">station_flow_out</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictFlowList = state.<span class=\"property\">total_flow_predict</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedIndex = eitherInOutMap[eitherInOut];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> predictTotalFlowList = predictFlowList.<span class=\"title function_\">map</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">item: <span class=\"built_in\">number</span>[]</span>) =&gt;</span> item[selectedIndex]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"params\">arr: <span class=\"built_in\">number</span>[]</span>) =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr); <span class=\"comment\">// sum自己处理好</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowList = <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(stationsAllTime)</span><br><span class=\"line\">    .<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">[LTime], [NTime]</span>) =&gt;</span> (<span class=\"title class_\">LTime</span> &gt; <span class=\"title class_\">NTime</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">[time, v]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sumList = <span class=\"title function_\">sum</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(v));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        time,</span><br><span class=\"line\">        <span class=\"attr\">flow</span>: sumList,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">slice</span>(-<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lineFlowAddList = lineFlowList.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">time</span>: <span class=\"title function_\">standardTime</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(item.<span class=\"property\">time</span>).<span class=\"title function_\">getTime</span>() + <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">6</span>)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"attr\">flow</span>: predictTotalFlowList</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clrf36x3g0009q05zd70q73o7","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x3r000iq05zgajt72t4"},{"post_id":"clrf36x320001q05z4i9zam4o","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x3u000mq05zf3ip5ia3"},{"post_id":"clrf36x370003q05z6qk10h2a","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x3w000pq05z1bym2elb"},{"post_id":"clrf36x3d0007q05zbkyh3xzs","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x3z000tq05z9ha3h591"},{"post_id":"clrf36x3v000nq05za7n37drb","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x40000xq05z4sdo5udf"},{"post_id":"clrf36x3x000rq05z8pqd0neg","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x420010q05z4r7yak0h"},{"post_id":"clrf36x3i000bq05zekxw69i3","category_id":"clrf36x3w000oq05zdr1mdxiz","_id":"clrf36x430014q05zfy1111tf"},{"post_id":"clrf36x3y000sq05z3gyiec0z","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x450018q05z6sld69m1"},{"post_id":"clrf36x40000wq05z02rz8bho","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x46001cq05z052hd2ev"},{"post_id":"clrf36x3o000fq05z0enj4tjf","category_id":"clrf36x3z000uq05zao4qhahj","_id":"clrf36x47001fq05z53g1fwoc"},{"post_id":"clrf36x430013q05z248jbokb","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x48001iq05zhuet7suc"},{"post_id":"clrf36x3r000hq05zgi0o605x","category_id":"clrf36x3w000oq05zdr1mdxiz","_id":"clrf36x49001lq05zawjw4zef"},{"post_id":"clrf36x440017q05z9tp6c316","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x4a001oq05zbysnf3ud"},{"post_id":"clrf36x45001bq05zhkz08n10","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x4b001sq05zbh1x8l83"},{"post_id":"clrf36x3t000lq05zaxdafvj6","category_id":"clrf36x450019q05z8nsib5jn","_id":"clrf36x4c001vq05z283k1b98"},{"post_id":"clrf36x47001eq05z6u85775s","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x4c001wq05z7a48d3ru"},{"post_id":"clrf36x48001hq05z5yqq3gkx","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x4d001yq05z5ao6h119"},{"post_id":"clrf36x49001kq05zcxex3bdz","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x4d001zq05zey1s1yp8"},{"post_id":"clrf36x41000zq05z1k5d0dyl","category_id":"clrf36x47001gq05zengaerg4","_id":"clrf36x4e0021q05z7zjtadjq"},{"post_id":"clrf36x4a001nq05z0efx9nq0","category_id":"clrf36x47001gq05zengaerg4","_id":"clrf36x4e0023q05z7ssq5xfj"},{"post_id":"clrf36x4b001rq05z7lr5h61k","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x4e0026q05z8oklhamn"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","category_id":"clrf36x390004q05zbsbrgmme","_id":"clrf36x4e0028q05zd94j6eim"}],"PostTag":[{"post_id":"clrf36x320001q05z4i9zam4o","tag_id":"clrf36x3b0005q05z0ad0h6yw","_id":"clrf36x41000yq05z9hyr1c2p"},{"post_id":"clrf36x320001q05z4i9zam4o","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x420012q05z327ggdgt"},{"post_id":"clrf36x320001q05z4i9zam4o","tag_id":"clrf36x3s000kq05z7h8f9ri3","_id":"clrf36x440016q05zg64d8e50"},{"post_id":"clrf36x320001q05z4i9zam4o","tag_id":"clrf36x3w000qq05zcze6cthk","_id":"clrf36x45001aq05zfs835yz8"},{"post_id":"clrf36x370003q05z6qk10h2a","tag_id":"clrf36x3z000vq05zhfqo4wh7","_id":"clrf36x4a001mq05zdpn758vf"},{"post_id":"clrf36x370003q05z6qk10h2a","tag_id":"clrf36x430015q05zdvilcv1q","_id":"clrf36x4a001pq05zakmc1wmf"},{"post_id":"clrf36x370003q05z6qk10h2a","tag_id":"clrf36x46001dq05zgy2y4etf","_id":"clrf36x4b001tq05zes19a3pt"},{"post_id":"clrf36x3d0007q05zbkyh3xzs","tag_id":"clrf36x48001jq05z2d61ep7b","_id":"clrf36x4e0022q05zexexeqxs"},{"post_id":"clrf36x3d0007q05zbkyh3xzs","tag_id":"clrf36x4b001qq05z3w2w3e18","_id":"clrf36x4e0024q05z3lu4bg55"},{"post_id":"clrf36x3d0007q05zbkyh3xzs","tag_id":"clrf36x4c001xq05z5m9y5wmw","_id":"clrf36x4e0027q05z28ipeg6l"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4d0020q05z77ug1ccl","_id":"clrf36x4h002jq05z730mggln"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4e0025q05z8u1cfg4m","_id":"clrf36x4h002kq05zf0311j4h"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4e0029q05zbhg61yiu","_id":"clrf36x4h002mq05zc8uc8jr1"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4f002aq05z9lixb74o","_id":"clrf36x4h002nq05z2m2b8njs"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4f002bq05zcd8waq71","_id":"clrf36x4h002pq05zfh6xd529"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4f002cq05zfw8x30tv","_id":"clrf36x4h002qq05zb1f2c6s3"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4f002dq05z7hv26udz","_id":"clrf36x4i002sq05z92jw8bqu"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4g002eq05z53wy46fu","_id":"clrf36x4i002tq05z1jpe3xlb"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4g002fq05zhod738zt","_id":"clrf36x4i002uq05zdxul53x2"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4g002gq05zgrqu6gtl","_id":"clrf36x4i002wq05z0m8sb822"},{"post_id":"clrf36x3g0009q05zd70q73o7","tag_id":"clrf36x4g002hq05z7oephr3r","_id":"clrf36x4i002xq05z9g1ref0y"},{"post_id":"clrf36x3i000bq05zekxw69i3","tag_id":"clrf36x4g002iq05z3mh2bqxc","_id":"clrf36x4i002zq05ze0v51zej"},{"post_id":"clrf36x3i000bq05zekxw69i3","tag_id":"clrf36x4h002lq05zew4q77zh","_id":"clrf36x4i0030q05zaakya9gw"},{"post_id":"clrf36x3o000fq05z0enj4tjf","tag_id":"clrf36x4h002oq05z8mvs6mi5","_id":"clrf36x4j0032q05z5g054l4t"},{"post_id":"clrf36x3r000hq05zgi0o605x","tag_id":"clrf36x4h002rq05z4401fu52","_id":"clrf36x4j0033q05z0mgq1wgj"},{"post_id":"clrf36x3r000hq05zgi0o605x","tag_id":"clrf36x4i002vq05z67qkats2","_id":"clrf36x4j0035q05z8pko8wqt"},{"post_id":"clrf36x3r000hq05zgi0o605x","tag_id":"clrf36x4i002yq05z4z8hhav7","_id":"clrf36x4j0036q05z3kqafohi"},{"post_id":"clrf36x3t000lq05zaxdafvj6","tag_id":"clrf36x4i0031q05z1al8dilc","_id":"clrf36x4j0038q05zgnqq8w6m"},{"post_id":"clrf36x3t000lq05zaxdafvj6","tag_id":"clrf36x4j0034q05z71c65a7r","_id":"clrf36x4j0039q05z97cg1hqc"},{"post_id":"clrf36x3v000nq05za7n37drb","tag_id":"clrf36x4j0037q05zas7s8g3y","_id":"clrf36x4k003dq05z68mgbp9r"},{"post_id":"clrf36x3v000nq05za7n37drb","tag_id":"clrf36x4k003aq05z7enx3yds","_id":"clrf36x4k003eq05zdoic52pn"},{"post_id":"clrf36x3v000nq05za7n37drb","tag_id":"clrf36x4k003bq05z6k8ia0yl","_id":"clrf36x4l003gq05z9z450jxn"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x4n003qq05zc2lbamwz"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4h002lq05zew4q77zh","_id":"clrf36x4n003rq05zef6a7jko"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4k003fq05zhvdg6wju","_id":"clrf36x4n003tq05z5890epdv"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4l003hq05zejb63lvo","_id":"clrf36x4n003uq05z1t0w1ddu"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4l003iq05z3bxscyfj","_id":"clrf36x4n003wq05zenph1s4k"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4l003jq05z9b29gyir","_id":"clrf36x4n003xq05zdojtbrf1"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4l003kq05z6y7n5nf8","_id":"clrf36x4o003zq05z4kgvetx2"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4m003lq05zde8n374j","_id":"clrf36x4o0040q05zdbgd9ax6"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4m003mq05z6njuhd06","_id":"clrf36x4o0041q05z514c9opl"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4m003nq05z39mf8ici","_id":"clrf36x4o0043q05zhjhefocc"},{"post_id":"clrf36x3x000rq05z8pqd0neg","tag_id":"clrf36x4m003oq05z0m5cey2n","_id":"clrf36x4o0044q05zctzp2a6q"},{"post_id":"clrf36x3y000sq05z3gyiec0z","tag_id":"clrf36x4m003pq05z4xnc9cm2","_id":"clrf36x4p0046q05z7hczdegi"},{"post_id":"clrf36x3y000sq05z3gyiec0z","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x4p0047q05z9ttwdvqm"},{"post_id":"clrf36x3y000sq05z3gyiec0z","tag_id":"clrf36x4n003sq05zd3aw282n","_id":"clrf36x4p0049q05zgobq7guw"},{"post_id":"clrf36x3y000sq05z3gyiec0z","tag_id":"clrf36x4n003vq05z28ju5v8n","_id":"clrf36x4p004aq05zc1xp3b19"},{"post_id":"clrf36x3y000sq05z3gyiec0z","tag_id":"clrf36x4o003yq05zbom12rzh","_id":"clrf36x4p004cq05zd5p2aj0n"},{"post_id":"clrf36x3y000sq05z3gyiec0z","tag_id":"clrf36x4o0042q05zdq9621m3","_id":"clrf36x4p004dq05za6k166py"},{"post_id":"clrf36x40000wq05z02rz8bho","tag_id":"clrf36x4o0045q05z717lbbnk","_id":"clrf36x4q004fq05zggmrd8oe"},{"post_id":"clrf36x40000wq05z02rz8bho","tag_id":"clrf36x4p0048q05zabmocyfs","_id":"clrf36x4q004gq05zb0hed0fd"},{"post_id":"clrf36x40000wq05z02rz8bho","tag_id":"clrf36x4p004bq05z0bi4bz7m","_id":"clrf36x4q004iq05zek4ig6te"},{"post_id":"clrf36x41000zq05z1k5d0dyl","tag_id":"clrf36x4q004eq05z77995c76","_id":"clrf36x4r004kq05zgjqeakn6"},{"post_id":"clrf36x41000zq05z1k5d0dyl","tag_id":"clrf36x4q004hq05za107e01i","_id":"clrf36x4r004lq05z68z5heq8"},{"post_id":"clrf36x430013q05z248jbokb","tag_id":"clrf36x4q004jq05z1ucj29dm","_id":"clrf36x4r004oq05ze7kce278"},{"post_id":"clrf36x430013q05z248jbokb","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x4r004pq05ze2f72cho"},{"post_id":"clrf36x430013q05z248jbokb","tag_id":"clrf36x4r004mq05z9uxg6pbi","_id":"clrf36x4s004rq05zcncoa9un"},{"post_id":"clrf36x440017q05z9tp6c316","tag_id":"clrf36x4q004jq05z1ucj29dm","_id":"clrf36x4s004tq05z995g71xm"},{"post_id":"clrf36x440017q05z9tp6c316","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x4s004uq05z5qj2326w"},{"post_id":"clrf36x440017q05z9tp6c316","tag_id":"clrf36x4r004mq05z9uxg6pbi","_id":"clrf36x4s004wq05z8x59bk38"},{"post_id":"clrf36x45001bq05zhkz08n10","tag_id":"clrf36x4q004jq05z1ucj29dm","_id":"clrf36x4u0051q05z6gzt3ien"},{"post_id":"clrf36x45001bq05zhkz08n10","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x4u0052q05z0pwc0l4a"},{"post_id":"clrf36x45001bq05zhkz08n10","tag_id":"clrf36x4s004vq05zb5e0d6qx","_id":"clrf36x4u0054q05z4q2zhoyx"},{"post_id":"clrf36x45001bq05zhkz08n10","tag_id":"clrf36x4t004xq05z1y2xgds9","_id":"clrf36x4u0055q05zh0y55v1w"},{"post_id":"clrf36x45001bq05zhkz08n10","tag_id":"clrf36x4t004yq05z86hk12sl","_id":"clrf36x4u0057q05z0ieiavjz"},{"post_id":"clrf36x45001bq05zhkz08n10","tag_id":"clrf36x4o003yq05zbom12rzh","_id":"clrf36x4u0058q05z35qwbgap"},{"post_id":"clrf36x47001eq05z6u85775s","tag_id":"clrf36x4m003pq05z4xnc9cm2","_id":"clrf36x4v005bq05z4ew9axmo"},{"post_id":"clrf36x47001eq05z6u85775s","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x4v005cq05zcosc2s7n"},{"post_id":"clrf36x47001eq05z6u85775s","tag_id":"clrf36x4r004mq05z9uxg6pbi","_id":"clrf36x4v005eq05zam74g0ee"},{"post_id":"clrf36x47001eq05z6u85775s","tag_id":"clrf36x4u0056q05zgisvah7j","_id":"clrf36x4v005fq05zcc5w00y4"},{"post_id":"clrf36x47001eq05z6u85775s","tag_id":"clrf36x4u0059q05z0q9ef0f6","_id":"clrf36x4v005hq05z8iat4thv"},{"post_id":"clrf36x48001hq05z5yqq3gkx","tag_id":"clrf36x4v005aq05z9jtbdn9n","_id":"clrf36x4w005kq05z0rxcgpqk"},{"post_id":"clrf36x48001hq05z5yqq3gkx","tag_id":"clrf36x4v005dq05zacsk2pwb","_id":"clrf36x4w005lq05z3x8i2dxo"},{"post_id":"clrf36x48001hq05z5yqq3gkx","tag_id":"clrf36x4v005gq05zhb4v1xhc","_id":"clrf36x4w005nq05z3vx26j4x"},{"post_id":"clrf36x48001hq05z5yqq3gkx","tag_id":"clrf36x4w005iq05z5nnv0hm5","_id":"clrf36x4w005oq05z2gwr3njk"},{"post_id":"clrf36x49001kq05zcxex3bdz","tag_id":"clrf36x4w005jq05zckl60f9x","_id":"clrf36x4x005rq05zcjyb2ptd"},{"post_id":"clrf36x49001kq05zcxex3bdz","tag_id":"clrf36x4w005mq05z5901f1e2","_id":"clrf36x4x005sq05z8g8jhr3e"},{"post_id":"clrf36x49001kq05zcxex3bdz","tag_id":"clrf36x4w005pq05zchtx328l","_id":"clrf36x4x005uq05zb21a1vfm"},{"post_id":"clrf36x4a001nq05z0efx9nq0","tag_id":"clrf36x4x005qq05z6eaw6el1","_id":"clrf36x4y005wq05z3b2y5xpl"},{"post_id":"clrf36x4a001nq05z0efx9nq0","tag_id":"clrf36x4t004yq05z86hk12sl","_id":"clrf36x4y005xq05zf3ye05q8"},{"post_id":"clrf36x4b001rq05z7lr5h61k","tag_id":"clrf36x3j000dq05z55fpdgyp","_id":"clrf36x4y0060q05z4334c6ka"},{"post_id":"clrf36x4b001rq05z7lr5h61k","tag_id":"clrf36x4t004yq05z86hk12sl","_id":"clrf36x4y0061q05zhvs00elj"},{"post_id":"clrf36x4b001rq05z7lr5h61k","tag_id":"clrf36x4y005yq05zfze382ah","_id":"clrf36x4z0063q05z3vy2aqey"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4d0020q05z77ug1ccl","_id":"clrf36x53006mq05za1sya49b"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4e0029q05zbhg61yiu","_id":"clrf36x53006nq05z72104ha7"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4z0064q05zcyulbh8a","_id":"clrf36x53006oq05z3ai2a0ee"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4z0065q05zeixx7kdg","_id":"clrf36x53006pq05zbul0929s"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4z0066q05zf4smgj7f","_id":"clrf36x53006qq05z3jy5hjtb"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4z0067q05zclm93wka","_id":"clrf36x53006rq05zchr0btu2"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4z0068q05z3vbfce2f","_id":"clrf36x53006sq05z84w11jv5"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x500069q05z5c3oe1fi","_id":"clrf36x53006tq05zd9w83uyt"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x50006aq05z4hlr5bgt","_id":"clrf36x53006uq05z5zvu4fwo"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x50006bq05z4k0x3ml8","_id":"clrf36x53006vq05z297v5hsb"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x50006cq05z39ye3ilu","_id":"clrf36x53006wq05z78wu3nky"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x50006dq05zesfqh164","_id":"clrf36x53006xq05z714o96dl"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x51006eq05z7d9s2dqv","_id":"clrf36x53006yq05zddky2i5j"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x51006fq05za7tkbitu","_id":"clrf36x53006zq05z6s5gfy2t"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x51006gq05zdkpz8o60","_id":"clrf36x530070q05z739odcda"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x51006hq05zc4olddnw","_id":"clrf36x530071q05za5t370y8"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x51006iq05z9gs783gd","_id":"clrf36x530072q05zgxqna3lk"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x4q004hq05za107e01i","_id":"clrf36x530073q05z1rzh642q"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x52006kq05z4oxwbevx","_id":"clrf36x530074q05z767gdtp2"},{"post_id":"clrf36x4c001uq05z5c6z4jg1","tag_id":"clrf36x52006lq05z6mbadzrc","_id":"clrf36x530075q05z2jzfcbua"}],"Tag":[{"name":"八股","_id":"clrf36x3b0005q05z0ad0h6yw"},{"name":"前端","_id":"clrf36x3j000dq05z55fpdgyp"},{"name":"js手撕","_id":"clrf36x3s000kq05z7h8f9ri3"},{"name":"web安全","_id":"clrf36x3w000qq05zcze6cthk"},{"name":"英语词汇","_id":"clrf36x3z000vq05zhfqo4wh7"},{"name":"循环","_id":"clrf36x430015q05zdvilcv1q"},{"name":"prompt","_id":"clrf36x46001dq05zgy2y4etf"},{"name":"高等数学","_id":"clrf36x48001jq05z2d61ep7b"},{"name":"英语","_id":"clrf36x4b001qq05z3w2w3e18"},{"name":"吐槽","_id":"clrf36x4c001xq05z5m9y5wmw"},{"name":"TypeScript","_id":"clrf36x4d0020q05z77ug1ccl"},{"name":"游戏开发","_id":"clrf36x4e0025q05z8u1cfg4m"},{"name":"前端开发","_id":"clrf36x4e0029q05zbhg61yiu"},{"name":"编程语言","_id":"clrf36x4f002aq05z9lixb74o"},{"name":"Web开发","_id":"clrf36x4f002bq05zcd8waq71"},{"name":"游戏设计","_id":"clrf36x4f002cq05zfw8x30tv"},{"name":"前端框架","_id":"clrf36x4f002dq05z7hv26udz"},{"name":"工具","_id":"clrf36x4g002eq05z53wy46fu"},{"name":"学习笔记","_id":"clrf36x4g002fq05zhod738zt"},{"name":"教程","_id":"clrf36x4g002gq05zgrqu6gtl"},{"name":"杆踪球影冰球游戏","_id":"clrf36x4g002hq05z7oephr3r"},{"name":"Typescript","_id":"clrf36x4g002iq05z3mh2bqxc"},{"name":"React","_id":"clrf36x4h002lq05zew4q77zh"},{"name":"第一篇","_id":"clrf36x4h002oq05z8mvs6mi5"},{"name":"Spring","_id":"clrf36x4h002rq05z4401fu52"},{"name":"Sprintboot","_id":"clrf36x4i002vq05z67qkats2"},{"name":"Mybatis","_id":"clrf36x4i002yq05z4z8hhav7"},{"name":"hexo指南","_id":"clrf36x4i0031q05z1al8dilc"},{"name":"shell","_id":"clrf36x4j0034q05z71c65a7r"},{"name":"java","_id":"clrf36x4j0037q05zas7s8g3y"},{"name":"菜鸟","_id":"clrf36x4k003aq05z7enx3yds"},{"name":"大一","_id":"clrf36x4k003bq05z6k8ia0yl"},{"name":"Javascipt","_id":"clrf36x4k003fq05zhvdg6wju"},{"name":"组件化编程","_id":"clrf36x4l003hq05zejb63lvo"},{"name":"combineReducers","_id":"clrf36x4l003iq05z3bxscyfj"},{"name":"redux","_id":"clrf36x4l003jq05z9b29gyir"},{"name":"异步数据获取","_id":"clrf36x4l003kq05z6y7n5nf8"},{"name":"redux-persist","_id":"clrf36x4m003lq05zde8n374j"},{"name":"样式化组件","_id":"clrf36x4m003mq05z6njuhd06"},{"name":"生命周期","_id":"clrf36x4m003nq05z39mf8ici"},{"name":"单向数据流","_id":"clrf36x4m003oq05z0m5cey2n"},{"name":"react","_id":"clrf36x4m003pq05z4xnc9cm2"},{"name":"字典","_id":"clrf36x4n003sq05zd3aw282n"},{"name":"表单格式","_id":"clrf36x4n003vq05z28ju5v8n"},{"name":"正则","_id":"clrf36x4o003yq05zbom12rzh"},{"name":"跨域","_id":"clrf36x4o0042q05zdq9621m3"},{"name":"考研英语","_id":"clrf36x4o0045q05z717lbbnk"},{"name":"python","_id":"clrf36x4p0048q05zabmocyfs"},{"name":"正则表达式","_id":"clrf36x4p004bq05z0bi4bz7m"},{"name":"Three.js","_id":"clrf36x4q004eq05z77995c76"},{"name":"JavaScript","_id":"clrf36x4q004hq05za107e01i"},{"name":"前端学习计划","_id":"clrf36x4q004jq05z1ucj29dm"},{"name":"js","_id":"clrf36x4r004mq05z9uxg6pbi"},{"name":"web3D","_id":"clrf36x4s004vq05zb5e0d6qx"},{"name":"Js","_id":"clrf36x4t004xq05z1y2xgds9"},{"name":"Vue","_id":"clrf36x4t004yq05z86hk12sl"},{"name":"webpack","_id":"clrf36x4u0056q05zgisvah7j"},{"name":"vue","_id":"clrf36x4u0059q05z0q9ef0f6"},{"name":"C++","_id":"clrf36x4v005aq05z9jtbdn9n"},{"name":"leetcode","_id":"clrf36x4v005dq05zacsk2pwb"},{"name":"算法","_id":"clrf36x4v005gq05zhb4v1xhc"},{"name":"一个月","_id":"clrf36x4w005iq05z5nnv0hm5"},{"name":"kotlin","_id":"clrf36x4w005jq05zckl60f9x"},{"name":"安卓开发","_id":"clrf36x4w005mq05z5901f1e2"},{"name":"dowdload","_id":"clrf36x4w005pq05zchtx328l"},{"name":"实习","_id":"clrf36x4x005qq05z6eaw6el1"},{"name":"面经","_id":"clrf36x4y005yq05zfze382ah"},{"name":"轨道客流","_id":"clrf36x4z0064q05zcyulbh8a"},{"name":"异步编程","_id":"clrf36x4z0065q05zeixx7kdg"},{"name":"Promise","_id":"clrf36x4z0066q05zf4smgj7f"},{"name":"Object.entries()","_id":"clrf36x4z0067q05zclm93wka"},{"name":"Array.sort()","_id":"clrf36x4z0068q05z3vbfce2f"},{"name":"Array.map()","_id":"clrf36x500069q05z5c3oe1fi"},{"name":"Array.reduce()","_id":"clrf36x50006aq05z4hlr5bgt"},{"name":"Number()","_id":"clrf36x50006bq05z4k0x3ml8"},{"name":"Date()","_id":"clrf36x50006cq05z39ye3ilu"},{"name":"getTime()","_id":"clrf36x50006dq05zesfqh164"},{"name":"Object.values()","_id":"clrf36x51006eq05z7d9s2dqv"},{"name":"Array.concat()","_id":"clrf36x51006fq05za7tkbitu"},{"name":"标准时间","_id":"clrf36x51006gq05zdkpz8o60"},{"name":"类型推断","_id":"clrf36x51006hq05zc4olddnw"},{"name":"类型注释","_id":"clrf36x51006iq05z9gs783gd"},{"name":"代码优化","_id":"clrf36x52006kq05z4oxwbevx"},{"name":"代码可读性","_id":"clrf36x52006lq05z6mbadzrc"}]}}